/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 1/18/09 11:56 PM */

import java.util.*;

// actions cut down to avoid compile errors


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * on 1/18/09 11:56 PM from the specification file
 * <tt>src/test/cases/testloader/testloader.flex</tt>
 */
public class Testloader {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int DESCR = 2;
  public static final int JAVACCMD = 6;
  public static final int LINELIST = 8;
  public static final int JFLEXCMD = 4;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\30\1\2\2\0\1\1\22\0\1\10\1\0\1\32\1\31"+
    "\11\0\1\26\2\0\12\34\1\7\41\0\1\33\4\0\1\4\1\0"+
    "\1\13\1\11\1\6\1\22\2\0\1\15\1\21\1\0\1\23\1\5"+
    "\1\3\1\20\1\16\1\0\1\14\1\12\1\17\1\27\1\25\1\0"+
    "\1\24\uff87\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\1\1\2\2\1\1\3\3\4"+
    "\1\5\2\6\1\7\2\5\2\10\2\11\1\12\1\13"+
    "\2\14\11\0\1\15\4\0\1\16\1\17\2\20\10\0"+
    "\1\21\6\0\1\22\1\0\1\23\22\0\1\24\1\0"+
    "\1\25\15\0\1\26\1\0\1\27\1\0\1\30\1\31";

  private static int [] zzUnpackAction() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\313\0\u0105\0\u0122\0\u013f\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\313\0\u0227\0\u0244\0\u0261"+
    "\0\u027e\0\313\0\u029b\0\313\0\u02b8\0\u02d5\0\u02f2\0\313"+
    "\0\u030f\0\u032c\0\u0349\0\u0366\0\u0383\0\u01d0\0\u03a0\0\u03bd"+
    "\0\u03da\0\u03f7\0\u0414\0\u0431\0\u044e\0\u046b\0\u01d0\0\313"+
    "\0\u0488\0\313\0\u04a5\0\u04c2\0\u04df\0\u04fc\0\u0519\0\u0536"+
    "\0\u0553\0\u0570\0\u058d\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e"+
    "\0\u063b\0\313\0\u0658\0\313\0\u0675\0\u0692\0\u06af\0\u06cc"+
    "\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d\0\u077a\0\u0797\0\u07b4"+
    "\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845\0\u0862\0\313\0\u087f"+
    "\0\u0845\0\u089c\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d\0\u094a"+
    "\0\u0967\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\313\0\u0a15"+
    "\0\313\0\u0a32\0\313\0\313";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\4\10\1\14\1\15\7\10"+
    "\1\16\6\10\1\14\1\17\3\10\1\20\1\21\1\22"+
    "\32\20\1\23\1\24\1\25\5\23\1\26\17\23\1\26"+
    "\1\23\1\27\1\30\2\23\1\31\1\32\5\23\1\26"+
    "\17\23\1\26\1\23\1\27\1\30\1\23\1\10\1\33"+
    "\1\34\5\10\1\35\17\10\1\35\3\10\1\36\1\0"+
    "\1\37\1\40\42\0\1\41\63\0\1\12\36\0\1\42"+
    "\40\0\1\14\17\0\1\14\12\0\1\43\32\0\1\44"+
    "\15\0\1\45\12\0\1\17\2\0\32\17\1\20\2\0"+
    "\32\20\1\46\1\0\1\22\4\46\1\47\26\46\2\0"+
    "\4\46\1\47\25\46\1\23\2\0\5\23\1\0\17\23"+
    "\1\0\4\23\2\0\1\25\42\0\1\26\17\0\1\26"+
    "\4\0\1\27\2\50\5\27\1\50\17\27\1\50\1\27"+
    "\1\23\2\27\1\23\2\0\5\23\1\51\17\23\1\51"+
    "\4\23\2\0\1\32\34\0\1\34\42\0\1\35\17\0"+
    "\1\35\40\0\1\36\2\0\1\40\41\0\1\52\32\0"+
    "\1\53\41\0\1\54\47\0\1\55\32\0\1\56\11\0"+
    "\1\46\2\0\4\46\1\47\1\57\24\46\32\50\1\60"+
    "\2\50\1\0\1\61\1\62\5\0\1\51\17\0\1\51"+
    "\4\0\1\52\2\0\32\52\6\0\1\63\41\0\1\64"+
    "\25\0\1\65\36\0\1\66\30\0\1\62\41\0\1\67"+
    "\41\0\1\70\33\0\1\71\45\0\1\72\20\0\1\73"+
    "\41\0\1\74\26\0\1\75\16\0\1\76\15\0\1\77"+
    "\16\0\1\100\6\0\1\73\2\0\32\73\16\0\1\101"+
    "\26\0\1\102\46\0\1\103\22\0\1\104\35\0\1\105"+
    "\10\0\1\106\31\0\1\107\21\0\1\110\45\0\1\111"+
    "\23\0\1\112\45\0\1\113\34\0\1\114\41\0\1\115"+
    "\27\0\1\116\37\0\1\117\37\0\1\120\33\0\1\121"+
    "\35\0\1\122\14\0\1\123\40\0\1\124\34\0\1\125"+
    "\34\0\1\126\34\0\1\127\35\0\1\130\34\0\1\131"+
    "\34\0\1\132\34\0\1\130\6\0\1\133\2\0\1\134"+
    "\22\0\1\132\6\0\1\135\2\0\1\136\26\0\1\137"+
    "\24\0\1\140\44\0\1\141\24\0\1\142\57\0\1\143"+
    "\30\0\1\144\40\0\1\145\30\0\1\146\17\0\1\147"+
    "\40\0\1\150\30\0\1\151\40\0\1\152\30\0\1\153"+
    "\34\0\1\154\26\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2639];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\1\1\1\11\12\1\1\11\4\1\1\11"+
    "\1\1\1\11\3\1\1\11\11\0\1\1\4\0\1\1"+
    "\1\11\1\1\1\11\10\0\1\1\6\0\1\11\1\0"+
    "\1\11\22\0\1\11\1\0\1\1\15\0\1\11\1\0"+
    "\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[108];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private StringBuilder buffer = new StringBuilder();
  private List<String> cmdLine;
  private List<Integer> lineList;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Testloader(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Testloader(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 84) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int load() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [64] { /* ignore whitespace */ }");
          { /* ignore whitespace */
          }
        case 26: break;
        case 19: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [34] { cmdLine = new ArrayList<String>(); yybegin(JFLEXCMD); }");
          { cmdLine = new ArrayList<String>(); yybegin(JFLEXCMD);
          }
        case 27: break;
        case 3: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [49] { /* ignore comments */ }");
          { /* ignore comments */
          }
        case 28: break;
        case 15: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [62] { cmdLine.add(yytext().substring(1,yylength()-1)); "+ZZ_NL+"                        /* quoted cmdline options */ }");
          { cmdLine.add(yytext().substring(1,yylength()-1)); 
                        /* quoted cmdline options */
          }
        case 29: break;
        case 17: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [30] { /* test.setTestName(yytext().substring(6).trim()); */ }");
          { /* test.setTestName(yytext().substring(6).trim()); */
          }
        case 30: break;
        case 21: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [40] { lineList = new ArrayList<Integer>(); "+ZZ_NL+"                        /* test.setJFlexDiff(lineList); */"+ZZ_NL+"                        /* yybegin(LINELIST); */ }");
          { lineList = new ArrayList<Integer>(); 
                        /* test.setJFlexDiff(lineList); */
                        /* yybegin(LINELIST); */
          }
        case 31: break;
        case 14: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 5;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 6;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [56] { /* test.setDescription(buffer.toString()); */ yybegin(YYINITIAL); }");
          { /* test.setDescription(buffer.toString()); */ yybegin(YYINITIAL);
          }
        case 32: break;
        case 24: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [46] { /* test.setExpectJavacFail(false); */ }");
          { /* test.setExpectJavacFail(false); */
          }
        case 33: break;
        case 2: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [48] { /* ignore newline and whitespace */ }");
          { /* ignore newline and whitespace */
          }
        case 34: break;
        case 1: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [82] { throw new Error(\"Illegal character: [\"+yytext()+\"]\"); }");
          { throw new Error("Illegal character: ["+yytext()+"]");
          }
        case 35: break;
        case 6: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [69] { /* test.setJflexCmdln(cmdLine); */ yybegin(YYINITIAL); }");
          { /* test.setJflexCmdln(cmdLine); */ yybegin(YYINITIAL);
          }
        case 36: break;
        case 16: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [65] { /* allow line continuation with \\ */ }");
          { /* allow line continuation with \ */
          }
        case 37: break;
        case 9: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [77] { yybegin(YYINITIAL); }");
          { yybegin(YYINITIAL);
          }
        case 38: break;
        case 5: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [61] { cmdLine.add(yytext()); }");
          { cmdLine.add(yytext());
          }
        case 39: break;
        case 18: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [35] { cmdLine = new ArrayList<String>(); yybegin(JAVACCMD); }");
          { cmdLine = new ArrayList<String>(); yybegin(JAVACCMD);
          }
        case 40: break;
        case 22: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [45] { /* test.setExpectJavacFail(true); */ }");
          { /* test.setExpectJavacFail(true); */
          }
        case 41: break;
        case 11: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [75] { /* lineList.add(new Integer(yytext())); */ }");
          { /* lineList.add(new Integer(yytext())); */
          }
        case 42: break;
        case 4: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [54] { buffer.append(yytext()); }");
          { buffer.append(yytext());
          }
        case 43: break;
        case 20: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [32] { yybegin(DESCR); }");
          { yybegin(DESCR);
          }
        case 44: break;
        case 25: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [38] { /* test.setExpectJFlexFail(false); */ }");
          { /* test.setExpectJFlexFail(false); */
          }
        case 45: break;
        case 8: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [72] { /* test.setJavacCmdln(cmdLine); */ yybegin(YYINITIAL); }");
          { /* test.setJavacCmdln(cmdLine); */ yybegin(YYINITIAL);
          }
        case 46: break;
        case 13: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [2147483647] {  }");
          { 
          }
        case 47: break;
        case 12: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [2147483647] {  }");
          { 
          }
        case 48: break;
        case 10: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [76] {  }");
          { 
          }
        case 49: break;
        case 23: 
          System.out.println("match: --"+yytext()+"--");
          System.out.println("action [37] { /* test.setExpectJFlexFail(true); */ }");
          { /* test.setExpectJFlexFail(true); */
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                System.out.println("match: <<EOF>>");
                System.out.println("action [80] { return 1; }");
                return 1;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Testloader <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Testloader scanner = null;
        try {
          scanner = new Testloader( new java.io.FileReader(argv[i]) );
          do {
            System.out.println(scanner.load());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
