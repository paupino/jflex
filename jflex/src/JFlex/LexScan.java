/* The following code was generated by JFlex 1.4.1 on 12/9/07 9:11 PM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * JFlex 1.4.1                                                             *
 * Copyright (C) 1998-2004  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

package JFlex;

import java_cup.runtime.Symbol;
import java.util.Vector;
import java.io.*;
import java.util.Stack;

/**
 * The lexer of JFlex.
 *
 * Generated by <a href="http://www.jflex.de/">JFlex</a>.
 *
 * @author Gerwin Klein
 * @version JFlex 1.4.1, $Revision$, $Date$
 */

public final class LexScan implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_CONTENT = 16;
  public static final int REGEXPSTART = 8;
  public static final int MACROS = 6;
  public static final int STATELIST = 4;
  public static final int EATWSPNL = 24;
  public static final int CHARCLASS = 18;
  public static final int JAVA_CODE = 12;
  public static final int REGEXP = 10;
  public static final int YYINITIAL = 0;
  public static final int REPEATEXP = 22;
  public static final int COMMENT = 2;
  public static final int STATES = 14;
  public static final int COPY = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\21\1\22\1\10\1\13\2\11\1\12\16\21\4\0\1\10\1\74"+
    "\1\26\1\0\1\102\1\31\1\0\1\27\1\76\1\77\1\24\1\100"+
    "\1\15\1\105\1\14\1\25\1\7\1\62\2\7\2\3\1\63\1\60"+
    "\1\61\1\1\1\104\1\0\1\66\1\65\1\72\1\101\1\0\4\2"+
    "\1\67\1\71\10\20\1\70\13\20\1\16\1\4\1\17\1\103\1\20"+
    "\1\0\1\47\1\53\1\51\1\56\1\42\1\43\1\57\1\36\1\33"+
    "\1\54\1\64\1\45\1\52\1\34\1\40\1\55\1\20\1\37\1\50"+
    "\1\35\1\6\1\46\1\41\1\5\1\44\1\20\1\32\1\73\1\30"+
    "\1\75\6\21\1\23\32\21\2\0\4\20\4\0\1\20\2\0\1\21"+
    "\7\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u013f\20"+
    "\31\0\162\20\4\0\14\20\16\0\5\20\11\0\1\20\21\0\130\21"+
    "\5\0\23\21\12\0\1\20\13\0\1\20\1\0\3\20\1\0\1\20"+
    "\1\0\24\20\1\0\54\20\1\0\46\20\1\0\5\20\4\0\202\20"+
    "\1\0\4\21\3\0\105\20\1\0\46\20\2\0\2\20\6\0\20\20"+
    "\41\0\46\20\2\0\1\20\7\0\47\20\11\0\21\21\1\0\27\21"+
    "\1\0\3\21\1\0\1\21\1\0\2\21\1\0\1\21\13\0\33\20"+
    "\5\0\3\20\15\0\4\21\14\0\6\21\13\0\32\20\5\0\13\20"+
    "\16\21\7\0\12\21\4\0\2\20\1\21\143\20\1\0\1\20\10\21"+
    "\1\0\6\21\2\20\2\21\1\0\4\21\2\20\12\21\3\20\2\0"+
    "\1\20\17\0\1\21\1\20\1\21\36\20\33\21\2\0\3\20\60\0"+
    "\46\20\13\21\1\20\u014f\0\3\21\66\20\2\0\1\21\1\20\20\21"+
    "\2\0\1\20\4\21\3\0\12\20\2\21\2\0\12\21\21\0\3\21"+
    "\1\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20"+
    "\3\0\4\20\2\0\1\21\1\20\7\21\2\0\2\21\2\0\3\21"+
    "\11\0\1\21\4\0\2\20\1\0\3\20\2\21\2\0\12\21\4\20"+
    "\15\0\3\21\1\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\2\0\1\21\1\0\5\21"+
    "\4\0\2\21\2\0\3\21\13\0\4\20\1\0\1\20\7\0\14\21"+
    "\3\20\14\0\3\21\1\0\11\20\1\0\3\20\1\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\10\21\1\0"+
    "\3\21\1\0\3\21\2\0\1\20\17\0\2\20\2\21\2\0\12\21"+
    "\1\0\1\20\17\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\6\21"+
    "\3\0\2\21\2\0\3\21\10\0\2\21\4\0\2\20\1\0\3\20"+
    "\4\0\12\21\1\0\1\20\20\0\1\21\1\20\1\0\6\20\3\0"+
    "\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0"+
    "\2\20\3\0\3\20\3\0\10\20\1\0\3\20\4\0\5\21\3\0"+
    "\3\21\1\0\4\21\11\0\1\21\17\0\11\21\11\0\1\20\7\0"+
    "\3\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0"+
    "\5\20\4\0\7\21\1\0\3\21\1\0\4\21\7\0\2\21\11\0"+
    "\2\20\4\0\12\21\22\0\2\21\1\0\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\12\20\1\0\5\20\2\0\1\21\1\20\7\21\1\0"+
    "\3\21\1\0\4\21\7\0\2\21\7\0\1\20\1\0\2\20\4\0"+
    "\12\21\22\0\2\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0"+
    "\20\20\4\0\6\21\2\0\3\21\1\0\4\21\11\0\1\21\10\0"+
    "\2\20\4\0\12\21\22\0\2\21\1\0\22\20\3\0\30\20\1\0"+
    "\11\20\1\0\1\20\2\0\7\20\3\0\1\21\4\0\6\21\1\0"+
    "\1\21\1\0\10\21\22\0\2\21\15\0\60\20\1\21\2\20\7\21"+
    "\4\0\10\20\10\21\1\0\12\21\47\0\2\20\1\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0"+
    "\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1\0\4\20\1\21"+
    "\2\20\6\21\1\0\2\21\1\20\2\0\5\20\1\0\1\20\1\0"+
    "\6\21\2\0\12\21\2\0\2\20\42\0\1\20\27\0\2\21\6\0"+
    "\12\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21\10\20"+
    "\1\0\42\20\6\0\24\21\1\0\2\21\4\20\4\0\10\21\1\0"+
    "\44\21\11\0\1\21\71\0\42\20\1\0\5\20\1\0\2\20\1\0"+
    "\7\21\3\0\4\21\6\0\12\21\6\0\6\20\4\21\106\0\46\20"+
    "\12\0\51\20\7\0\132\20\5\0\104\20\5\0\122\20\6\0\7\20"+
    "\1\0\77\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20"+
    "\1\0\4\20\2\0\47\20\1\0\1\20\1\0\4\20\2\0\37\20"+
    "\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20"+
    "\2\0\7\20\1\0\7\20\1\0\27\20\1\0\37\20\1\0\1\20"+
    "\1\0\4\20\2\0\7\20\1\0\47\20\1\0\23\20\16\0\11\21"+
    "\56\0\125\20\14\0\u026c\20\2\0\10\20\12\0\32\20\5\0\113\20"+
    "\3\0\3\20\17\0\15\20\1\0\4\20\3\21\13\0\22\20\3\21"+
    "\13\0\22\20\2\21\14\0\15\20\1\0\3\20\1\0\2\21\14\0"+
    "\64\20\40\21\3\0\1\20\3\0\2\20\1\21\2\0\12\21\41\0"+
    "\3\21\2\0\12\21\6\0\130\20\10\0\51\20\1\21\126\0\35\20"+
    "\3\0\14\21\4\0\14\21\12\0\12\21\36\20\2\0\5\20\u038b\0"+
    "\154\20\224\0\234\20\4\0\132\20\6\0\26\20\2\0\6\20\2\0"+
    "\46\20\2\0\6\20\2\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0\1\20\3\0"+
    "\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0\15\20\5\0"+
    "\3\20\1\0\7\20\17\0\4\21\30\0\2\11\5\21\20\0\2\20"+
    "\23\0\1\20\13\0\4\21\6\0\6\21\1\0\1\20\15\0\1\20"+
    "\40\0\22\20\36\0\15\21\4\0\1\21\3\0\6\21\27\0\1\20"+
    "\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\1\0\3\20\1\0\7\20"+
    "\3\0\3\20\5\0\5\20\26\0\44\20\u0e81\0\3\20\31\0\11\20"+
    "\6\21\1\0\5\20\2\0\5\20\4\0\126\20\2\0\2\21\2\0"+
    "\3\20\1\0\137\20\5\0\50\20\4\0\136\20\21\0\30\20\70\0"+
    "\20\20\u0200\0\u19b6\20\112\0\u51a6\20\132\0\u048d\20\u0773\0\u2ba4\20\u215c\0"+
    "\u012e\20\2\0\73\20\225\0\7\20\14\0\5\20\5\0\1\20\1\21"+
    "\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0"+
    "\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0"+
    "\15\20\3\0\20\21\20\0\4\21\17\0\2\20\30\0\3\20\31\0"+
    "\1\20\6\0\5\20\1\0\207\20\2\0\1\21\4\0\1\20\13\0"+
    "\12\21\7\0\32\20\4\0\1\20\1\0\32\20\12\0\132\20\3\0"+
    "\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\2\20\3\0"+
    "\2\20\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\14\0\1\1\2\3\1\1\1\2\3\4"+
    "\1\5\1\6\2\7\1\6\1\10\2\6\1\4\1\11"+
    "\1\12\1\6\1\11\1\13\1\4\1\14\1\15\2\16"+
    "\1\6\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\16\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\3\4\1\40\1\41\1\6\1\42"+
    "\1\43\1\44\1\4\2\45\1\46\1\16\1\47\1\50"+
    "\1\51\1\52\1\16\1\53\1\54\1\4\2\44\1\4"+
    "\1\55\1\4\1\56\1\13\1\57\3\0\1\60\1\61"+
    "\1\0\1\62\1\0\2\11\1\0\15\11\3\0\1\63"+
    "\1\11\1\64\1\11\1\0\1\65\1\6\1\0\1\66"+
    "\1\67\2\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\0\1\75\1\0\1\76\1\77\4\0\2\100\10\0"+
    "\1\101\1\102\2\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\107\1\110\3\0\1\111\5\0\1\112\1\0\1\57"+
    "\2\6\1\11\2\113\34\11\3\0\2\114\1\11\2\115"+
    "\1\11\1\0\1\67\1\0\1\116\5\0\1\117\2\0"+
    "\1\37\4\0\1\102\1\0\1\120\1\121\2\122\3\0"+
    "\2\11\1\123\24\11\1\124\11\11\3\0\2\11\1\0"+
    "\2\116\14\0\2\120\3\0\20\11\1\125\3\11\1\126"+
    "\7\11\1\127\6\11\1\130\1\11\1\131\1\125\1\0"+
    "\2\11\1\0\1\116\13\0\1\120\5\0\11\11\1\0"+
    "\1\11\1\132\5\11\1\133\1\134\16\11\1\135\1\136"+
    "\2\11\7\0\2\37\10\0\2\137\3\0\11\11\1\140"+
    "\11\11\1\141\3\11\1\142\1\0\3\11\1\143\1\144"+
    "\2\11\6\0\1\145\1\37\3\0\1\37\6\0\2\146"+
    "\4\0\1\136\1\11\1\147\1\123\3\11\1\150\2\151"+
    "\1\140\1\0\11\11\2\152\1\11\1\153\1\11\2\154"+
    "\1\11\1\155\6\0\1\37\6\0\1\37\13\0\1\11"+
    "\1\156\2\11\1\151\1\157\1\151\1\140\1\0\2\11"+
    "\1\160\2\11\1\161\3\11\1\152\1\162\1\152\1\163"+
    "\1\153\1\164\1\154\2\165\1\154\4\0\1\166\1\167"+
    "\2\37\4\0\2\37\7\0\2\170\1\0\3\11\2\157"+
    "\1\171\2\172\1\0\1\11\1\0\5\11\2\162\2\165"+
    "\2\0\1\173\2\0\1\37\2\0\2\37\4\0\1\37"+
    "\2\0\2\37\7\0\2\174\1\11\1\157\1\0\1\171"+
    "\1\172\1\175\1\172\2\0\2\11\1\176\1\11\1\177"+
    "\1\200\2\201\1\162\4\0\1\202\1\0\4\37\3\0"+
    "\4\37\3\0\2\203\1\0\1\174\1\204\1\174\1\205"+
    "\2\175\2\0\2\11\1\176\2\206\1\201\1\207\1\201"+
    "\7\0\3\37\5\0\3\37\1\0\2\210\1\0\2\204"+
    "\1\175\3\0\2\11\1\206\1\211\1\206\2\207\1\212"+
    "\1\213\4\0\1\37\3\0\1\37\2\214\1\204\1\0"+
    "\1\160\1\0\1\160\1\11\2\211\1\207\4\0\1\37"+
    "\2\0\1\37\2\215\1\211\4\0\1\216";

  private static int [] zzUnpackAction() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u041a\0\u0578\0\u05be"+
    "\0\u041a\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u041a\0\u094c\0\u041a"+
    "\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u041a\0\u0aaa\0\u041a\0\u0af0"+
    "\0\u041a\0\u0b36\0\u0b7c\0\u0bc2\0\u041a\0\u041a\0\u041a\0\u041a"+
    "\0\u041a\0\u041a\0\u041a\0\u041a\0\u0c08\0\u0c4e\0\u0c94\0\u0cda"+
    "\0\u041a\0\u041a\0\u0d20\0\u041a\0\u0d66\0\u0dac\0\u0df2\0\u041a"+
    "\0\u0e38\0\u041a\0\u0e7e\0\u0e7e\0\u0aaa\0\u041a\0\u041a\0\u0ec4"+
    "\0\u041a\0\u0f0a\0\u0f50\0\u0f50\0\u041a\0\u0f96\0\u041a\0\u0fdc"+
    "\0\u041a\0\u1022\0\u1068\0\u10ae\0\u10f4\0\u04ec\0\u041a\0\u041a"+
    "\0\u0532\0\u041a\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298"+
    "\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8"+
    "\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u041a\0\u16b2"+
    "\0\u16f8\0\u173e\0\u0906\0\u041a\0\u1784\0\u17ca\0\u041a\0\u1810"+
    "\0\u1856\0\u189c\0\u18e2\0\u041a\0\u041a\0\u041a\0\u041a\0\u041a"+
    "\0\u0a1e\0\u0b36\0\u1928\0\u041a\0\u196e\0\u19b4\0\u0b36\0\u19fa"+
    "\0\u0bc2\0\u041a\0\u1a40\0\u0c4e\0\u0c94\0\u0cda\0\u1a86\0\u1acc"+
    "\0\u1b12\0\u1b58\0\u1b9e\0\u041a\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6"+
    "\0\u041a\0\u041a\0\u041a\0\u041a\0\u041a\0\u041a\0\u0e7e\0\u0aaa"+
    "\0\u1cfc\0\u041a\0\u0f50\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u0fdc\0\u041a\0\u113a\0\u041a\0\u1ea0\0\u120c\0\u041a\0\u1ee6"+
    "\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044\0\u208a\0\u20d0\0\u2116"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea\0\u2530\0\u2576"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6"+
    "\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u041a\0\u294a\0\u2990"+
    "\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u041a\0\u2b34\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u041a\0\u2d1e\0\u2d64"+
    "\0\u041a\0\u1d42\0\u041a\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u041a\0\u3926\0\u396c"+
    "\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56\0\u3b9c"+
    "\0\u3be2\0\u3c28\0\u3c6e\0\u041a\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6"+
    "\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\u1180\0\u422c\0\u4272\0\u42b8\0\u1180\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u44a2\0\u1180\0\u44e8\0\u452e\0\u4574"+
    "\0\u45ba\0\u4600\0\u4646\0\u1180\0\u468c\0\u041a\0\u041a\0\u46d2"+
    "\0\u4718\0\u475e\0\u47a4\0\u294a\0\u47ea\0\u4830\0\u4876\0\u48bc"+
    "\0\u4902\0\u4948\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u2d1e"+
    "\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6"+
    "\0\u4d1c\0\u4d62\0\u4da8\0\u4dee\0\u4e34\0\u4e7a\0\u4ec0\0\u4f06"+
    "\0\u1180\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u1180\0\u1180"+
    "\0\u50aa\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u1180\0\u041a"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668"+
    "\0\u56ae\0\u56f4\0\u573a\0\u5780\0\u57c6\0\u580c\0\u5852\0\u5898"+
    "\0\u58de\0\u5924\0\u596a\0\u4b32\0\u041a\0\u59b0\0\u59f6\0\u5a3c"+
    "\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c"+
    "\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c"+
    "\0\u5ee2\0\u5f28\0\u5f6e\0\u1180\0\u5fb4\0\u5ffa\0\u6040\0\u1180"+
    "\0\u6086\0\u60cc\0\u6112\0\u6158\0\u1180\0\u1180\0\u619e\0\u2878"+
    "\0\u61e4\0\u622a\0\u6270\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u63ce"+
    "\0\u6414\0\u645a\0\u64a0\0\u64e6\0\u652c\0\u6572\0\u65b8\0\u65fe"+
    "\0\u6644\0\u668a\0\u5924\0\u041a\0\u66d0\0\u6716\0\u675c\0\u67a2"+
    "\0\u1180\0\u67e8\0\u1180\0\u1180\0\u682e\0\u6874\0\u68ba\0\u1180"+
    "\0\u6900\0\u6946\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea"+
    "\0\u6b30\0\u6b76\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a"+
    "\0\u6d60\0\u6da6\0\u6dec\0\u6e32\0\u27a6\0\u041a\0\u6e78\0\u6ebe"+
    "\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee"+
    "\0\u7134\0\u717a\0\u71c0\0\u7206\0\u724c\0\u7292\0\u72d8\0\u731e"+
    "\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c\0\u74c2\0\u7508\0\u754e"+
    "\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2\0\u7738\0\u777e"+
    "\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u1180\0\u7922\0\u7968"+
    "\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u1180\0\u7ac6\0\u1180\0\u7b0c"+
    "\0\u7b52\0\u7b98\0\u7bde\0\u7c24\0\u7c6a\0\u7cb0\0\u7cf6\0\u041a"+
    "\0\u041a\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e\0\u7e54\0\u7e9a\0\u7ee0"+
    "\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\u80ca\0\u8110"+
    "\0\u74c2\0\u041a\0\u8156\0\u819c\0\u81e2\0\u8228\0\u826e\0\u82b4"+
    "\0\u82fa\0\u8340\0\u8386\0\u83cc\0\u8412\0\u8458\0\u849e\0\u84e4"+
    "\0\u852a\0\u8570\0\u85b6\0\u85fc\0\u8642\0\u8688\0\u86ce\0\u8714"+
    "\0\u875a\0\u041a\0\u87a0\0\u87e6\0\u882c\0\u8872\0\u88b8\0\u88fe"+
    "\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e"+
    "\0\u8b74\0\u8bba\0\u8c00\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e"+
    "\0\u8da4\0\u8dea\0\u8e30\0\u8e76\0\u8ebc\0\u8f02\0\u8f48\0\u8f8e"+
    "\0\u8fd4\0\u901a\0\u9060\0\u90a6\0\u90ec\0\u9132\0\u9178\0\u91be"+
    "\0\u1180\0\u1180\0\u9204\0\u924a\0\u9290\0\u92d6\0\u931c\0\u9362"+
    "\0\u93a8\0\u041a\0\u93ee\0\u9434\0\u947a\0\u94c0\0\u9506\0\u954c"+
    "\0\u9592\0\u95d8\0\u961e\0\u9664\0\u96aa\0\u96f0\0\u9736\0\u977c"+
    "\0\u97c2\0\u8d5e\0\u041a\0\u9808\0\u984e\0\u9894\0\u98da\0\u9920"+
    "\0\u9966\0\u99ac\0\u99f2\0\u9a38\0\u9a7e\0\u9ac4\0\u9b0a\0\u9b50"+
    "\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae\0\u9cf4\0\u9d3a\0\u9d80"+
    "\0\u9dc6\0\u9e0c\0\u9e52\0\u9e98\0\u9ede\0\u9f24\0\u9f6a\0\u9fb0"+
    "\0\u9ff6\0\ua03c\0\ua082\0\ua0c8\0\ua10e\0\ua154\0\ua19a\0\u97c2"+
    "\0\u041a\0\ua1e0\0\ua226\0\ua26c\0\ua2b2\0\ua2f8\0\ua33e\0\ua384"+
    "\0\ua3ca\0\ua410\0\ua456\0\ua49c\0\ua4e2\0\ua528\0\ua56e\0\u041a"+
    "\0\u041a\0\ua5b4\0\ua5fa\0\ua640\0\ua686\0\ua6cc\0\ua712\0\ua758"+
    "\0\ua79e\0\ua7e4\0\ua1e0\0\u041a\0\ua82a\0\ua870\0\u041a\0\ua8b6"+
    "\0\u1180\0\ua8fc\0\ua942\0\ua988\0\ua9ce\0\uaa14\0\uaa5a\0\uaaa0"+
    "\0\uaae6\0\uab2c\0\uab72\0\uabb8\0\uabfe\0\u041a\0\u1180\0\uac44"+
    "\0\uac8a\0\uacd0\0\uad16\0\uad5c\0\u041a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\17\2\20\1\21\7\17\1\20\5\17\1\22\54\17"+
    "\24\23\1\24\1\25\60\23\2\26\1\27\2\26\2\27"+
    "\1\26\1\30\1\31\1\32\1\31\1\26\1\33\2\26"+
    "\1\27\2\26\1\31\7\26\25\27\4\26\1\27\2\26"+
    "\3\27\10\26\1\27\5\26\1\34\2\26\2\34\1\26"+
    "\1\35\3\36\4\26\1\34\1\26\1\35\1\36\1\26"+
    "\1\37\3\26\1\40\1\26\25\34\4\26\1\34\1\41"+
    "\1\26\3\34\10\26\1\34\5\26\1\34\2\26\2\34"+
    "\1\26\1\42\3\36\4\26\1\34\1\26\1\42\1\36"+
    "\1\26\1\37\3\26\1\43\1\26\25\34\4\26\1\34"+
    "\1\41\1\26\3\34\10\26\1\34\13\26\4\44\6\26"+
    "\2\44\1\26\1\45\2\26\1\46\35\26\1\47\17\26"+
    "\4\50\1\51\3\50\1\52\1\53\1\54\1\53\1\55"+
    "\1\50\1\56\3\50\1\52\1\53\1\57\1\60\1\61"+
    "\3\50\1\62\33\50\1\63\4\50\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\2\50\25\75"+
    "\1\76\1\77\1\100\1\101\1\75\1\102\53\75\2\26"+
    "\1\34\2\26\2\34\1\26\4\103\1\26\1\104\2\26"+
    "\1\34\1\26\2\103\7\26\25\34\4\26\1\34\2\26"+
    "\3\34\1\105\7\26\1\34\3\26\4\106\1\107\4\106"+
    "\1\110\1\111\1\110\7\106\1\110\2\106\1\112\57\106"+
    "\4\50\1\51\3\50\3\113\1\114\2\50\1\115\1\116"+
    "\2\50\2\113\2\50\1\117\3\50\1\120\50\50\1\121"+
    "\1\50\1\122\11\123\2\124\1\125\7\123\1\124\5\123"+
    "\1\126\54\123\10\26\1\35\2\26\1\127\1\26\1\130"+
    "\4\26\1\35\5\26\1\131\65\26\4\132\6\26\2\132"+
    "\62\26\11\17\2\20\1\21\7\17\1\20\62\17\106\0"+
    "\11\17\2\20\1\21\7\17\1\20\5\17\1\133\54\17"+
    "\24\23\1\134\1\135\104\23\1\136\1\137\104\23\1\140"+
    "\1\141\60\23\1\0\3\27\1\0\3\27\10\0\4\27"+
    "\7\0\32\27\2\0\3\27\10\0\1\27\13\0\1\30"+
    "\4\0\1\33\103\0\1\31\102\0\1\33\76\0\3\34"+
    "\1\0\3\34\10\0\4\34\7\0\32\34\2\0\3\34"+
    "\10\0\1\34\13\0\1\35\11\0\1\35\74\0\3\36"+
    "\7\0\1\36\106\0\1\142\1\143\62\0\1\144\2\0"+
    "\1\144\1\145\11\0\1\144\11\0\1\146\1\147\1\150"+
    "\1\151\4\144\1\152\1\153\1\154\1\155\1\144\1\156"+
    "\1\157\1\160\1\144\1\161\1\144\1\162\1\163\1\144"+
    "\1\164\1\165\1\166\1\0\1\144\2\0\3\144\10\0"+
    "\1\144\13\0\1\41\11\0\1\41\73\0\1\42\11\0"+
    "\1\42\6\0\1\167\56\0\1\144\2\0\1\170\1\145"+
    "\11\0\1\144\10\0\1\171\1\146\1\147\1\150\1\151"+
    "\4\144\1\152\1\153\1\154\1\155\1\144\1\156\1\172"+
    "\1\160\1\144\1\161\1\144\1\162\1\163\1\144\1\164"+
    "\1\165\1\166\1\0\1\144\2\0\3\144\10\0\1\144"+
    "\13\0\4\44\6\0\2\44\1\0\1\173\2\0\1\46"+
    "\35\0\1\47\43\0\1\174\1\175\146\0\1\176\17\0"+
    "\3\177\1\200\1\177\1\201\1\202\1\203\3\177\1\0"+
    "\20\177\1\204\1\205\1\177\1\206\3\177\1\207\7\177"+
    "\1\210\4\177\1\200\1\177\1\203\1\200\22\177\10\0"+
    "\1\52\3\211\1\55\1\0\1\56\3\0\1\52\1\211"+
    "\1\57\1\60\1\61\3\0\1\212\40\0\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\12\0"+
    "\4\211\1\55\1\0\1\56\3\0\2\211\1\57\1\60"+
    "\1\61\3\0\1\212\40\0\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\12\0\3\211\1\53"+
    "\1\55\1\0\1\56\3\0\2\211\1\57\1\60\1\61"+
    "\3\0\1\212\40\0\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\106\0\1\213\25\0\1\214"+
    "\1\175\61\0\1\215\1\216\1\215\1\0\2\216\1\215"+
    "\1\217\7\0\1\216\1\0\1\217\10\0\25\216\4\215"+
    "\1\216\2\0\3\216\10\0\1\216\71\0\1\220\27\0"+
    "\1\221\1\222\1\223\1\222\6\0\1\221\1\222\62\0"+
    "\25\75\1\224\1\225\1\226\1\0\1\75\1\0\77\75"+
    "\1\227\1\230\60\75\4\225\1\231\4\225\3\0\7\225"+
    "\1\0\2\225\1\75\57\225\4\232\1\233\4\232\3\0"+
    "\7\232\1\0\3\232\1\0\56\232\10\0\4\103\6\0"+
    "\2\103\72\0\4\105\6\0\2\105\62\0\4\106\1\0"+
    "\4\106\3\0\7\106\1\0\2\106\1\0\57\106\3\234"+
    "\1\235\1\234\1\236\1\237\1\240\3\234\1\0\12\234"+
    "\1\241\5\234\1\242\1\243\1\234\1\244\3\234\1\245"+
    "\7\234\1\246\4\234\1\235\1\234\1\240\1\235\22\234"+
    "\13\0\1\110\102\0\4\247\2\0\1\250\3\0\2\247"+
    "\64\0\1\251\2\0\2\251\11\0\1\251\12\0\25\251"+
    "\4\0\1\251\2\0\3\251\10\0\1\251\22\0\1\252"+
    "\66\0\11\253\2\124\1\125\7\253\1\124\73\253\2\124"+
    "\1\125\7\253\1\124\4\253\1\254\2\253\1\255\6\253"+
    "\1\256\1\253\1\257\41\253\1\0\1\260\1\0\1\260"+
    "\3\0\1\260\1\261\11\0\1\261\35\0\4\260\32\0"+
    "\4\132\6\0\2\132\62\0\13\133\1\262\72\133\24\23"+
    "\1\134\1\0\104\23\1\0\1\135\60\23\11\143\2\263"+
    "\1\264\7\143\1\263\62\143\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\32\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\1\144"+
    "\1\265\30\144\2\0\3\144\10\0\1\144\3\0\11\146"+
    "\2\266\1\267\7\146\1\266\62\146\1\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\1\144\1\270\15\144\1\271"+
    "\4\144\1\272\5\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\5\144\1\273"+
    "\24\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\3\144\1\274\5\144\1\275"+
    "\2\144\1\276\15\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\1\277\2\144\10\0\4\144\7\0\5\144"+
    "\1\300\24\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\1\144\1\301\1\144\10\0\4\144\7\0\1\302"+
    "\31\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\11\144\1\303\20\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\1\304\31\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\20\144"+
    "\1\305\1\144\1\306\7\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\2\144"+
    "\1\307\3\144\1\310\7\144\1\311\13\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\1\144\1\312\1\144"+
    "\10\0\4\144\7\0\3\144\1\313\1\144\1\314\4\144"+
    "\1\315\1\144\1\316\15\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\1\144\1\317\1\144\10\0\4\144"+
    "\7\0\11\144\1\320\20\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\1\144\1\321\1\144\10\0\4\144"+
    "\7\0\14\144\1\322\15\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\7\144"+
    "\1\323\22\144\2\0\3\144\10\0\1\144\56\0\1\324"+
    "\105\0\1\325\115\0\1\326\23\0\3\144\1\0\3\144"+
    "\1\327\7\0\2\144\1\330\1\144\7\0\15\144\1\331"+
    "\14\144\2\0\3\144\10\0\1\144\3\0\11\171\3\0"+
    "\7\171\1\0\62\171\1\0\3\144\1\0\3\144\1\332"+
    "\7\0\2\144\1\333\1\144\7\0\2\144\1\334\3\144"+
    "\1\310\7\144\1\311\13\144\2\0\3\144\10\0\1\144"+
    "\3\0\11\175\3\0\7\175\1\0\62\175\67\0\1\335"+
    "\21\0\1\336\3\0\1\336\50\0\1\336\1\0\2\336"+
    "\23\0\3\337\3\0\1\337\32\0\2\337\3\0\1\337"+
    "\1\0\1\337\1\0\1\337\2\0\1\337\1\0\4\337"+
    "\3\0\1\337\1\0\1\337\15\0\3\340\3\0\1\340"+
    "\32\0\2\340\3\0\1\340\1\0\1\340\1\0\1\340"+
    "\2\0\1\340\1\0\4\340\3\0\1\340\1\0\1\340"+
    "\17\0\1\200\3\0\1\200\50\0\1\200\1\0\2\200"+
    "\30\0\1\341\36\0\1\342\6\0\1\343\1\0\1\344"+
    "\30\0\1\215\1\0\1\215\3\0\1\215\50\0\4\215"+
    "\23\0\3\216\1\0\3\216\1\345\7\0\4\216\4\0"+
    "\1\346\2\0\32\216\2\0\3\216\10\0\1\216\72\0"+
    "\1\347\31\0\1\222\72\0\24\227\1\350\61\227\11\230"+
    "\2\351\1\75\7\230\1\351\62\230\11\225\3\0\7\225"+
    "\1\0\62\225\27\0\1\75\56\0\3\232\1\352\1\353"+
    "\1\232\1\354\1\355\1\232\3\0\7\232\1\0\34\232"+
    "\1\352\1\232\1\355\1\352\22\232\3\0\1\356\3\0"+
    "\1\356\50\0\1\356\1\0\2\356\23\0\3\357\3\0"+
    "\1\357\32\0\2\357\3\0\1\357\1\0\1\357\1\0"+
    "\1\357\2\0\1\357\1\0\4\357\3\0\1\357\1\0"+
    "\1\357\15\0\3\360\3\0\1\360\32\0\2\360\3\0"+
    "\1\360\1\0\1\360\1\0\1\360\2\0\1\360\1\0"+
    "\4\360\3\0\1\360\1\0\1\360\17\0\1\235\3\0"+
    "\1\235\50\0\1\235\1\0\2\235\23\0\3\251\1\0"+
    "\3\251\10\0\4\251\4\0\1\361\2\0\32\251\2\0"+
    "\3\251\10\0\1\251\3\0\11\254\2\362\1\363\7\254"+
    "\1\362\62\254\11\253\2\124\1\125\7\253\1\124\10\253"+
    "\1\364\62\253\2\124\1\125\7\253\1\124\14\253\1\365"+
    "\56\253\2\124\1\125\7\253\1\124\20\253\1\366\41\253"+
    "\1\0\1\260\1\0\1\260\3\0\1\260\50\0\4\260"+
    "\23\0\3\144\1\0\3\144\10\0\4\144\7\0\1\367"+
    "\31\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\1\370\1\144\1\371\13\144"+
    "\1\372\13\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\22\144\1\373\7\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\1\144\1\374\30\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\2\144\1\375\27\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\4\144"+
    "\1\376\25\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\22\144\1\377\7\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\20\144\1\u0100\11\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\2\144\1\u0101\27\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\10\144"+
    "\1\u0102\21\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\1\144\1\u0103\10\144"+
    "\1\u0104\17\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\1\144\1\u0105\30\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u0106\2\144\1\u0107\17\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\1\144\1\u0108\30\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\15\144\1\u0109\14\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\1\u010a"+
    "\31\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\14\144\1\u010b\15\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\1\u010c\31\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\14\144"+
    "\1\u010d\15\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\22\144\1\u010e\7\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\14\144\1\u010f\15\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\12\144\1\u0110\17\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\14\144"+
    "\1\u0111\15\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\15\144\1\u0112\14\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\10\144\1\u0113\21\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\14\144\1\u0114\15\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\20\144"+
    "\1\u0115\11\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\16\144\1\u0116\13\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\20\144\1\u0117\11\144\2\0\3\144"+
    "\10\0\1\144\36\0\1\u0118\105\0\1\u0119\125\0\1\u011a"+
    "\42\0\1\327\11\0\1\327\64\0\3\144\1\0\3\144"+
    "\1\327\7\0\2\144\1\330\1\144\7\0\32\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\2\144\1\u011b\27\144\2\0\3\144\10\0"+
    "\1\144\13\0\1\332\11\0\1\332\64\0\3\144\1\0"+
    "\3\144\1\332\7\0\2\144\1\333\1\144\7\0\32\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\14\144\1\u011c\15\144\2\0\3\144"+
    "\10\0\1\144\73\0\1\u011d\16\0\3\u011e\3\0\1\u011e"+
    "\32\0\2\u011e\3\0\1\u011e\1\0\1\u011e\1\0\1\u011e"+
    "\2\0\1\u011e\1\0\4\u011e\3\0\1\u011e\1\0\1\u011e"+
    "\15\0\3\u011f\3\0\1\u011f\32\0\2\u011f\3\0\1\u011f"+
    "\1\0\1\u011f\1\0\1\u011f\2\0\1\u011f\1\0\4\u011f"+
    "\3\0\1\u011f\1\0\1\u011f\71\0\1\u0120\70\0\1\u0121"+
    "\1\0\1\u0122\110\0\1\u0123\73\0\1\u0124\62\0\1\345"+
    "\11\0\1\345\5\0\1\346\145\0\1\u0125\15\0\24\227"+
    "\1\350\1\75\60\227\13\351\1\75\11\351\1\u0126\1\u0127"+
    "\1\u0128\1\230\1\351\1\230\53\351\3\0\1\232\3\0"+
    "\1\232\17\0\1\75\30\0\1\232\1\0\2\232\26\0"+
    "\1\u0129\1\0\1\u012a\20\0\1\75\57\0\3\u012b\3\0"+
    "\1\u012b\17\0\1\75\12\0\2\u012b\3\0\1\u012b\1\0"+
    "\1\u012b\1\0\1\u012b\2\0\1\u012b\1\0\4\u012b\3\0"+
    "\1\u012b\1\0\1\u012b\17\0\1\352\3\0\1\352\17\0"+
    "\1\75\30\0\1\352\1\0\2\352\23\0\3\u012c\3\0"+
    "\1\u012c\32\0\2\u012c\3\0\1\u012c\1\0\1\u012c\1\0"+
    "\1\u012c\2\0\1\u012c\1\0\4\u012c\3\0\1\u012c\1\0"+
    "\1\u012c\15\0\3\u012d\3\0\1\u012d\32\0\2\u012d\3\0"+
    "\1\u012d\1\0\1\u012d\1\0\1\u012d\2\0\1\u012d\1\0"+
    "\4\u012d\3\0\1\u012d\1\0\1\u012d\14\0\11\253\2\124"+
    "\1\125\7\253\1\124\7\253\1\u012e\63\253\2\124\1\125"+
    "\7\253\1\124\17\253\1\u012f\53\253\2\124\1\125\7\253"+
    "\1\124\21\253\1\u0130\40\253\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\16\144\1\u0131\13\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\2\144\1\u0132\27\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\6\144"+
    "\1\u0133\1\u0134\22\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\12\144\1\u0135"+
    "\17\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\12\144\1\u0136\17\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\5\144\1\u0137\24\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\1\144\1\u0138\1\144\10\0"+
    "\4\144\7\0\32\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\5\144\1\u0139"+
    "\24\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\7\144\1\u013a\22\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\12\144\1\u013b\17\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\7\144\1\u013c\22\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\6\0\1\146\2\144"+
    "\1\u013d\10\144\1\u013e\2\144\1\u013f\13\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\16\144\1\u0140\13\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\12\144"+
    "\1\u0141\17\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\14\144\1\u0142\15\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\5\144\1\u0143\24\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\7\144\1\u0144\22\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\7\144"+
    "\1\u0145\22\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\2\144\1\u0146\27\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\22\144\1\u0147\7\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\1\144\1\u0148\30\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\2\144"+
    "\1\u0149\27\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\1\144\1\u014a\30\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\15\144\1\u014b\5\144\1\u014c\6\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\4\144\1\u014d\25\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\1\144\1\u014e\1\144"+
    "\10\0\4\144\7\0\32\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\15\144"+
    "\1\u014f\14\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\7\144\1\u0150\22\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\10\144\1\u0151\21\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\16\144\1\u0152\13\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\12\144"+
    "\1\u0153\17\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\31\144\1\u0154\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\1\144\1\u0155"+
    "\1\144\10\0\4\144\7\0\32\144\2\0\3\144\10\0"+
    "\1\144\40\0\1\u0156\105\0\1\u0157\103\0\1\u0158\53\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\14\144\1\u0159"+
    "\15\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\1\144\1\u0148\1\u015a\27\144"+
    "\2\0\3\144\10\0\1\144\74\0\1\u015b\15\0\3\u015c"+
    "\3\0\1\u015c\32\0\2\u015c\3\0\1\u015c\1\0\1\u015c"+
    "\1\0\1\u015c\2\0\1\u015c\1\0\4\u015c\3\0\1\u015c"+
    "\1\0\1\u015c\71\0\1\u015d\71\0\1\u015e\101\0\1\u015f"+
    "\112\0\1\u0160\122\0\1\u0161\117\0\1\u0162\14\0\13\351"+
    "\1\75\10\351\1\u0163\1\230\60\351\4\u0127\1\u0164\4\u0127"+
    "\2\351\1\75\7\u0127\1\351\2\u0127\1\351\57\u0127\4\u0165"+
    "\1\u0166\4\u0165\2\351\1\75\7\u0165\1\351\3\u0165\1\230"+
    "\56\u0165\4\0\1\u0129\1\0\1\u012a\100\0\3\u012b\3\0"+
    "\1\u012b\32\0\2\u012b\3\0\1\u012b\1\0\1\u012b\1\0"+
    "\1\u012b\2\0\1\u012b\1\0\4\u012b\3\0\1\u012b\1\0"+
    "\1\u012b\15\0\3\u0167\3\0\1\u0167\32\0\2\u0167\3\0"+
    "\1\u0167\1\0\1\u0167\1\0\1\u0167\2\0\1\u0167\1\0"+
    "\4\u0167\3\0\1\u0167\1\0\1\u0167\15\0\3\u0168\3\0"+
    "\1\u0168\32\0\2\u0168\3\0\1\u0168\1\0\1\u0168\1\0"+
    "\1\u0168\2\0\1\u0168\1\0\4\u0168\3\0\1\u0168\1\0"+
    "\1\u0168\14\0\11\253\2\124\1\125\7\253\1\124\11\253"+
    "\1\u0169\61\253\2\124\1\125\7\253\1\124\4\253\1\u016a"+
    "\4\253\1\u016b\10\253\1\u016c\50\253\2\124\1\125\7\253"+
    "\1\124\16\253\1\u016d\43\253\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\5\144\1\u016e\24\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\6\0\1\146\2\144\1\u016f\27\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\4\144\1\u0170\25\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\24\144\1\u0171"+
    "\5\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\1\144\1\u0172\1\144\10\0\4\144\7\0\32\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\7\144\1\u0173\22\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\4\144\1\u0174\25\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\1\144\1\u0175"+
    "\30\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\6\144\1\u0176\23\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\1\u0177"+
    "\7\0\2\144\1\u0178\1\144\7\0\32\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\7\144\1\u0179\22\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\1\144"+
    "\1\u017a\30\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\3\144\1\u017b\26\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\14\144\1\u017c\15\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\12\144\1\u017d\17\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\2\144"+
    "\1\u017e\27\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\12\144\1\u017f\17\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\10\144\1\u0180\21\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\1\u0181\2\144\10\0"+
    "\4\144\7\0\32\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\4\144\1\u0182"+
    "\25\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\4\144\1\u0183\25\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\23\144\1\u0184\6\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\16\144\1\u0185\13\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\7\144\1\u0186"+
    "\22\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\11\144\1\u0187\20\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\7\144\1\u0188\22\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\17\144\1\u0189\12\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\15\144\1\u018a"+
    "\14\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\12\144\1\u018b\17\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\7\144\1\u018c\22\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\16\144\1\u018d\13\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\1\u018e\31\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\24\144\1\u018f\5\144\2\0\3\144"+
    "\10\0\1\144\40\0\1\u0190\51\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\2\144\1\u0191\27\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\7\144\1\u0192\22\144\2\0\3\144\10\0\1\144"+
    "\75\0\1\u0193\55\0\1\u0194\105\0\1\u0195\100\0\1\u0196"+
    "\105\0\1\u0197\103\0\1\u0198\144\0\1\u0199\13\0\11\u0163"+
    "\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\61\u0163\11\u0127\2\351"+
    "\1\75\7\u0127\1\351\62\u0127\11\230\2\351\1\75\7\230"+
    "\1\351\3\230\1\351\56\230\3\u0165\1\u019d\1\u019e\1\u0165"+
    "\1\u019f\1\u01a0\1\u0165\2\351\1\75\7\u0165\1\351\34\u0165"+
    "\1\u019d\1\u0165\1\u01a0\1\u019d\22\u0165\1\0\3\u01a1\3\0"+
    "\1\u01a1\32\0\2\u01a1\3\0\1\u01a1\1\0\1\u01a1\1\0"+
    "\1\u01a1\2\0\1\u01a1\1\0\4\u01a1\3\0\1\u01a1\1\0"+
    "\1\u01a1\14\0\11\253\2\124\1\125\7\253\1\124\4\253"+
    "\1\u01a2\4\253\1\u01a3\50\253\11\u016a\2\u01a4\1\u01a5\7\u016a"+
    "\1\u01a4\62\u016a\11\253\2\124\1\125\7\253\1\124\12\253"+
    "\1\u01a6\60\253\2\124\1\125\7\253\1\124\23\253\1\u01a7"+
    "\43\253\1\u01a8\3\253\2\124\1\125\7\253\1\124\62\253"+
    "\1\0\3\144\1\0\3\144\10\0\4\144\7\0\23\144"+
    "\1\u01a9\6\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\3\144\1\u01aa\26\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\14\144\1\u01ab\15\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\7\144\1\u01ac\22\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\23\144"+
    "\1\u01ad\6\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\17\144\1\u01ae\12\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u01af\22\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\1\u01b0\31\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\15\144\1\u01b1"+
    "\14\144\2\0\3\144\10\0\1\144\5\0\1\u01b2\2\0"+
    "\2\u01b2\1\0\1\u0177\7\0\1\u01b2\1\0\1\u0177\10\0"+
    "\25\u01b2\4\0\1\u01b2\2\0\3\u01b2\10\0\1\u01b2\4\0"+
    "\1\144\1\u01b2\1\144\1\0\2\u01b2\1\144\1\u0177\7\0"+
    "\1\u01b2\1\144\1\u0178\1\144\7\0\25\u01b2\4\144\1\u01b2"+
    "\2\0\3\u01b2\10\0\1\u01b2\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\23\144\1\u01b3\6\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\4\144\1\u01b4\25\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\12\144"+
    "\1\u01b5\17\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\5\144\1\u01b6\24\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\1\u01b7\31\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\2\144\1\u01b8\27\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\14\144\1\u01b9"+
    "\15\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\1\u01ba\31\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\14\144\1\u01bb\15\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\3\144"+
    "\1\u01bc\26\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\4\144\1\u01bd\25\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\17\144\1\u01be\12\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\20\144\1\u01bf\11\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\1\144"+
    "\1\u01c0\30\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\1\u01c1\7\0\2\144\1\u01c2\1\144\7\0"+
    "\32\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\7\144\1\u01c3\22\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\4\144\1\u01c4\25\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\21\144\1\u01c5\10\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\16\144\1\u01c6"+
    "\13\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\7\144\1\u01c7\22\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\1\332"+
    "\7\0\2\144\1\333\1\144\7\0\15\144\1\u01c8\14\144"+
    "\2\0\3\144\10\0\1\144\75\0\1\u01c9\52\0\1\u01ca"+
    "\105\0\1\u01cb\110\0\1\u01cc\100\0\1\u01cd\105\0\1\u01ce"+
    "\142\0\1\u01cf\13\0\13\u019a\1\u019b\10\u019a\1\u01d0\1\u01d1"+
    "\1\u01d2\1\u01d3\1\u0163\1\u019a\1\u0163\53\u019a\24\u019b\1\u01d4"+
    "\1\u01d5\1\u01d6\1\u01d7\1\227\1\u019b\1\227\53\u019b\11\u0163"+
    "\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\1\351\60\u0163\3\230"+
    "\1\u0165\3\230\1\u0165\1\230\2\351\1\75\7\230\1\351"+
    "\3\230\1\351\30\230\1\u0165\1\230\2\u0165\26\230\1\u01d8"+
    "\1\230\1\u01d9\2\230\2\351\1\75\7\230\1\351\3\230"+
    "\1\351\57\230\3\u01da\3\230\1\u01da\1\230\2\351\1\75"+
    "\7\230\1\351\3\230\1\351\12\230\2\u01da\3\230\1\u01da"+
    "\1\230\1\u01da\1\230\1\u01da\2\230\1\u01da\1\230\4\u01da"+
    "\3\230\1\u01da\1\230\1\u01da\17\230\1\u019d\3\230\1\u019d"+
    "\1\230\2\351\1\75\7\230\1\351\3\230\1\351\30\230"+
    "\1\u019d\1\230\2\u019d\22\230\1\0\3\232\3\0\1\232"+
    "\32\0\2\232\3\0\1\232\1\0\1\232\1\0\1\232"+
    "\2\0\1\232\1\0\4\232\3\0\1\232\1\0\1\232"+
    "\14\0\11\u01a2\2\u01db\1\u01dc\7\u01a2\1\u01db\62\u01a2\11\253"+
    "\2\124\1\125\7\253\1\124\12\253\1\u01dd\60\253\2\124"+
    "\1\125\7\253\1\124\13\253\1\u01de\57\253\2\124\1\125"+
    "\7\253\1\124\21\253\1\u01df\51\253\2\124\1\125\7\253"+
    "\1\124\11\253\1\u01e0\50\253\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u01e1\22\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\4\144\1\u01e2\25\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\22\144"+
    "\1\u01e3\7\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\4\144\1\u01e4\25\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u01e5\22\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\7\144\1\u01e6\22\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\16\144"+
    "\1\u01e7\13\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\1\u01e8\2\144\10\0\4\144\7\0\32\144\2\0"+
    "\3\144\10\0\1\144\4\0\3\144\1\0\3\144\1\u01e9"+
    "\7\0\2\144\1\u01ea\1\144\7\0\32\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\u01b2\1\0\3\u01b2\1\u01eb\3\0"+
    "\1\u0177\1\0\1\u01ec\1\0\4\u01b2\7\0\32\u01b2\2\0"+
    "\3\u01b2\10\0\1\u01b2\4\0\3\144\1\0\3\144\10\0"+
    "\4\144\7\0\15\144\1\u01ed\14\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\5\144\1\u01ee\24\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\6\0\1\146\32\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\15\144\1\u01ef\14\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\5\144\1\u01f0\24\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\3\144"+
    "\1\u01f1\26\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\16\144\1\u01f2\13\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\13\144\1\u01f3\16\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\12\144\1\u01f4\17\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\4\144"+
    "\1\u01f5\25\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\1\u01f6\7\0\2\144\1\u01f7\1\144\7\0"+
    "\32\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\1\144\1\u01f8\1\144\10\0\4\144\7\0\32\144\2\0"+
    "\3\144\10\0\1\144\5\0\1\u01f9\2\0\2\u01f9\1\0"+
    "\1\u01c1\7\0\1\u01f9\1\0\1\u01c1\10\0\25\u01f9\4\0"+
    "\1\u01f9\2\0\3\u01f9\10\0\1\u01f9\4\0\1\144\1\u01f9"+
    "\1\144\1\0\2\u01f9\1\144\1\u01c1\7\0\1\u01f9\1\144"+
    "\1\u01c2\1\144\7\0\25\u01f9\4\144\1\u01f9\2\0\3\u01f9"+
    "\10\0\1\u01f9\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\15\144\1\u01fa\14\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\1\u01fb\7\0\2\144\1\u01fc"+
    "\1\144\7\0\32\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\1\327\7\0\2\144\1\330\1\144"+
    "\7\0\15\144\1\u01fd\14\144\2\0\3\144\10\0\1\144"+
    "\13\0\4\u01c9\6\0\2\u01c9\6\0\1\u01fe\124\0\1\u01ff"+
    "\105\0\1\u0200\73\0\1\u0201\110\0\1\u0202\147\0\1\u0203"+
    "\11\0\4\u0204\6\0\2\u0204\62\0\13\u019a\1\u019b\10\u019a"+
    "\1\u01d0\1\u0205\1\u01d2\1\u01d3\1\u0163\1\u019a\1\u0163\66\u019a"+
    "\1\u019b\10\u019a\1\u0206\1\u0163\60\u019a\4\u01d2\1\u0207\4\u01d2"+
    "\2\u019a\1\u019b\7\u01d2\1\u019a\1\u0208\1\u01d2\1\u019a\57\u01d2"+
    "\4\u0209\1\u020a\4\u0209\2\u019a\1\u019b\7\u0209\1\u019a\1\u020b"+
    "\2\u0209\1\u0163\56\u0209\24\u019b\1\u01d4\1\u020c\1\u01d6\1\u01d7"+
    "\1\227\1\u019b\1\227\77\u019b\1\u020d\1\u0163\60\u019b\4\u01d6"+
    "\1\u020e\4\u01d6\3\227\7\u01d6\1\227\1\u020f\1\u01d6\1\u019b"+
    "\57\u01d6\4\u0210\1\u0211\4\u0210\3\227\7\u0210\1\227\1\u0212"+
    "\2\u0210\1\227\56\u0210\4\230\1\u01d8\1\230\1\u01d9\2\230"+
    "\2\351\1\75\7\230\1\351\63\230\3\u01da\3\230\1\u01da"+
    "\1\230\2\351\1\75\7\230\1\351\16\230\2\u01da\3\230"+
    "\1\u01da\1\230\1\u01da\1\230\1\u01da\2\230\1\u01da\1\230"+
    "\4\u01da\3\230\1\u01da\1\230\1\u01da\15\230\3\u0213\3\230"+
    "\1\u0213\1\230\2\351\1\75\7\230\1\351\16\230\2\u0213"+
    "\3\230\1\u0213\1\230\1\u0213\1\230\1\u0213\2\230\1\u0213"+
    "\1\230\4\u0213\3\230\1\u0213\1\230\1\u0213\14\230\11\253"+
    "\2\124\1\125\7\253\1\124\13\253\1\u0214\57\253\2\124"+
    "\1\125\7\253\1\124\14\253\1\u0215\56\253\2\124\1\125"+
    "\7\253\1\124\4\253\1\u0216\66\253\2\124\1\125\7\253"+
    "\1\124\12\253\1\u0217\47\253\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\5\144\1\u0218\24\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\1\u0219\7\0"+
    "\2\144\1\u0219\1\144\7\0\32\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\10\0\4\144\7\0"+
    "\1\144\1\u021a\30\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\14\144\1\u021b"+
    "\15\144\2\0\3\144\10\0\1\144\3\0\2\u021c\1\u021d"+
    "\2\u021c\2\u021d\1\u021c\1\u01e9\3\0\4\u021c\1\u021d\1\u021c"+
    "\1\u01e9\1\0\7\u021c\25\u021d\4\u021c\1\u021d\2\u021c\3\u021d"+
    "\10\u021c\1\u021d\4\u021c\1\u021e\1\u021d\1\u021e\1\u021c\2\u021d"+
    "\1\u021e\1\u01e9\3\0\4\u021c\1\u021d\1\u021e\1\u01ea\1\144"+
    "\7\u021c\25\u021d\4\u021e\1\u021d\2\u021c\3\u021d\10\u021c\1\u021d"+
    "\3\u021c\10\0\1\u01eb\3\0\1\u0177\1\0\1\u01ec\3\0"+
    "\1\u01eb\73\0\1\u01ec\6\0\1\u021f\2\0\1\u01ec\64\0"+
    "\3\144\1\0\3\144\1\u0220\7\0\2\144\1\u0221\1\144"+
    "\7\0\32\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\6\144\1\u0222\23\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u0223\22\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\1\144\1\u0224\30\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\4\144"+
    "\1\u0225\25\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\2\144\1\u0226\27\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\14\144\1\u0227\15\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\5\144\1\u0228\24\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\5\144"+
    "\1\u0229\24\144\2\0\3\144\10\0\1\144\3\0\2\u022a"+
    "\1\u022b\2\u022a\2\u022b\1\u022a\1\u01f6\3\0\4\u022a\1\u022b"+
    "\1\u022a\1\u01f6\1\0\7\u022a\25\u022b\4\u022a\1\u022b\2\u022a"+
    "\3\u022b\10\u022a\1\u022b\4\u022a\1\u022c\1\u022b\1\u022c\1\u022a"+
    "\2\u022b\1\u022c\1\u01f6\3\0\4\u022a\1\u022b\1\u022c\1\u01f7"+
    "\1\144\7\u022a\25\u022b\4\u022c\1\u022b\2\u022a\3\u022b\10\u022a"+
    "\1\u022b\3\u022a\1\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\24\144\1\u022d\5\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\u01f9\1\0\3\u01f9\1\u022e\7\0\4\u01f9\7\0"+
    "\32\u01f9\2\0\3\u01f9\10\0\1\u01f9\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\15\144\1\u022f\14\144\2\0"+
    "\3\144\10\0\1\144\3\0\1\u0230\1\u0231\1\u0230\1\u0231"+
    "\3\u0230\1\u0231\1\u01fb\3\0\6\u0230\1\u01fb\1\0\34\u0230"+
    "\4\u0231\23\u0230\1\u0232\1\u0233\1\u0232\1\u0230\2\u0233\1\u0232"+
    "\1\u01fb\3\0\4\u0230\2\u0233\1\u01fc\1\144\7\u0230\25\u0233"+
    "\4\u0232\1\u0233\2\u0230\3\u0233\10\u0230\1\u0233\3\u0230\47\0"+
    "\1\u0234\105\0\1\u0235\142\0\1\u0236\40\0\1\u0237\65\0"+
    "\1\u0238\76\0\4\u0204\6\0\2\u0204\6\0\1\u0239\53\0"+
    "\13\351\1\75\10\351\1\u019a\1\u0126\1\u023a\1\u023b\56\351"+
    "\11\u0163\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\1\u019a\60\u0163"+
    "\11\u01d2\2\u019a\1\u019b\7\u01d2\1\u019a\1\u0208\65\u01d2\1\u0207"+
    "\4\u01d2\2\u019a\1\u019b\7\u01d2\1\u019a\1\u0208\1\u023a\1\u019a"+
    "\57\u01d2\11\u0163\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\2\u0163"+
    "\1\u019a\56\u0163\3\u0209\1\u023c\1\u023d\1\u0209\1\u023e\1\u023f"+
    "\1\u0209\2\u019a\1\u019b\7\u0209\1\u019a\1\u020b\33\u0209\1\u023c"+
    "\1\u0209\1\u023f\1\u023c\22\u0209\11\u0163\2\u019a\1\u019b\7\u0163"+
    "\1\u019a\1\u019c\1\351\1\u0163\1\u019a\56\u0163\24\75\1\u019b"+
    "\1\u0126\1\u0240\1\u0241\56\75\24\227\1\350\1\u019b\60\227"+
    "\11\u01d6\3\227\7\u01d6\1\227\1\u020f\65\u01d6\1\u020e\4\u01d6"+
    "\3\227\7\u01d6\1\227\1\u020f\1\u0240\1\u019b\57\u01d6\24\227"+
    "\1\350\2\227\1\u019b\56\227\3\u0210\1\u0242\1\u0243\1\u0210"+
    "\1\u0244\1\u0245\1\u0210\3\227\7\u0210\1\227\1\u0212\33\u0210"+
    "\1\u0242\1\u0210\1\u0245\1\u0242\22\u0210\24\227\1\350\1\75"+
    "\1\227\1\u019b\56\227\1\230\3\u0246\3\230\1\u0246\1\230"+
    "\2\351\1\75\7\230\1\351\16\230\2\u0246\3\230\1\u0246"+
    "\1\230\1\u0246\1\230\1\u0246\2\230\1\u0246\1\230\4\u0246"+
    "\3\230\1\u0246\1\230\1\u0246\14\230\11\253\2\124\1\125"+
    "\7\253\1\124\14\253\1\u0247\56\253\2\124\1\125\7\253"+
    "\1\124\15\253\1\u0248\44\253\11\u0216\2\u0249\1\u024a\7\u0216"+
    "\1\u0249\62\u0216\11\253\2\124\1\125\7\253\1\124\13\253"+
    "\1\u024b\46\253\1\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\6\144\1\u024c\23\144\2\0\3\144\10\0\1\144"+
    "\3\0\13\u0219\1\0\72\u0219\1\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\2\144\1\u024d\27\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\15\144\1\u024e\14\144\2\0\3\144\10\0\1\144"+
    "\3\0\11\u021c\3\0\7\u021c\1\0\63\u021c\3\u021d\1\u021c"+
    "\3\u021d\1\u024f\3\0\2\u01e9\2\u021c\3\u021d\1\u0250\7\u021c"+
    "\32\u021d\2\u021c\3\u021d\10\u021c\1\u021d\4\u021c\3\u021e\1\u021c"+
    "\3\u021e\1\u021c\3\0\4\u021c\3\u021e\1\144\7\u021c\32\u021e"+
    "\2\u021c\3\u021e\10\u021c\1\u021e\3\u021c\10\0\1\u021f\5\0"+
    "\1\u01ec\3\0\1\u021f\65\0\1\u0251\2\0\2\u0251\1\0"+
    "\1\u0220\7\0\1\u0251\1\0\1\u0220\10\0\25\u0251\4\0"+
    "\1\u0251\2\0\3\u0251\10\0\1\u0251\4\0\1\144\1\u0251"+
    "\1\144\1\0\2\u0251\1\144\1\u0220\7\0\1\u0251\1\144"+
    "\1\u0221\1\144\7\0\25\u0251\4\144\1\u0251\2\0\3\u0251"+
    "\10\0\1\u0251\4\0\3\144\1\0\3\144\1\u0252\7\0"+
    "\2\144\1\u0253\1\144\6\0\1\146\32\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\1\u0254\7\0"+
    "\2\144\1\u0255\1\144\7\0\32\144\2\0\3\144\10\0"+
    "\1\144\4\0\3\144\1\0\3\144\1\u0256\7\0\2\144"+
    "\1\u0257\1\144\7\0\32\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\5\144"+
    "\1\u0258\24\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\2\144\1\u0259\27\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\1\144\1\u025a\30\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\4\144\1\u025b\25\144\2\0\3\144\10\0\1\144"+
    "\3\0\11\u022a\3\0\7\u022a\1\0\63\u022a\3\u022b\1\u022a"+
    "\3\u022b\1\u025c\3\0\1\u01f6\3\u022a\3\u022b\1\u025d\7\u022a"+
    "\32\u022b\2\u022a\3\u022b\10\u022a\1\u022b\4\u022a\3\u022c\1\u022a"+
    "\3\u022c\1\u022a\3\0\4\u022a\3\u022c\1\144\7\u022a\32\u022c"+
    "\2\u022a\3\u022c\10\u022a\1\u022c\3\u022a\10\0\1\u022e\11\0"+
    "\1\u022e\63\0\11\u0230\3\0\7\u0230\1\0\63\u0230\1\u0231"+
    "\1\u0230\1\u0231\3\u0230\1\u0231\1\u025e\3\0\6\u0230\1\u025e"+
    "\1\0\34\u0230\4\u0231\23\u0230\1\u0232\1\u0233\1\u0232\1\u0230"+
    "\2\u0233\1\u0232\1\u025e\3\0\4\u0230\2\u0233\1\u025f\1\144"+
    "\7\u0230\25\u0233\4\u0232\1\u0233\2\u0230\3\u0233\10\u0230\1\u0233"+
    "\4\u0230\3\u0233\1\u0230\3\u0233\1\u0230\3\0\4\u0230\3\u0233"+
    "\1\144\7\u0230\32\u0233\2\u0230\3\u0233\10\u0230\1\u0233\3\u0230"+
    "\50\0\1\u0260\105\0\1\u0261\54\0\1\u0262\144\0\1\u0263"+
    "\25\0\1\u0264\1\0\4\u023a\1\u0265\4\u023a\2\351\1\75"+
    "\7\u023a\1\351\1\u023a\1\u0266\1\u023a\1\u0267\1\u0127\1\u023a"+
    "\1\u0127\53\u023a\4\u0268\1\u0269\4\u0268\2\351\1\75\7\u0268"+
    "\1\351\1\u0268\1\u0126\1\u026a\1\u0128\1\u0165\1\u0268\1\u0165"+
    "\53\u0268\3\u0163\1\u0209\3\u0163\1\u0209\1\u0163\2\u019a\1\u019b"+
    "\7\u0163\1\u019a\1\u019c\2\u0163\1\u019a\30\u0163\1\u0209\1\u0163"+
    "\2\u0209\26\u0163\1\u026b\1\u0163\1\u026c\2\u0163\2\u019a\1\u019b"+
    "\7\u0163\1\u019a\1\u019c\2\u0163\1\u019a\57\u0163\3\u026d\3\u0163"+
    "\1\u026d\1\u0163\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\2\u0163"+
    "\1\u019a\12\u0163\2\u026d\3\u0163\1\u026d\1\u0163\1\u026d\1\u0163"+
    "\1\u026d\2\u0163\1\u026d\1\u0163\4\u026d\3\u0163\1\u026d\1\u0163"+
    "\1\u026d\17\u0163\1\u023c\3\u0163\1\u023c\1\u0163\2\u019a\1\u019b"+
    "\7\u0163\1\u019a\1\u019c\2\u0163\1\u019a\30\u0163\1\u023c\1\u0163"+
    "\2\u023c\22\u0163\4\u0240\1\u026e\4\u0240\3\75\7\u0240\1\75"+
    "\1\u0240\1\u026f\1\u0240\1\u0270\1\225\1\u0240\1\225\53\u0240"+
    "\4\u0271\1\u0272\4\u0271\3\75\7\u0271\1\75\1\u0271\1\224"+
    "\1\u0273\1\226\1\232\1\u0271\1\232\53\u0271\3\227\1\u0210"+
    "\3\227\1\u0210\14\227\1\350\2\227\1\u019b\30\227\1\u0210"+
    "\1\227\2\u0210\26\227\1\u0274\1\227\1\u0275\15\227\1\350"+
    "\2\227\1\u019b\57\227\3\u0276\3\227\1\u0276\14\227\1\350"+
    "\2\227\1\u019b\12\227\2\u0276\3\227\1\u0276\1\227\1\u0276"+
    "\1\227\1\u0276\2\227\1\u0276\1\227\4\u0276\3\227\1\u0276"+
    "\1\227\1\u0276\17\227\1\u0242\3\227\1\u0242\14\227\1\350"+
    "\2\227\1\u019b\30\227\1\u0242\1\227\2\u0242\22\227\1\230"+
    "\3\u0165\3\230\1\u0165\1\230\2\351\1\75\7\230\1\351"+
    "\16\230\2\u0165\3\230\1\u0165\1\230\1\u0165\1\230\1\u0165"+
    "\2\230\1\u0165\1\230\4\u0165\3\230\1\u0165\1\230\1\u0165"+
    "\14\230\11\253\2\124\1\125\7\253\1\124\15\253\1\u0277"+
    "\55\253\2\124\1\125\7\253\1\124\4\253\1\u0278\66\253"+
    "\2\124\1\125\7\253\1\124\14\253\1\u0279\45\253\1\0"+
    "\3\144\1\0\3\144\1\u027a\7\0\2\144\1\u027b\1\144"+
    "\6\0\1\146\32\144\2\0\3\144\10\0\1\144\4\0"+
    "\3\144\1\0\3\144\10\0\4\144\7\0\15\144\1\u027c"+
    "\14\144\2\0\3\144\10\0\1\144\4\0\3\144\1\0"+
    "\3\144\10\0\4\144\7\0\7\144\1\u022f\22\144\2\0"+
    "\3\144\10\0\1\144\3\0\10\u021c\1\u024f\3\0\2\u01e9"+
    "\4\u021c\1\u024f\1\0\62\u021c\1\0\3\u0250\1\0\3\u0250"+
    "\1\u027d\3\0\2\u027e\2\0\4\u0250\7\0\32\u0250\2\0"+
    "\3\u0250\10\0\1\u0250\4\0\3\u0251\1\0\3\u0251\1\u027f"+
    "\3\0\1\u0220\3\0\4\u0251\7\0\32\u0251\2\0\3\u0251"+
    "\10\0\1\u0251\3\0\2\u0280\1\u0281\2\u0280\2\u0281\1\u0280"+
    "\1\u0252\3\0\4\u0280\1\u0281\1\u0280\1\u0252\1\0\7\u0280"+
    "\25\u0281\4\u0280\1\u0281\2\u0280\3\u0281\10\u0280\1\u0281\4\u0280"+
    "\1\u0282\1\u0281\1\u0282\1\u0280\2\u0281\1\u0282\1\u0252\3\0"+
    "\4\u0280\1\u0281\1\u0282\1\u0253\1\144\7\u0280\25\u0281\4\u0282"+
    "\1\u0281\2\u0280\3\u0281\10\u0280\1\u0281\3\u0280\10\0\1\u0254"+
    "\11\0\1\u0254\12\0\1\u0283\5\0\1\u0284\43\0\3\144"+
    "\1\0\3\144\1\u0254\7\0\2\144\1\u0255\1\144\7\0"+
    "\2\144\1\u0285\5\144\1\u0286\21\144\2\0\3\144\10\0"+
    "\1\144\5\0\1\u0287\2\0\2\u0287\1\0\1\u0256\7\0"+
    "\1\u0287\1\0\1\u0256\10\0\25\u0287\4\0\1\u0287\2\0"+
    "\3\u0287\10\0\1\u0287\4\0\1\144\1\u0287\1\144\1\0"+
    "\2\u0287\1\144\1\u0256\7\0\1\u0287\1\144\1\u0257\1\144"+
    "\7\0\25\u0287\4\144\1\u0287\2\0\3\u0287\10\0\1\u0287"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\6\144"+
    "\1\u0288\23\144\2\0\3\144\10\0\1\144\4\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\7\144\1\u0289\22\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\7\144\1\u028a\22\144\2\0\3\144"+
    "\10\0\1\144\4\0\3\144\1\0\3\144\1\u028b\7\0"+
    "\2\144\1\u028c\1\144\7\0\32\144\2\0\3\144\10\0"+
    "\1\144\3\0\10\u022a\1\u025c\3\0\1\u01f6\5\u022a\1\u025c"+
    "\1\0\62\u022a\1\0\3\u025d\1\0\3\u025d\1\u028d\3\0"+
    "\1\u028e\3\0\4\u025d\7\0\32\u025d\2\0\3\u025d\10\0"+
    "\1\u025d\3\0\10\u0230\1\u025e\3\0\6\u0230\1\u025e\1\0"+
    "\63\u0230\3\u0233\1\u0230\3\u0233\1\u025e\3\0\4\u0230\2\u0233"+
    "\1\u025f\1\144\7\u0230\32\u0233\2\u0230\3\u0233\10\u0230\1\u0233"+
    "\3\u0230\42\0\1\u028f\105\0\1\u0290\76\0\1\u0291\71\0"+
    "\1\u0292\66\0\11\u023a\2\351\1\75\7\u023a\1\351\1\u023a"+
    "\1\u0266\1\u0127\1\u0267\1\u0127\1\u023a\1\u0127\57\u023a\1\u0265"+
    "\4\u023a\2\351\1\75\7\u023a\1\351\1\u01d2\1\u0127\1\351"+
    "\57\u023a\4\u026a\1\u0293\4\u026a\2\351\1\75\7\u026a\1\351"+
    "\2\u026a\1\u0268\1\u0127\56\u026a\13\351\1\75\11\351\1\u0126"+
    "\1\u0127\1\u023b\1\230\1\351\1\230\53\351\3\u0268\1\u0294"+
    "\1\u0295\1\u0268\1\u0296\1\u0297\1\u0268\2\351\1\75\7\u0268"+
    "\1\351\1\u0268\1\u0126\1\u026a\1\u0298\1\u0165\1\u0268\1\u0165"+
    "\25\u0268\1\u0294\1\u0268\1\u0297\1\u0294\22\u0268\4\u0127\1\u0164"+
    "\4\u0127\2\351\1\75\7\u0127\1\351\2\u0127\1\351\1\u023a"+
    "\56\u0127\4\u0163\1\u026b\1\u0163\1\u026c\2\u0163\2\u019a\1\u019b"+
    "\7\u0163\1\u019a\1\u019c\62\u0163\3\u026d\3\u0163\1\u026d\1\u0163"+
    "\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\15\u0163\2\u026d\3\u0163"+
    "\1\u026d\1\u0163\1\u026d\1\u0163\1\u026d\2\u0163\1\u026d\1\u0163"+
    "\4\u026d\3\u0163\1\u026d\1\u0163\1\u026d\15\u0163\3\u0299\3\u0163"+
    "\1\u0299\1\u0163\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c\15\u0163"+
    "\2\u0299\3\u0163\1\u0299\1\u0163\1\u0299\1\u0163\1\u0299\2\u0163"+
    "\1\u0299\1\u0163\4\u0299\3\u0163\1\u0299\1\u0163\1\u0299\14\u0163"+
    "\11\u0240\3\75\7\u0240\1\75\1\u0240\1\u026f\1\225\1\u0270"+
    "\1\225\1\u0240\1\225\57\u0240\1\u026e\4\u0240\3\75\7\u0240"+
    "\1\75\1\u01d6\1\u0127\1\75\57\u0240\4\u0273\1\u029a\4\u0273"+
    "\3\0\7\u0273\1\0\2\u0273\1\u0271\1\225\56\u0273\25\75"+
    "\1\224\1\225\1\u0241\1\0\1\75\1\0\53\75\3\u0271"+
    "\1\u029b\1\u029c\1\u0271\1\u029d\1\u029e\1\u0271\3\75\7\u0271"+
    "\1\75\1\u0271\1\224\1\u0273\1\u029f\1\232\1\u0271\1\232"+
    "\25\u0271\1\u029b\1\u0271\1\u029e\1\u029b\22\u0271\4\225\1\231"+
    "\4\225\3\0\7\225\1\0\2\225\1\75\1\u0240\56\225"+
    "\4\227\1\u0274\1\227\1\u0275\15\227\1\350\62\227\3\u0276"+
    "\3\227\1\u0276\14\227\1\350\15\227\2\u0276\3\227\1\u0276"+
    "\1\227\1\u0276\1\227\1\u0276\2\227\1\u0276\1\227\4\u0276"+
    "\3\227\1\u0276\1\227\1\u0276\15\227\3\u02a0\3\227\1\u02a0"+
    "\14\227\1\350\15\227\2\u02a0\3\227\1\u02a0\1\227\1\u02a0"+
    "\1\227\1\u02a0\2\227\1\u02a0\1\227\4\u02a0\3\227\1\u02a0"+
    "\1\227\1\u02a0\14\227\11\253\2\124\1\125\7\253\1\124"+
    "\4\253\1\u02a1\55\253\11\u0278\2\u02a2\1\u02a3\7\u0278\1\u02a2"+
    "\62\u0278\11\253\2\124\1\125\7\253\1\124\15\253\1\u02a4"+
    "\44\253\2\u02a5\1\u02a6\2\u02a5\2\u02a6\1\u02a5\1\u027a\3\0"+
    "\4\u02a5\1\u02a6\1\u02a5\1\u027a\1\0\7\u02a5\25\u02a6\4\u02a5"+
    "\1\u02a6\2\u02a5\3\u02a6\10\u02a5\1\u02a6\4\u02a5\1\u02a7\1\u02a6"+
    "\1\u02a7\1\u02a5\2\u02a6\1\u02a7\1\u027a\3\0\4\u02a5\1\u02a6"+
    "\1\u02a7\1\u027b\1\144\7\u02a5\25\u02a6\4\u02a7\1\u02a6\2\u02a5"+
    "\3\u02a6\10\u02a5\1\u02a6\3\u02a5\1\0\3\144\1\0\3\144"+
    "\1\u02a8\7\0\2\144\1\u02a8\1\144\7\0\32\144\2\0"+
    "\3\144\10\0\1\144\13\0\1\u027d\3\0\2\u027e\4\0"+
    "\1\u027d\65\0\1\u0250\2\0\2\u0250\1\0\1\u027e\7\0"+
    "\1\u0250\1\0\1\u027e\10\0\25\u0250\4\0\1\u0250\2\0"+
    "\3\u0250\10\0\1\u0250\13\0\1\u027f\3\0\1\u0220\5\0"+
    "\1\u027f\63\0\11\u0280\3\0\7\u0280\1\0\63\u0280\3\u0281"+
    "\1\u0280\3\u0281\1\u02a9\3\0\2\u0252\2\u0280\3\u0281\1\u02aa"+
    "\7\u0280\32\u0281\2\u0280\3\u0281\10\u0280\1\u0281\4\u0280\3\u0282"+
    "\1\u0280\3\u0282\1\u0280\3\0\4\u0280\3\u0282\1\144\7\u0280"+
    "\32\u0282\2\u0280\3\u0282\10\u0280\1\u0282\3\u0280\37\0\1\u02ab"+
    "\115\0\1\u02ac\37\0\3\144\1\0\3\144\10\0\4\144"+
    "\7\0\4\144\1\u02ad\25\144\2\0\3\144\10\0\1\144"+
    "\4\0\3\144\1\0\3\144\10\0\4\144\7\0\14\144"+
    "\1\u02ae\15\144\2\0\3\144\10\0\1\144\4\0\3\u0287"+
    "\1\0\3\u0287\1\u02af\7\0\4\u0287\7\0\32\u0287\2\0"+
    "\3\u0287\10\0\1\u0287\4\0\3\144\1\0\3\144\1\u02b0"+
    "\7\0\2\144\1\u02b1\1\144\6\0\1\146\32\144\2\0"+
    "\3\144\10\0\1\144\3\0\2\u02b2\1\u02b3\2\u02b2\2\u02b3"+
    "\1\u02b2\1\u028b\3\0\4\u02b2\1\u02b3\1\u02b2\1\u028b\1\0"+
    "\7\u02b2\25\u02b3\4\u02b2\1\u02b3\2\u02b2\3\u02b3\10\u02b2\1\u02b3"+
    "\4\u02b2\1\u02b4\1\u02b3\1\u02b4\1\u02b2\2\u02b3\1\u02b4\1\u028b"+
    "\3\0\4\u02b2\1\u02b3\1\u02b4\1\u028c\1\144\7\u02b2\25\u02b3"+
    "\4\u02b4\1\u02b3\2\u02b2\3\u02b3\10\u02b2\1\u02b3\3\u02b2\10\0"+
    "\1\u028d\3\0\1\u028e\5\0\1\u028d\65\0\1\u025d\2\0"+
    "\2\u025d\1\0\1\u028e\7\0\1\u025d\1\0\1\u028e\10\0"+
    "\25\u025d\4\0\1\u025d\2\0\3\u025d\10\0\1\u025d\107\0"+
    "\1\u02b5\105\0\1\u02b6\60\0\1\u02b7\26\0\3\u026a\1\u02b8"+
    "\1\u02b9\1\u026a\1\u02ba\1\u02bb\1\u026a\2\351\1\75\7\u026a"+
    "\1\351\34\u026a\1\u02b8\1\u026a\1\u02bb\1\u02b8\22\u026a\3\351"+
    "\1\u0268\3\351\1\u0268\3\351\1\75\11\351\1\u0126\1\u0127"+
    "\1\u023b\1\230\1\351\1\230\25\351\1\u0268\1\351\2\u0268"+
    "\26\351\1\u02bc\1\351\1\u02bd\4\351\1\75\11\351\1\u0126"+
    "\1\u0127\1\u023b\1\230\1\351\1\230\54\351\3\u02be\3\351"+
    "\1\u02be\3\351\1\75\11\351\1\u0126\1\u0127\1\u023b\1\230"+
    "\1\351\1\230\7\351\2\u02be\3\351\1\u02be\1\351\1\u02be"+
    "\1\351\1\u02be\2\351\1\u02be\1\351\4\u02be\3\351\1\u02be"+
    "\1\351\1\u02be\17\351\1\u0294\3\351\1\u0294\3\351\1\75"+
    "\11\351\1\u0126\1\u0127\1\u023b\1\230\1\351\1\230\25\351"+
    "\1\u0294\1\351\2\u0294\22\351\4\u0165\1\u0166\4\u0165\2\351"+
    "\1\75\7\u0165\1\351\3\u0165\1\351\56\u0165\1\u0163\3\u02bf"+
    "\3\u0163\1\u02bf\1\u0163\2\u019a\1\u019b\7\u0163\1\u019a\1\u019c"+
    "\15\u0163\2\u02bf\3\u0163\1\u02bf\1\u0163\1\u02bf\1\u0163\1\u02bf"+
    "\2\u0163\1\u02bf\1\u0163\4\u02bf\3\u0163\1\u02bf\1\u0163\1\u02bf"+
    "\14\u0163\3\u0273\1\u02c0\1\u02c1\1\u0273\1\u02c2\1\u02c3\1\u0273"+
    "\3\0\7\u0273\1\0\34\u0273\1\u02c0\1\u0273\1\u02c3\1\u02c0"+
    "\22\u0273\3\75\1\u0271\3\75\1\u0271\15\75\1\224\1\225"+
    "\1\u0241\1\0\1\75\1\0\25\75\1\u0271\1\75\2\u0271"+
    "\26\75\1\u02c4\1\75\1\u02c5\16\75\1\224\1\225\1\u0241"+
    "\1\0\1\75\1\0\54\75\3\u02c6\3\75\1\u02c6\15\75"+
    "\1\224\1\225\1\u0241\1\0\1\75\1\0\7\75\2\u02c6"+
    "\3\75\1\u02c6\1\75\1\u02c6\1\75\1\u02c6\2\75\1\u02c6"+
    "\1\75\4\u02c6\3\75\1\u02c6\1\75\1\u02c6\17\75\1\u029b"+
    "\3\75\1\u029b\15\75\1\224\1\225\1\u0241\1\0\1\75"+
    "\1\0\25\75\1\u029b\1\75\2\u029b\22\75\4\232\1\233"+
    "\4\232\3\0\7\232\1\0\3\232\1\75\56\232\1\227"+
    "\3\u02c7\3\227\1\u02c7\14\227\1\350\15\227\2\u02c7\3\227"+
    "\1\u02c7\1\227\1\u02c7\1\227\1\u02c7\2\227\1\u02c7\1\227"+
    "\4\u02c7\3\227\1\u02c7\1\227\1\u02c7\14\227\11\u02a1\2\u02c8"+
    "\1\u02c9\7\u02a1\1\u02c8\62\u02a1\11\253\2\124\1\125\7\253"+
    "\1\124\4\253\1\u02ca\55\253\11\u02a5\3\0\7\u02a5\1\0"+
    "\63\u02a5\3\u02a6\1\u02a5\3\u02a6\1\u02cb\3\0\2\u027a\2\u02a5"+
    "\3\u02a6\1\u02cc\7\u02a5\32\u02a6\2\u02a5\3\u02a6\10\u02a5\1\u02a6"+
    "\4\u02a5\3\u02a7\1\u02a5\3\u02a7\1\u02a5\3\0\4\u02a5\3\u02a7"+
    "\1\144\7\u02a5\32\u02a7\2\u02a5\3\u02a7\10\u02a5\1\u02a7\3\u02a5"+
    "\13\u02a8\1\0\72\u02a8\10\u0280\1\u02a9\3\0\2\u0252\4\u0280"+
    "\1\u02a9\1\0\62\u0280\1\0\3\u02aa\1\0\3\u02aa\1\u02cd"+
    "\3\0\2\u02ce\2\0\4\u02aa\7\0\32\u02aa\2\0\3\u02aa"+
    "\10\0\1\u02aa\11\0\1\u02cf\144\0\1\u02d0\41\0\3\144"+
    "\1\0\1\144\1\u02d1\1\144\10\0\4\144\7\0\32\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\12\144\1\u02d2\17\144\2\0\3\144"+
    "\10\0\1\144\13\0\1\u02af\11\0\1\u02af\63\0\2\u02d3"+
    "\1\u02d4\2\u02d3\2\u02d4\1\u02d3\1\u02b0\3\0\4\u02d3\1\u02d4"+
    "\1\u02d3\1\u02b0\1\0\7\u02d3\25\u02d4\4\u02d3\1\u02d4\2\u02d3"+
    "\3\u02d4\10\u02d3\1\u02d4\4\u02d3\1\u02d5\1\u02d4\1\u02d5\1\u02d3"+
    "\2\u02d4\1\u02d5\1\u02b0\3\0\4\u02d3\1\u02d4\1\u02d5\1\u02b1"+
    "\1\144\7\u02d3\25\u02d4\4\u02d5\1\u02d4\2\u02d3\3\u02d4\10\u02d3"+
    "\1\u02d4\3\u02d3\11\u02b2\3\0\7\u02b2\1\0\63\u02b2\3\u02b3"+
    "\1\u02b2\3\u02b3\1\u02d6\3\0\1\u028b\3\u02b2\3\u02b3\1\u02d7"+
    "\7\u02b2\32\u02b3\2\u02b2\3\u02b3\10\u02b2\1\u02b3\4\u02b2\3\u02b4"+
    "\1\u02b2\3\u02b4\1\u02b2\3\0\4\u02b2\3\u02b4\1\144\7\u02b2"+
    "\32\u02b4\2\u02b2\3\u02b4\10\u02b2\1\u02b4\3\u02b2\17\0\1\u02d8"+
    "\105\0\1\u02d9\121\0\1\u02da\52\0\3\u0127\1\u026a\1\u0164"+
    "\2\u0127\1\u026a\1\u0127\2\351\1\75\7\u0127\1\351\2\u0127"+
    "\1\351\1\u023a\30\u0127\1\u026a\1\u0127\2\u026a\26\u0127\1\u02db"+
    "\1\u0127\1\u02dc\2\u0127\2\351\1\75\7\u0127\1\351\2\u0127"+
    "\1\351\1\u023a\57\u0127\3\u02dd\1\u0164\2\u0127\1\u02dd\1\u0127"+
    "\2\351\1\75\7\u0127\1\351\2\u0127\1\351\1\u023a\12\u0127"+
    "\2\u02dd\3\u0127\1\u02dd\1\u0127\1\u02dd\1\u0127\1\u02dd\2\u0127"+
    "\1\u02dd\1\u0127\4\u02dd\3\u0127\1\u02dd\1\u0127\1\u02dd\17\u0127"+
    "\1\u02b8\1\u0164\2\u0127\1\u02b8\1\u0127\2\351\1\75\7\u0127"+
    "\1\351\2\u0127\1\351\1\u023a\30\u0127\1\u02b8\1\u0127\2\u02b8"+
    "\22\u0127\4\351\1\u02bc\1\351\1\u02bd\4\351\1\75\11\351"+
    "\1\u0126\1\u0127\1\u0128\1\230\1\351\1\230\54\351\3\u02be"+
    "\3\351\1\u02be\3\351\1\75\11\351\1\u0126\1\u0127\1\u0128"+
    "\1\230\1\351\1\230\7\351\2\u02be\3\351\1\u02be\1\351"+
    "\1\u02be\1\351\1\u02be\2\351\1\u02be\1\351\4\u02be\3\351"+
    "\1\u02be\1\351\1\u02be\15\351\3\u02de\3\351\1\u02de\3\351"+
    "\1\75\11\351\1\u0126\1\u0127\1\u0128\1\230\1\351\1\230"+
    "\7\351\2\u02de\3\351\1\u02de\1\351\1\u02de\1\351\1\u02de"+
    "\2\351\1\u02de\1\351\4\u02de\3\351\1\u02de\1\351\1\u02de"+
    "\14\351\1\u0163\3\u0209\3\u0163\1\u0209\1\u0163\2\u019a\1\u019b"+
    "\7\u0163\1\u019a\1\u019c\15\u0163\2\u0209\3\u0163\1\u0209\1\u0163"+
    "\1\u0209\1\u0163\1\u0209\2\u0163\1\u0209\1\u0163\4\u0209\3\u0163"+
    "\1\u0209\1\u0163\1\u0209\14\u0163\3\225\1\u0273\1\231\2\225"+
    "\1\u0273\1\225\3\0\7\225\1\0\2\225\1\75\1\u0240"+
    "\30\225\1\u0273\1\225\2\u0273\26\225\1\u02df\1\225\1\u02e0"+
    "\2\225\3\0\7\225\1\0\2\225\1\75\1\u0240\57\225"+
    "\3\u02e1\1\231\2\225\1\u02e1\1\225\3\0\7\225\1\0"+
    "\2\225\1\75\1\u0240\12\225\2\u02e1\3\225\1\u02e1\1\225"+
    "\1\u02e1\1\225\1\u02e1\2\225\1\u02e1\1\225\4\u02e1\3\225"+
    "\1\u02e1\1\225\1\u02e1\17\225\1\u02c0\1\231\2\225\1\u02c0"+
    "\1\225\3\0\7\225\1\0\2\225\1\75\1\u0240\30\225"+
    "\1\u02c0\1\225\2\u02c0\22\225\4\75\1\u02c4\1\75\1\u02c5"+
    "\16\75\1\224\1\225\1\226\1\0\1\75\1\0\54\75"+
    "\3\u02c6\3\75\1\u02c6\15\75\1\224\1\225\1\226\1\0"+
    "\1\75\1\0\7\75\2\u02c6\3\75\1\u02c6\1\75\1\u02c6"+
    "\1\75\1\u02c6\2\75\1\u02c6\1\75\4\u02c6\3\75\1\u02c6"+
    "\1\75\1\u02c6\15\75\3\u02e2\3\75\1\u02e2\15\75\1\224"+
    "\1\225\1\226\1\0\1\75\1\0\7\75\2\u02e2\3\75"+
    "\1\u02e2\1\75\1\u02e2\1\75\1\u02e2\2\75\1\u02e2\1\75"+
    "\4\u02e2\3\75\1\u02e2\1\75\1\u02e2\14\75\1\227\3\u0210"+
    "\3\227\1\u0210\14\227\1\350\15\227\2\u0210\3\227\1\u0210"+
    "\1\227\1\u0210\1\227\1\u0210\2\227\1\u0210\1\227\4\u0210"+
    "\3\227\1\u0210\1\227\1\u0210\14\227\11\u02ca\2\u02e3\1\u02e4"+
    "\7\u02ca\1\u02e3\62\u02ca\10\u02a5\1\u02cb\3\0\2\u027a\4\u02a5"+
    "\1\u02cb\1\0\62\u02a5\1\0\3\u02cc\1\0\3\u02cc\1\u02e5"+
    "\3\0\2\u02e6\2\0\4\u02cc\7\0\32\u02cc\2\0\3\u02cc"+
    "\10\0\1\u02cc\13\0\1\u02cd\3\0\2\u02ce\4\0\1\u02cd"+
    "\65\0\1\u02aa\2\0\2\u02aa\1\0\1\u02ce\7\0\1\u02aa"+
    "\1\0\1\u02ce\10\0\25\u02aa\4\0\1\u02aa\2\0\3\u02aa"+
    "\10\0\1\u02aa\45\0\1\u02e7\113\0\1\u02e8\36\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\7\144\1\u02e9\22\144"+
    "\2\0\3\144\10\0\1\144\4\0\3\144\1\0\3\144"+
    "\10\0\4\144\7\0\15\144\1\u02ea\14\144\2\0\3\144"+
    "\10\0\1\144\3\0\11\u02d3\3\0\7\u02d3\1\0\63\u02d3"+
    "\3\u02d4\1\u02d3\3\u02d4\1\u02eb\3\0\2\u02b0\2\u02d3\3\u02d4"+
    "\1\u02ec\7\u02d3\32\u02d4\2\u02d3\3\u02d4\10\u02d3\1\u02d4\4\u02d3"+
    "\3\u02d5\1\u02d3\3\u02d5\1\u02d3\3\0\4\u02d3\3\u02d5\1\144"+
    "\7\u02d3\32\u02d5\2\u02d3\3\u02d5\10\u02d3\1\u02d5\3\u02d3\10\u02b2"+
    "\1\u02d6\3\0\1\u028b\5\u02b2\1\u02d6\1\0\62\u02b2\1\0"+
    "\3\u02d7\1\0\3\u02d7\1\u02ed\3\0\1\u02ee\3\0\4\u02d7"+
    "\7\0\32\u02d7\2\0\3\u02d7\10\0\1\u02d7\40\0\1\u02ef"+
    "\50\0\4\u0127\1\u02f0\1\u0127\1\u02dc\2\u0127\2\351\1\75"+
    "\7\u0127\1\351\63\u0127\3\u02dd\1\u0164\2\u0127\1\u02dd\1\u0127"+
    "\2\351\1\75\7\u0127\1\351\2\u0127\1\351\13\u0127\2\u02dd"+
    "\3\u0127\1\u02dd\1\u0127\1\u02dd\1\u0127\1\u02dd\2\u0127\1\u02dd"+
    "\1\u0127\4\u02dd\3\u0127\1\u02dd\1\u0127\1\u02dd\15\u0127\3\u02f1"+
    "\1\u0164\2\u0127\1\u02f1\1\u0127\2\351\1\75\7\u0127\1\351"+
    "\2\u0127\1\351\13\u0127\2\u02f1\3\u0127\1\u02f1\1\u0127\1\u02f1"+
    "\1\u0127\1\u02f1\2\u0127\1\u02f1\1\u0127\4\u02f1\3\u0127\1\u02f1"+
    "\1\u0127\1\u02f1\14\u0127\1\351\3\u02f2\3\351\1\u02f2\3\351"+
    "\1\75\11\351\1\u0126\1\u0127\1\u0128\1\230\1\351\1\230"+
    "\7\351\2\u02f2\3\351\1\u02f2\1\351\1\u02f2\1\351\1\u02f2"+
    "\2\351\1\u02f2\1\351\4\u02f2\3\351\1\u02f2\1\351\1\u02f2"+
    "\14\351\4\225\1\u02f3\1\225\1\u02e0\2\225\3\0\7\225"+
    "\1\0\63\225\3\u02e1\1\231\2\225\1\u02e1\1\225\3\0"+
    "\7\225\1\0\2\225\1\75\13\225\2\u02e1\3\225\1\u02e1"+
    "\1\225\1\u02e1\1\225\1\u02e1\2\225\1\u02e1\1\225\4\u02e1"+
    "\3\225\1\u02e1\1\225\1\u02e1\15\225\3\u02f4\1\231\2\225"+
    "\1\u02f4\1\225\3\0\7\225\1\0\2\225\1\75\13\225"+
    "\2\u02f4\3\225\1\u02f4\1\225\1\u02f4\1\225\1\u02f4\2\225"+
    "\1\u02f4\1\225\4\u02f4\3\225\1\u02f4\1\225\1\u02f4\14\225"+
    "\1\75\3\u02f5\3\75\1\u02f5\15\75\1\224\1\225\1\226"+
    "\1\0\1\75\1\0\7\75\2\u02f5\3\75\1\u02f5\1\75"+
    "\1\u02f5\1\75\1\u02f5\2\75\1\u02f5\1\75\4\u02f5\3\75"+
    "\1\u02f5\1\75\1\u02f5\14\75\10\0\1\u02e5\3\0\2\u02e6"+
    "\4\0\1\u02e5\65\0\1\u02cc\2\0\2\u02cc\1\0\1\u02e6"+
    "\7\0\1\u02cc\1\0\1\u02e6\10\0\25\u02cc\4\0\1\u02cc"+
    "\2\0\3\u02cc\10\0\1\u02cc\45\0\1\u02f6\44\0\3\144"+
    "\1\0\3\144\10\0\4\144\7\0\7\144\1\u02f7\22\144"+
    "\2\0\3\144\10\0\1\144\3\0\10\u02d3\1\u02eb\3\0"+
    "\2\u02b0\4\u02d3\1\u02eb\1\0\62\u02d3\1\0\3\u02ec\1\0"+
    "\3\u02ec\1\u02f8\3\0\2\u02f9\2\0\4\u02ec\7\0\32\u02ec"+
    "\2\0\3\u02ec\10\0\1\u02ec\13\0\1\u02ed\3\0\1\u02ee"+
    "\5\0\1\u02ed\65\0\1\u02d7\2\0\2\u02d7\1\0\1\u02ee"+
    "\7\0\1\u02d7\1\0\1\u02ee\10\0\25\u02d7\4\0\1\u02d7"+
    "\2\0\3\u02d7\10\0\1\u02d7\107\0\1\u02fa\1\0\4\u0127"+
    "\1\u02db\1\u0127\1\u02dc\2\u0127\2\351\1\75\7\u0127\1\351"+
    "\2\u0127\1\351\60\u0127\3\u02fb\1\u0164\2\u0127\1\u02fb\1\u0127"+
    "\2\351\1\75\7\u0127\1\351\2\u0127\1\351\13\u0127\2\u02fb"+
    "\3\u0127\1\u02fb\1\u0127\1\u02fb\1\u0127\1\u02fb\2\u0127\1\u02fb"+
    "\1\u0127\4\u02fb\3\u0127\1\u02fb\1\u0127\1\u02fb\14\u0127\1\351"+
    "\3\u0268\3\351\1\u0268\3\351\1\75\11\351\1\u0126\1\u0127"+
    "\1\u0128\1\230\1\351\1\230\7\351\2\u0268\3\351\1\u0268"+
    "\1\351\1\u0268\1\351\1\u0268\2\351\1\u0268\1\351\4\u0268"+
    "\3\351\1\u0268\1\351\1\u0268\14\351\4\225\1\u02df\1\225"+
    "\1\u02e0\2\225\3\0\7\225\1\0\2\225\1\75\60\225"+
    "\3\u02fc\1\231\2\225\1\u02fc\1\225\3\0\7\225\1\0"+
    "\2\225\1\75\13\225\2\u02fc\3\225\1\u02fc\1\225\1\u02fc"+
    "\1\225\1\u02fc\2\225\1\u02fc\1\225\4\u02fc\3\225\1\u02fc"+
    "\1\225\1\u02fc\14\225\1\75\3\u0271\3\75\1\u0271\15\75"+
    "\1\224\1\225\1\226\1\0\1\75\1\0\7\75\2\u0271"+
    "\3\75\1\u0271\1\75\1\u0271\1\75\1\u0271\2\75\1\u0271"+
    "\1\75\4\u0271\3\75\1\u0271\1\75\1\u0271\14\75\10\0"+
    "\1\u02f8\3\0\2\u02f9\4\0\1\u02f8\65\0\1\u02ec\2\0"+
    "\2\u02ec\1\0\1\u02f9\7\0\1\u02ec\1\0\1\u02f9\10\0"+
    "\25\u02ec\4\0\1\u02ec\2\0\3\u02ec\10\0\1\u02ec\22\0"+
    "\1\u02fd\66\0\1\u0127\3\u026a\1\u0164\2\u0127\1\u026a\1\u0127"+
    "\2\351\1\75\7\u0127\1\351\2\u0127\1\351\13\u0127\2\u026a"+
    "\3\u0127\1\u026a\1\u0127\1\u026a\1\u0127\1\u026a\2\u0127\1\u026a"+
    "\1\u0127\4\u026a\3\u0127\1\u026a\1\u0127\1\u026a\14\u0127\1\225"+
    "\3\u0273\1\231\2\225\1\u0273\1\225\3\0\7\225\1\0"+
    "\2\225\1\75\13\225\2\u0273\3\225\1\u0273\1\225\1\u0273"+
    "\1\225\1\u0273\2\225\1\u0273\1\225\4\u0273\3\225\1\u0273"+
    "\1\225\1\u0273\14\225";

  private static int [] zzUnpackTrans() {
    int [] result = new int[44450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\14\0\2\1\1\11\4\1\1\11\2\1\1\11"+
    "\14\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\2\1\1\3\10\11\4\1\2\11\1\1"+
    "\1\11\3\1\1\11\1\1\1\11\3\1\2\11\1\1"+
    "\1\11\3\1\1\11\1\1\1\11\1\1\1\11\2\1"+
    "\3\0\2\11\1\0\1\11\1\0\2\1\1\0\15\1"+
    "\3\0\1\11\3\1\1\0\1\11\1\1\1\0\1\11"+
    "\4\1\5\11\1\0\1\1\1\0\1\11\1\1\3\0"+
    "\1\2\1\15\1\5\10\0\1\11\4\1\6\11\3\0"+
    "\1\11\5\0\1\1\1\0\1\11\1\1\1\11\2\1"+
    "\1\11\34\1\3\0\6\1\1\0\1\11\1\0\1\1"+
    "\5\0\1\11\2\0\1\1\4\0\1\11\1\0\1\1"+
    "\1\11\1\1\1\11\3\0\41\1\3\0\2\1\1\0"+
    "\1\11\1\1\14\0\1\11\1\1\3\0\45\1\2\11"+
    "\1\0\2\1\1\0\1\1\13\0\1\1\5\0\11\1"+
    "\1\0\30\1\1\11\2\1\7\0\2\1\10\0\1\1"+
    "\1\11\3\0\30\1\1\0\7\1\6\0\2\1\3\0"+
    "\1\1\6\0\1\1\1\11\4\0\13\1\1\0\21\1"+
    "\1\11\6\0\1\1\6\0\1\1\13\0\10\1\1\0"+
    "\23\1\4\0\2\11\2\1\4\0\2\1\7\0\1\1"+
    "\1\11\1\0\10\1\1\0\1\1\1\0\11\1\2\0"+
    "\1\11\2\0\1\1\2\0\2\1\4\0\1\1\2\0"+
    "\2\1\7\0\4\1\1\0\4\1\2\0\11\1\4\0"+
    "\1\11\1\0\4\1\3\0\4\1\3\0\1\1\1\11"+
    "\1\0\6\1\2\0\10\1\7\0\3\1\5\0\3\1"+
    "\1\0\1\1\1\11\1\0\3\1\3\0\7\1\2\11"+
    "\4\0\1\1\3\0\2\1\1\11\1\1\1\0\1\11"+
    "\1\0\5\1\4\0\1\1\2\0\1\1\1\11\2\1"+
    "\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[765];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int zzPushbackPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, int zzPushbackPos,
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzPushbackPos = zzPushbackPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int balance = 0;
  int commentbalance = 0;
  int action_line = 0;
  int bufferSize = 16384;

  File file;
  Stack files = new Stack();

  StringBuffer userCode   = new StringBuffer();
  
  String classCode;
  String initCode;   
  String initThrow;
  String eofCode;
  String eofThrow;
  String lexThrow;
  String eofVal;
  String scanErrorException;
  String cupSymbol = "sym";

  StringBuffer actionText = new StringBuffer();
  StringBuffer string     = new StringBuffer();
  
  boolean charCount;
  boolean lineCount;
  boolean columnCount;
  boolean cupCompatible;  
  boolean cupDebug;
  boolean isInteger;
  boolean isIntWrap;
  boolean isYYEOF;
  boolean notUnix;
  boolean isPublic;
  boolean isFinal;
  boolean isAbstract;
  boolean bolUsed;
  boolean standalone;
  boolean debugOption;
  boolean useRowMap = Options.gen_method == Options.PACK || Options.gen_method == Options.TABLE;
  boolean packed = Options.gen_method == Options.PACK;
  boolean caseless;
  boolean inclusive_states;
  boolean eofclose;
    
  String isImplementing;
  String isExtending;
  String className = "Yylex";
  String functionName;
  String tokenType;
  String visibility = "public";
    
  LexicalStates states = new LexicalStates();

  Vector actions = new Vector();
  
  private int nextState;

  boolean macroDefinition;

  Timer t = new Timer();

  public int currentLine() {
    return yyline;
  }    

  public void setFile(File file) {
    this.file = file;
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
   
  // updates line and column count to the beginning of the first
  // non whitespace character in yytext, but leaves yyline+yycolumn 
  // untouched
  private Symbol symbol_countUpdate(int type, Object value) {
     int lc = yyline;
     int cc = yycolumn;
     String text = yytext();

     for (int i=0; i < text.length(); i++) {
      char c = text.charAt(i);

      if (c != '\n' && c != '\r' && c != ' ' && c != '\t' ) 
        return new Symbol(type, lc, cc, value);

      if (c == '\n') {
        lc++;
        cc = 0;
      }
      else
        cc++;
    }
   
    return new Symbol(type, yyline, yycolumn, value);
  }

  private String makeMacroIdent() {
    String matched = yytext().trim();
    return matched.substring(1, matched.length()-1).trim();
  }

  public static String conc(Object a, Object b) {
    if (a == null && b == null) return null;
    if (a == null) return b.toString();
    if (b == null) return a.toString();
    
    return a.toString()+b.toString();
  }

  public static String concExc(Object a, Object b) {
    if (a == null && b == null) return null;
    if (a == null) return b.toString();
    if (b == null) return a.toString();
    
    return a.toString()+", "+b.toString();
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexScan(java.io.Reader in) {
    states.insert("YYINITIAL", true);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexScan(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzPushbackPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzPushbackPos = s.zzPushbackPos;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      zzWasPushback = false;

      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 85: 
          { return symbol(FULL);
          }
        case 143: break;
        case 93: 
          { debugOption = true;
          }
        case 144: break;
        case 57: 
          { return symbol(CHAR,new Character('\t'));
          }
        case 145: break;
        case 109: 
          { actionText.setLength(0); yybegin(JAVA_CODE); 
                                Symbol s = symbol_countUpdate(EOFRULE, null);
                                action_line = s.left+1; 
                                return s;
          }
        case 146: break;
        case 108: 
          { throw new ScannerException(file,ErrorMessages.NO_BUFFER_SIZE, yyline);
          }
        case 147: break;
        case 92: 
          { isYYEOF = true;
          }
        case 148: break;
        case 54: 
          { return symbol(CHAR, new Character(yytext().charAt(1)));
          }
        case 149: break;
        case 99: 
          { isInteger = true;
                                if (eofVal == null)
                                  eofVal = "return 0;";
                                eofclose = true;
          }
        case 150: break;
        case 11: 
          { yybegin(REGEXP);
          }
        case 151: break;
        case 113: 
          { isAbstract = true;
          }
        case 152: break;
        case 102: 
          { initCode = conc(initCode,string);    yybegin(MACROS);
          }
        case 153: break;
        case 45: 
          { throw new ScannerException(file,ErrorMessages.UNEXPECTED_NL, yyline, yycolumn);
          }
        case 154: break;
        case 12: 
          { return symbol_countUpdate(RBRACE, null);
          }
        case 155: break;
        case 74: 
          { return symbol(REPEAT, new Integer(yytext().substring(1).trim()));
          }
        case 156: break;
        case 55: 
          { return symbol(CHAR, new Character( (char) Integer.parseInt(yytext().substring(1,yytext().length()), 8)));
          }
        case 157: break;
        case 98: 
          { columnCount = true;
          }
        case 158: break;
        case 123: 
          { return symbol(LETTERCLASS);
          }
        case 159: break;
        case 15: 
          { if (macroDefinition) { yybegin(MACROS); } return symbol(REGEXPEND);
          }
        case 160: break;
        case 77: 
          { inclusive_states = true; yybegin(STATELIST);
          }
        case 161: break;
        case 56: 
          { return symbol(CHAR,new Character('\n'));
          }
        case 162: break;
        case 81: 
          { return symbol(MACROUSE, yytext().substring(1,yytext().length()-1));
          }
        case 163: break;
        case 25: 
          { return symbol(OPENBRACKET);
          }
        case 164: break;
        case 124: 
          { throw new ScannerException(file,ErrorMessages.QUIL_INITTHROW, yyline);
          }
        case 165: break;
        case 127: 
          { visibility = "private"; Skeleton.makePrivate();
          }
        case 166: break;
        case 49: 
          { commentbalance++;
          }
        case 167: break;
        case 9: 
          { throw new ScannerException(file,ErrorMessages.UNKNOWN_OPTION, yyline, yycolumn);
          }
        case 168: break;
        case 68: 
          { string.append('\n');
          }
        case 169: break;
        case 33: 
          { balance++; actionText.append('{');
          }
        case 170: break;
        case 48: 
          { if (commentbalance > 0) 
                commentbalance--; 
              else
                yybegin(nextState);
          }
        case 171: break;
        case 67: 
          { string.append('\"');
          }
        case 172: break;
        case 96: 
          { tokenType = yytext().substring(6).trim();
          }
        case 173: break;
        case 79: 
          { return symbol_countUpdate(MACROUSE, makeMacroIdent());
          }
        case 174: break;
        case 14: 
          { return symbol(CHAR, new Character(yytext().charAt(0)));
          }
        case 175: break;
        case 141: 
          { eofclose = false;
          }
        case 176: break;
        case 32: 
          { if (balance > 0) {
                 balance--;     
                 actionText.append('}'); 
               }
               else {
                 yybegin(REGEXPSTART); 
                 Action a = new Action(actionText.toString(), action_line);
                 actions.addElement(a);
                 return symbol(ACTION, a);
               }
          }
        case 177: break;
        case 121: 
          { isExtending = yytext().substring(9).trim();
          }
        case 178: break;
        case 114: 
          { cupSymbol = yytext().substring(8).trim(); 
                                if (cupCompatible) Out.warning(ErrorMessages.CUPSYM_AFTER_CUP, yyline);
          }
        case 179: break;
        case 63: 
          { yybegin(REPEATEXP); return symbol(REPEAT, new Integer(yytext().trim().substring(1).trim()));
          }
        case 180: break;
        case 88: 
          { packed = true; useRowMap = true;
          }
        case 181: break;
        case 27: 
          { return symbol(PLUS);
          }
        case 182: break;
        case 100: 
          { isPublic = true;
          }
        case 183: break;
        case 70: 
          { string.append('\r');
          }
        case 184: break;
        case 76: 
          { inclusive_states = false; yybegin(STATELIST);
          }
        case 185: break;
        case 3: 
          { userCode.append(yytext());
          }
        case 186: break;
        case 111: 
          { lexThrow = concExc(lexThrow,yytext().substring(8).trim());
          }
        case 187: break;
        case 26: 
          { return symbol(CLOSEBRACKET);
          }
        case 188: break;
        case 80: 
          { string.append( (char) Integer.parseInt(yytext().substring(2,yytext().length()), 16));
          }
        case 189: break;
        case 37: 
          { throw new ScannerException(file,ErrorMessages.UNTERMINATED_STR, yyline, yycolumn);
          }
        case 190: break;
        case 69: 
          { string.append('\t');
          }
        case 191: break;
        case 23: 
          { return symbol(BANG);
          }
        case 192: break;
        case 112: 
          { eofclose = true;
          }
        case 193: break;
        case 17: 
          { yybegin(CHARCLASS); return symbol(OPENCLASS);
          }
        case 194: break;
        case 115: 
          { cupDebug = true;
          }
        case 195: break;
        case 87: 
          { charCount = true;
          }
        case 196: break;
        case 58: 
          { return symbol(CHAR,new Character('\r'));
          }
        case 197: break;
        case 66: 
          { string.append( (char) Integer.parseInt(yytext().substring(1,yytext().length()), 8));
          }
        case 198: break;
        case 135: 
          { scanErrorException = yytext().substring(11).trim();
          }
        case 199: break;
        case 60: 
          { return symbol(CHAR,new Character('\b'));
          }
        case 200: break;
        case 35: 
          { yybegin(REGEXP); return symbol(MORETHAN);
          }
        case 201: break;
        case 133: 
          { isImplementing = concExc(isImplementing, yytext().substring(12).trim());
          }
        case 202: break;
        case 78: 
          { return symbol(CHAR, new Character( (char) Integer.parseInt(yytext().substring(2,yytext().length()), 16)));
          }
        case 203: break;
        case 91: 
          { isFinal = true;
          }
        case 204: break;
        case 138: 
          { return symbol(UPPERCLASS);
          }
        case 205: break;
        case 46: 
          { yybegin(REGEXP); return symbol(RBRACE);
          }
        case 206: break;
        case 51: 
          { Out.warning(ErrorMessages.NOT_AT_BOL, yyline); yypushback(1);
          }
        case 207: break;
        case 89: 
          { return symbol(ASCII);
          }
        case 208: break;
        case 28: 
          { return symbol(QUESTION);
          }
        case 209: break;
        case 36: 
          { string.append(yytext());
          }
        case 210: break;
        case 29: 
          { return symbol(DOLLAR);
          }
        case 211: break;
        case 136: 
          { initThrow = concExc(initThrow,string);  yybegin(MACROS);
          }
        case 212: break;
        case 142: 
          { return symbol(JLETTERDIGITCLASS);
          }
        case 213: break;
        case 53: 
          { nextState = REGEXPSTART; yybegin(COMMENT);
          }
        case 214: break;
        case 131: 
          { eofThrow = concExc(eofThrow,string); yybegin(MACROS);
          }
        case 215: break;
        case 61: 
          { actionText.setLength(0); yybegin(JAVA_CODE); action_line = yyline+1; return symbol(REGEXPEND);
          }
        case 216: break;
        case 19: 
          { return symbol(LOOKAHEAD);
          }
        case 217: break;
        case 139: 
          { return symbol(LOWERCLASS);
          }
        case 218: break;
        case 38: 
          { yybegin(nextState); return symbol(STRING, string.toString());
          }
        case 219: break;
        case 82: 
          { classCode = conc(classCode,string);  yybegin(MACROS);
          }
        case 220: break;
        case 8: 
          { return symbol(IDENT, yytext());
          }
        case 221: break;
        case 43: 
          { return symbol(HAT);
          }
        case 222: break;
        case 125: 
          { eofThrow = concExc(eofThrow,yytext().substring(10).trim());
          }
        case 223: break;
        case 5: 
          { states.insert(yytext(),inclusive_states);
          }
        case 224: break;
        case 128: 
          { standalone = true; isInteger = true;
          }
        case 225: break;
        case 4: 
          { throw new ScannerException(file,ErrorMessages.UNEXPECTED_CHAR, yyline, yycolumn);
          }
        case 226: break;
        case 47: 
          { t.start(); 
                             yybegin(MACROS); 
                             macroDefinition = true; 
                             return symbol(USERCODE,userCode);
          }
        case 227: break;
        case 59: 
          { return symbol(CHAR,new Character('\f'));
          }
        case 228: break;
        case 95: 
          { eofCode = conc(eofCode,string); yybegin(MACROS);
          }
        case 229: break;
        case 65: 
          { string.append(yytext().charAt(1));
          }
        case 230: break;
        case 116: 
          { caseless = true;
          }
        case 231: break;
        case 39: 
          { throw new ScannerException(file,ErrorMessages.EOL_IN_CHARCLASS,yyline,yycolumn);
          }
        case 232: break;
        case 118: 
          { return symbol(DIGITCLASS);
          }
        case 233: break;
        case 64: 
          { if (macroDefinition) {
                              yybegin(EATWSPNL);
                              return symbol(BAR); 
                            }
                            else { 
                              yybegin(REGEXPSTART); 
                              return symbol(NOACTION); 
                            }
          }
        case 234: break;
        case 30: 
          { bolUsed = true; return symbol(HAT);
          }
        case 235: break;
        case 106: 
          { throw new ScannerException(file,ErrorMessages.QUIL_CUPSYM, yyline);
          }
        case 236: break;
        case 103: 
          { isIntWrap = true;
          }
        case 237: break;
        case 41: 
          { if (balance > 0) balance--; else yybegin(REGEXP); return symbol(CLOSECLASS);
          }
        case 238: break;
        case 84: 
          { cupCompatible = true;  
                                isImplementing = concExc(isImplementing, "java_cup.runtime.Scanner");
                                if (functionName == null)
                                  functionName = "next_token";
                                if (tokenType == null)
                                  tokenType = "java_cup.runtime.Symbol";
                                if (eofVal == null)
                                  eofVal = "return new java_cup.runtime.Symbol("+cupSymbol+".EOF);";
                                if (!Options.jlex) eofclose = true;
          }
        case 239: break;
        case 117: 
          { bufferSize = Integer.parseInt(yytext().substring(8).trim());
          }
        case 240: break;
        case 31: 
          { actionText.append(yytext());
          }
        case 241: break;
        case 86: 
          { lineCount = true;
          }
        case 242: break;
        case 129: 
          { throw new ScannerException(file,ErrorMessages.QUIL_SCANERROR, yyline);
          }
        case 243: break;
        case 105: 
          { throw new ScannerException(file,ErrorMessages.QUIL_THROW, yyline);
          }
        case 244: break;
        case 83: 
          { isInteger = true;
          }
        case 245: break;
        case 130: 
          { return symbol(JLETTERCLASS);
          }
        case 246: break;
        case 18: 
          { return symbol(STAR);
          }
        case 247: break;
        case 122: 
          { throw new ScannerException(file,ErrorMessages.QUIL_EOFTHROW, yyline);
          }
        case 248: break;
        case 44: 
          { return symbol(DASH);
          }
        case 249: break;
        case 107: 
          { className = yytext().substring(7).trim();
          }
        case 250: break;
        case 62: 
          { nextState = REGEXP; yybegin(COMMENT);
          }
        case 251: break;
        case 137: 
          { lexThrow = concExc(lexThrow,yytext().substring(12).trim());
          }
        case 252: break;
        case 22: 
          { return symbol(BAR);
          }
        case 253: break;
        case 126: 
          { functionName = yytext().substring(10).trim();
          }
        case 254: break;
        case 13: 
          { yybegin(STATES); return symbol_countUpdate(LESSTHAN, null);
          }
        case 255: break;
        case 120: 
          { eofVal = string.toString(); yybegin(MACROS);
          }
        case 256: break;
        case 73: 
          { yypushback(1); yycolumn--; return symbol(CHAR, new Character(yytext().charAt(0)));
          }
        case 257: break;
        case 24: 
          { return symbol(TILDE);
          }
        case 258: break;
        case 140: 
          { lexThrow = concExc(lexThrow,string); yybegin(MACROS);
          }
        case 259: break;
        case 104: 
          { notUnix = true;
          }
        case 260: break;
        case 90: 
          { packed = false; useRowMap = true;
          }
        case 261: break;
        case 20: 
          { string.setLength(0); nextState = REGEXP; yybegin(STRING_CONTENT);
          }
        case 262: break;
        case 2: 
          { /* ignore */
          }
        case 263: break;
        case 94: 
          { return symbol(UNICODE);
          }
        case 264: break;
        case 16: 
          { return symbol(POINT);
          }
        case 265: break;
        case 72: 
          { string.append('\b');
          }
        case 266: break;
        case 21: 
          { yybegin(REGEXPSTART); return symbol(LBRACE);
          }
        case 267: break;
        case 132: 
          { initThrow = concExc(initThrow,yytext().substring(11).trim());
          }
        case 268: break;
        case 97: 
          { packed = false; useRowMap = false;
          }
        case 269: break;
        case 7: 
          { yybegin(MACROS);
          }
        case 270: break;
        case 75: 
          { string.setLength(0); yybegin(COPY);
          }
        case 271: break;
        case 42: 
          { string.setLength(0); nextState = CHARCLASS; yybegin(STRING_CONTENT);
          }
        case 272: break;
        case 119: 
          { actionText.setLength(0); yybegin(JAVA_CODE); action_line = yyline+1; return symbol(EOFRULE);
          }
        case 273: break;
        case 52: 
          { macroDefinition = false; yybegin(REGEXPSTART); return symbol(DELIMITER);
          }
        case 274: break;
        case 50: 
          { nextState = MACROS; yybegin(COMMENT);
          }
        case 275: break;
        case 10: 
          { yybegin(REGEXP); return symbol(EQUALS);
          }
        case 276: break;
        case 34: 
          { return symbol(COMMA);
          }
        case 277: break;
        case 1: 
          { return symbol(EOF);
          }
        case 278: break;
        case 101: 
          { throw new ScannerException(file,ErrorMessages.EOF_WO_ACTION);
          }
        case 279: break;
        case 71: 
          { string.append('\f');
          }
        case 280: break;
        case 40: 
          { balance++; return symbol(OPENCLASS);
          }
        case 281: break;
        case 134: 
          { throw new ScannerException(file,ErrorMessages.QUIL_YYLEXTHROW, yyline);
          }
        case 282: break;
        case 110: 
          { File f = new File(yytext().substring(9).trim());
                                if ( !f.canRead() )
                                  throw new ScannerException(file,ErrorMessages.NOT_READABLE, yyline); 
                                // check for cycle
                                if (files.search(f) > 0)
                                  throw new ScannerException(file,ErrorMessages.FILE_CYCLE, yyline);
                                try {
                                  yypushStream( new FileReader(f) );
                                  files.push(file);
                                  file = f;
                                  Out.println("Including \""+file+"\"");
                                }
                                catch (FileNotFoundException e) {
                                  throw new ScannerException(file,ErrorMessages.NOT_READABLE, yyline); 
                                }
          }
        case 283: break;
        case 6: 
          { 
          }
        case 284: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING_CONTENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);
            }
            case 766: break;
            case MACROS: {
              if ( yymoreStreams() ) {
                                  file = (File) files.pop();
                                  yypopStream();
                                }
                                else
                                  throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 767: break;
            case STATELIST: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 768: break;
            case CHARCLASS: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }
            case 769: break;
            case JAVA_CODE: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_ACTION, action_line-1);
            }
            case 770: break;
            case REPEATEXP: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }
            case 771: break;
            case COMMENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_COMMENT);
            }
            case 772: break;
            case STATES: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STATES);
            }
            case 773: break;
            case COPY: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 774: break;
            default:
              {
                if ( yymoreStreams() ) {
             file = (File) files.pop();
             yypopStream();
           }
           else 
             return symbol(EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexScan <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        LexScan scanner = null;
        try {
          scanner = new LexScan( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
