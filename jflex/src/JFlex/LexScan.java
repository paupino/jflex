/* The following code was generated by JFlex 1.4.2_pre_Y on 5/26/08 9:19 PM */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * JFlex 1.4.1                                                             *
 * Copyright (C) 1998-2004  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

package JFlex;

import java_cup.runtime.Symbol;
import java.util.Vector;
import java.io.*;
import java.util.Stack;

/**
 * The lexer of JFlex.
 *
 * Generated by <a href="http://www.jflex.de/">JFlex</a>.
 *
 * @author Gerwin Klein
 * @version JFlex 1.4.1, $Revision$, $Date$
 */

public final class LexScan implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING_CONTENT = 16;
  public static final int REGEXPSTART = 8;
  public static final int MACROS = 6;
  public static final int STATELIST = 4;
  public static final int CTOR_ARG = 26;
  public static final int EATWSPNL = 24;
  public static final int CHARCLASS = 18;
  public static final int JAVA_CODE = 12;
  public static final int REGEXP = 10;
  public static final int YYINITIAL = 0;
  public static final int REPEATEXP = 22;
  public static final int COMMENT = 2;
  public static final int STATES = 14;
  public static final int COPY = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
     9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\21\1\22\1\10\1\13\2\11\1\12\16\21\4\0\1\10\1\74"+
    "\1\26\1\0\1\102\1\31\1\0\1\27\1\76\1\77\1\24\1\100"+
    "\1\15\1\105\1\14\1\25\1\7\1\62\2\7\2\3\1\63\1\60"+
    "\1\61\1\1\1\104\1\0\1\66\1\65\1\72\1\101\1\0\4\2"+
    "\1\67\1\71\10\20\1\70\13\20\1\16\1\4\1\17\1\103\1\20"+
    "\1\0\1\47\1\53\1\51\1\56\1\42\1\43\1\57\1\36\1\33"+
    "\1\54\1\64\1\45\1\52\1\34\1\40\1\55\1\20\1\37\1\50"+
    "\1\35\1\6\1\46\1\41\1\5\1\44\1\20\1\32\1\73\1\30"+
    "\1\75\6\21\1\23\32\21\2\0\4\20\4\0\1\20\2\0\1\21"+
    "\7\0\1\20\4\0\1\20\5\0\27\20\1\0\37\20\1\0\u013f\20"+
    "\31\0\162\20\4\0\14\20\16\0\5\20\11\0\1\20\21\0\130\21"+
    "\5\0\23\21\12\0\1\20\13\0\1\20\1\0\3\20\1\0\1\20"+
    "\1\0\24\20\1\0\54\20\1\0\46\20\1\0\5\20\4\0\202\20"+
    "\1\0\4\21\3\0\105\20\1\0\46\20\2\0\2\20\6\0\20\20"+
    "\41\0\46\20\2\0\1\20\7\0\47\20\11\0\21\21\1\0\27\21"+
    "\1\0\3\21\1\0\1\21\1\0\2\21\1\0\1\21\13\0\33\20"+
    "\5\0\3\20\15\0\4\21\14\0\6\21\13\0\32\20\5\0\13\20"+
    "\16\21\7\0\12\21\4\0\2\20\1\21\143\20\1\0\1\20\10\21"+
    "\1\0\6\21\2\20\2\21\1\0\4\21\2\20\12\21\3\20\2\0"+
    "\1\20\17\0\1\21\1\20\1\21\36\20\33\21\2\0\3\20\60\0"+
    "\46\20\13\21\1\20\u014f\0\3\21\66\20\2\0\1\21\1\20\20\21"+
    "\2\0\1\20\4\21\3\0\12\20\2\21\2\0\12\21\21\0\3\21"+
    "\1\0\10\20\2\0\2\20\2\0\26\20\1\0\7\20\1\0\1\20"+
    "\3\0\4\20\2\0\1\21\1\20\7\21\2\0\2\21\2\0\3\21"+
    "\11\0\1\21\4\0\2\20\1\0\3\20\2\21\2\0\12\21\4\20"+
    "\15\0\3\21\1\0\6\20\4\0\2\20\2\0\26\20\1\0\7\20"+
    "\1\0\2\20\1\0\2\20\1\0\2\20\2\0\1\21\1\0\5\21"+
    "\4\0\2\21\2\0\3\21\13\0\4\20\1\0\1\20\7\0\14\21"+
    "\3\20\14\0\3\21\1\0\11\20\1\0\3\20\1\0\26\20\1\0"+
    "\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\10\21\1\0"+
    "\3\21\1\0\3\21\2\0\1\20\17\0\2\20\2\21\2\0\12\21"+
    "\1\0\1\20\17\0\3\21\1\0\10\20\2\0\2\20\2\0\26\20"+
    "\1\0\7\20\1\0\2\20\1\0\5\20\2\0\1\21\1\20\6\21"+
    "\3\0\2\21\2\0\3\21\10\0\2\21\4\0\2\20\1\0\3\20"+
    "\4\0\12\21\1\0\1\20\20\0\1\21\1\20\1\0\6\20\3\0"+
    "\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0"+
    "\2\20\3\0\3\20\3\0\10\20\1\0\3\20\4\0\5\21\3\0"+
    "\3\21\1\0\4\21\11\0\1\21\17\0\11\21\11\0\1\20\7\0"+
    "\3\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0\12\20\1\0"+
    "\5\20\4\0\7\21\1\0\3\21\1\0\4\21\7\0\2\21\11\0"+
    "\2\20\4\0\12\21\22\0\2\21\1\0\10\20\1\0\3\20\1\0"+
    "\27\20\1\0\12\20\1\0\5\20\2\0\1\21\1\20\7\21\1\0"+
    "\3\21\1\0\4\21\7\0\2\21\7\0\1\20\1\0\2\20\4\0"+
    "\12\21\22\0\2\21\1\0\10\20\1\0\3\20\1\0\27\20\1\0"+
    "\20\20\4\0\6\21\2\0\3\21\1\0\4\21\11\0\1\21\10\0"+
    "\2\20\4\0\12\21\22\0\2\21\1\0\22\20\3\0\30\20\1\0"+
    "\11\20\1\0\1\20\2\0\7\20\3\0\1\21\4\0\6\21\1\0"+
    "\1\21\1\0\10\21\22\0\2\21\15\0\60\20\1\21\2\20\7\21"+
    "\4\0\10\20\10\21\1\0\12\21\47\0\2\20\1\0\1\20\2\0"+
    "\2\20\1\0\1\20\2\0\1\20\6\0\4\20\1\0\7\20\1\0"+
    "\3\20\1\0\1\20\1\0\1\20\2\0\2\20\1\0\4\20\1\21"+
    "\2\20\6\21\1\0\2\21\1\20\2\0\5\20\1\0\1\20\1\0"+
    "\6\21\2\0\12\21\2\0\2\20\42\0\1\20\27\0\2\21\6\0"+
    "\12\21\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21\10\20"+
    "\1\0\42\20\6\0\24\21\1\0\2\21\4\20\4\0\10\21\1\0"+
    "\44\21\11\0\1\21\71\0\42\20\1\0\5\20\1\0\2\20\1\0"+
    "\7\21\3\0\4\21\6\0\12\21\6\0\6\20\4\21\106\0\46\20"+
    "\12\0\51\20\7\0\132\20\5\0\104\20\5\0\122\20\6\0\7\20"+
    "\1\0\77\20\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20"+
    "\1\0\4\20\2\0\47\20\1\0\1\20\1\0\4\20\2\0\37\20"+
    "\1\0\1\20\1\0\4\20\2\0\7\20\1\0\1\20\1\0\4\20"+
    "\2\0\7\20\1\0\7\20\1\0\27\20\1\0\37\20\1\0\1\20"+
    "\1\0\4\20\2\0\7\20\1\0\47\20\1\0\23\20\16\0\11\21"+
    "\56\0\125\20\14\0\u026c\20\2\0\10\20\12\0\32\20\5\0\113\20"+
    "\3\0\3\20\17\0\15\20\1\0\4\20\3\21\13\0\22\20\3\21"+
    "\13\0\22\20\2\21\14\0\15\20\1\0\3\20\1\0\2\21\14\0"+
    "\64\20\40\21\3\0\1\20\3\0\2\20\1\21\2\0\12\21\41\0"+
    "\3\21\2\0\12\21\6\0\130\20\10\0\51\20\1\21\126\0\35\20"+
    "\3\0\14\21\4\0\14\21\12\0\12\21\36\20\2\0\5\20\u038b\0"+
    "\154\20\224\0\234\20\4\0\132\20\6\0\26\20\2\0\6\20\2\0"+
    "\46\20\2\0\6\20\2\0\10\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\37\20\2\0\65\20\1\0\7\20\1\0\1\20\3\0"+
    "\3\20\1\0\7\20\3\0\4\20\2\0\6\20\4\0\15\20\5\0"+
    "\3\20\1\0\7\20\17\0\4\21\30\0\2\11\5\21\20\0\2\20"+
    "\23\0\1\20\13\0\4\21\6\0\6\21\1\0\1\20\15\0\1\20"+
    "\40\0\22\20\36\0\15\21\4\0\1\21\3\0\6\21\27\0\1\20"+
    "\4\0\1\20\2\0\12\20\1\0\1\20\3\0\5\20\6\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\4\20\1\0\3\20\1\0\7\20"+
    "\3\0\3\20\5\0\5\20\26\0\44\20\u0e81\0\3\20\31\0\11\20"+
    "\6\21\1\0\5\20\2\0\5\20\4\0\126\20\2\0\2\21\2\0"+
    "\3\20\1\0\137\20\5\0\50\20\4\0\136\20\21\0\30\20\70\0"+
    "\20\20\u0200\0\u19b6\20\112\0\u51a6\20\132\0\u048d\20\u0773\0\u2ba4\20\u215c\0"+
    "\u012e\20\2\0\73\20\225\0\7\20\14\0\5\20\5\0\1\20\1\21"+
    "\12\20\1\0\15\20\1\0\5\20\1\0\1\20\1\0\2\20\1\0"+
    "\2\20\1\0\154\20\41\0\u016b\20\22\0\100\20\2\0\66\20\50\0"+
    "\15\20\3\0\20\21\20\0\4\21\17\0\2\20\30\0\3\20\31\0"+
    "\1\20\6\0\5\20\1\0\207\20\2\0\1\21\4\0\1\20\13\0"+
    "\12\21\7\0\32\20\4\0\1\20\1\0\32\20\12\0\132\20\3\0"+
    "\6\20\2\0\6\20\2\0\6\20\2\0\3\20\3\0\2\20\3\0"+
    "\2\20\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\17\0\1\1\2\3\1\1\1\2\3\4"+
    "\1\5\1\6\2\7\1\6\1\10\2\6\1\4\1\11"+
    "\1\12\1\6\1\11\1\13\1\4\1\14\1\15\2\16"+
    "\1\6\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\16\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\3\4\1\40\1\41\1\6\1\42"+
    "\1\43\1\44\1\4\2\45\1\46\1\16\1\47\1\50"+
    "\1\51\1\52\1\16\1\53\1\54\1\4\2\44\1\4"+
    "\1\55\1\4\1\56\1\13\1\57\1\60\3\0\1\61"+
    "\3\0\1\62\1\63\1\0\1\64\1\0\2\11\1\0"+
    "\15\11\3\0\1\65\1\11\1\66\1\11\1\0\1\67"+
    "\1\6\1\0\1\70\1\71\2\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\0\1\77\1\0\1\100\1\101"+
    "\4\0\2\102\10\0\1\103\1\104\2\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\3\0\1\113\5\0"+
    "\1\114\1\0\1\60\1\61\2\6\1\11\2\115\35\11"+
    "\3\0\2\116\1\11\2\117\1\11\1\0\1\71\1\0"+
    "\1\120\5\0\1\121\2\0\1\37\4\0\1\104\1\0"+
    "\1\122\1\123\2\124\3\0\2\11\1\125\24\11\1\126"+
    "\12\11\3\0\2\11\1\0\2\120\14\0\2\122\3\0"+
    "\20\11\1\127\3\11\1\130\10\11\1\131\6\11\1\132"+
    "\1\11\1\133\1\127\1\0\2\11\1\0\1\120\13\0"+
    "\1\122\5\0\11\11\1\0\1\11\1\134\5\11\1\135"+
    "\1\136\17\11\1\137\1\140\2\11\7\0\2\37\10\0"+
    "\2\141\3\0\11\11\1\142\11\11\1\143\4\11\1\144"+
    "\1\0\3\11\1\145\1\146\2\11\6\0\1\147\1\37"+
    "\3\0\1\37\6\0\2\150\4\0\1\140\1\11\1\151"+
    "\1\125\3\11\1\152\2\153\1\142\1\0\11\11\2\154"+
    "\2\11\1\155\1\11\2\156\1\11\1\157\6\0\1\37"+
    "\6\0\1\37\13\0\1\11\1\160\2\11\1\153\1\161"+
    "\1\153\1\142\1\0\2\11\1\162\2\11\1\163\3\11"+
    "\1\154\1\164\1\154\1\165\1\0\1\11\1\155\1\166"+
    "\1\156\2\167\1\156\4\0\1\170\1\171\2\37\4\0"+
    "\2\37\7\0\2\172\1\0\3\11\2\161\1\173\2\174"+
    "\1\0\1\11\1\0\5\11\2\164\1\0\1\11\2\167"+
    "\2\0\1\175\2\0\1\37\2\0\2\37\4\0\1\37"+
    "\2\0\2\37\7\0\2\176\1\11\1\161\1\0\1\173"+
    "\1\174\1\177\1\174\2\0\2\11\1\200\1\11\1\201"+
    "\1\202\2\203\1\164\1\0\1\204\1\0\2\204\3\0"+
    "\1\205\1\0\4\37\3\0\4\37\3\0\2\206\1\0"+
    "\1\176\1\207\1\176\1\210\2\177\2\0\2\11\1\200"+
    "\2\211\1\203\1\212\1\203\10\0\3\37\5\0\3\37"+
    "\1\0\2\213\1\0\2\207\1\177\3\0\2\11\1\211"+
    "\1\214\1\211\2\212\1\204\1\215\1\216\4\0\1\37"+
    "\3\0\1\37\2\217\1\207\1\0\1\162\1\0\1\162"+
    "\1\11\2\214\1\212\4\0\1\37\2\0\1\37\2\220"+
    "\1\214\4\0\1\221";

  private static int [] zzUnpackAction() {
    int [] result = new int[790];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u04ec\0\u064a\0\u0690\0\u04ec\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u04ec\0\u0a1e\0\u04ec\0\u0a64\0\u0aaa\0\u0af0\0\u0b36\0\u04ec"+
    "\0\u0b7c\0\u04ec\0\u0bc2\0\u04ec\0\u0c08\0\u0c4e\0\u0c94\0\u04ec"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u0cda"+
    "\0\u0d20\0\u0d66\0\u0dac\0\u04ec\0\u04ec\0\u0df2\0\u04ec\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u04ec\0\u0f0a\0\u04ec\0\u0f50\0\u0f50\0\u0b7c"+
    "\0\u04ec\0\u04ec\0\u0f96\0\u04ec\0\u0fdc\0\u1022\0\u1022\0\u04ec"+
    "\0\u1068\0\u04ec\0\u10ae\0\u04ec\0\u10f4\0\u04ec\0\u113a\0\u1180"+
    "\0\u04ec\0\u11c6\0\u120c\0\u1252\0\u1298\0\u05be\0\u04ec\0\u04ec"+
    "\0\u0604\0\u04ec\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u04ec\0\u1856"+
    "\0\u189c\0\u18e2\0\u09d8\0\u04ec\0\u1928\0\u196e\0\u04ec\0\u19b4"+
    "\0\u19fa\0\u1a40\0\u1a86\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec"+
    "\0\u0af0\0\u0c08\0\u1acc\0\u04ec\0\u1b12\0\u1b58\0\u0c08\0\u1b9e"+
    "\0\u0c94\0\u04ec\0\u1be4\0\u0d20\0\u0d66\0\u0dac\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u04ec\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u04ec\0\u0f50\0\u0b7c"+
    "\0\u1ea0\0\u04ec\0\u1022\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u10ae\0\u2044\0\u04ec\0\u12de\0\u04ec\0\u208a\0\u13b0\0\u04ec"+
    "\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba"+
    "\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e\0\u24a4\0\u24ea"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34\0\u04ec"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8\0\u2d1e\0\u04ec"+
    "\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2\0\u2f08\0\u04ec"+
    "\0\u2f4e\0\u2f94\0\u04ec\0\u1ee6\0\u04ec\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6"+
    "\0\u373c\0\u3782\0\u37c8\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10\0\u3b56"+
    "\0\u04ec\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u04ec\0\u3f2a"+
    "\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a"+
    "\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a"+
    "\0\u43d0\0\u4416\0\u445c\0\u1324\0\u44a2\0\u44e8\0\u452e\0\u1324"+
    "\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718\0\u475e"+
    "\0\u1324\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u1324"+
    "\0\u4948\0\u04ec\0\u04ec\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u2b7a"+
    "\0\u4aa6\0\u4aec\0\u4b32\0\u4b78\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90"+
    "\0\u4cd6\0\u4d1c\0\u4d62\0\u2f4e\0\u4da8\0\u4dee\0\u4e34\0\u4e7a"+
    "\0\u4ec0\0\u4f06\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u50aa"+
    "\0\u50f0\0\u5136\0\u517c\0\u51c2\0\u1324\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u1324\0\u1324\0\u5366\0\u53ac\0\u53f2\0\u5438"+
    "\0\u547e\0\u54c4\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668"+
    "\0\u56ae\0\u56f4\0\u573a\0\u1324\0\u04ec\0\u5780\0\u57c6\0\u580c"+
    "\0\u5852\0\u5898\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c"+
    "\0\u5a82\0\u5ac8\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c"+
    "\0\u4dee\0\u04ec\0\u5cb2\0\u5cf8\0\u5d3e\0\u5d84\0\u5dca\0\u5e10"+
    "\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28\0\u5f6e\0\u5fb4\0\u5ffa\0\u6040"+
    "\0\u6086\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270"+
    "\0\u1324\0\u62b6\0\u62fc\0\u6342\0\u6388\0\u1324\0\u63ce\0\u6414"+
    "\0\u645a\0\u64a0\0\u1324\0\u1324\0\u64e6\0\u2aa8\0\u652c\0\u6572"+
    "\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u6716\0\u675c\0\u67a2"+
    "\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946\0\u698c\0\u69d2"+
    "\0\u5c26\0\u04ec\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u1324\0\u6b30"+
    "\0\u1324\0\u1324\0\u6b76\0\u6bbc\0\u6c02\0\u1324\0\u6c48\0\u6c8e"+
    "\0\u6cd4\0\u6d1a\0\u6d60\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\u6ebe"+
    "\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee"+
    "\0\u7134\0\u717a\0\u71c0\0\u29d6\0\u04ec\0\u7206\0\u724c\0\u7292"+
    "\0\u72d8\0\u731e\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c\0\u74c2"+
    "\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac\0\u76f2"+
    "\0\u7738\0\u777e\0\u77c4\0\u780a\0\u7850\0\u7896\0\u78dc\0\u7922"+
    "\0\u7968\0\u79ae\0\u79f4\0\u7a3a\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52"+
    "\0\u7b98\0\u7bde\0\u7c24\0\u7c6a\0\u1324\0\u7cb0\0\u7cf6\0\u7d3c"+
    "\0\u7d82\0\u7dc8\0\u7e0e\0\u1324\0\u7e54\0\u7e9a\0\u7ee0\0\u1324"+
    "\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e\0\u8084\0\u80ca\0\u8110"+
    "\0\u04ec\0\u04ec\0\u8156\0\u819c\0\u81e2\0\u8228\0\u826e\0\u82b4"+
    "\0\u82fa\0\u8340\0\u8386\0\u83cc\0\u8412\0\u8458\0\u849e\0\u84e4"+
    "\0\u852a\0\u7850\0\u04ec\0\u8570\0\u85b6\0\u85fc\0\u8642\0\u8688"+
    "\0\u86ce\0\u8714\0\u875a\0\u87a0\0\u87e6\0\u882c\0\u8872\0\u88b8"+
    "\0\u88fe\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8"+
    "\0\u8b2e\0\u8b74\0\u8bba\0\u8c00\0\u04ec\0\u8c46\0\u8c8c\0\u8cd2"+
    "\0\u8d18\0\u8d5e\0\u8da4\0\u8dea\0\u8e30\0\u8e76\0\u8ebc\0\u8f02"+
    "\0\u8f48\0\u8f8e\0\u8fd4\0\u901a\0\u9060\0\u90a6\0\u90ec\0\u9132"+
    "\0\u9178\0\u91be\0\u9204\0\u924a\0\u9290\0\u92d6\0\u931c\0\u9362"+
    "\0\u93a8\0\u93ee\0\u9434\0\u947a\0\u94c0\0\u9506\0\u954c\0\u9592"+
    "\0\u95d8\0\u961e\0\u9664\0\u1324\0\u1324\0\u96aa\0\u96f0\0\u9736"+
    "\0\u977c\0\u97c2\0\u9808\0\u8aa2\0\u8ae8\0\u984e\0\u9894\0\u98da"+
    "\0\u04ec\0\u9920\0\u9966\0\u99ac\0\u99f2\0\u9a38\0\u9a7e\0\u9ac4"+
    "\0\u9b0a\0\u9b50\0\u9b96\0\u9bdc\0\u9c22\0\u9c68\0\u9cae\0\u9cf4"+
    "\0\u9204\0\u04ec\0\u9d3a\0\u9d80\0\u9dc6\0\u9e0c\0\u9e52\0\u9e98"+
    "\0\u9ede\0\u9f24\0\u9f6a\0\u9fb0\0\u9ff6\0\ua03c\0\ua082\0\ua0c8"+
    "\0\ua10e\0\ua154\0\ua19a\0\ua1e0\0\ua226\0\ua26c\0\ua2b2\0\ua2f8"+
    "\0\ua33e\0\ua384\0\ua3ca\0\ua410\0\ua456\0\ua49c\0\ua4e2\0\ua528"+
    "\0\ua56e\0\ua5b4\0\ua5fa\0\ua640\0\ua686\0\ua6cc\0\ua712\0\u9cf4"+
    "\0\u04ec\0\ua758\0\ua79e\0\ua7e4\0\ua82a\0\ua870\0\ua8b6\0\ua8fc"+
    "\0\ua942\0\ua988\0\ua9ce\0\uaa14\0\uaa5a\0\uaaa0\0\uaae6\0\ua1e0"+
    "\0\u04ec\0\u04ec\0\uab2c\0\uab72\0\uabb8\0\uabfe\0\uac44\0\uac8a"+
    "\0\uacd0\0\uad16\0\uad5c\0\ua758\0\u04ec\0\uada2\0\uade8\0\u04ec"+
    "\0\uae2e\0\u1324\0\uae74\0\uaeba\0\uaf00\0\uaf46\0\uaf8c\0\uafd2"+
    "\0\ub018\0\ub05e\0\ub0a4\0\ub0ea\0\ub130\0\ub176\0\u04ec\0\u1324"+
    "\0\ub1bc\0\ub202\0\ub248\0\ub28e\0\ub2d4\0\u04ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[790];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\22\2\23\1\24\7\22\1\23\5\22\1\25\54\22"+
    "\24\26\1\27\1\30\60\26\2\31\1\32\2\31\2\32"+
    "\1\31\1\33\1\34\1\35\1\34\1\31\1\36\2\31"+
    "\1\32\2\31\1\34\7\31\25\32\4\31\1\32\2\31"+
    "\3\32\10\31\1\32\5\31\1\37\2\31\2\37\1\31"+
    "\1\40\3\41\4\31\1\37\1\31\1\40\1\41\1\31"+
    "\1\42\3\31\1\43\1\31\25\37\4\31\1\37\1\44"+
    "\1\31\3\37\10\31\1\37\5\31\1\37\2\31\2\37"+
    "\1\31\1\45\3\41\4\31\1\37\1\31\1\45\1\41"+
    "\1\31\1\42\3\31\1\46\1\31\25\37\4\31\1\37"+
    "\1\44\1\31\3\37\10\31\1\37\13\31\4\47\6\31"+
    "\2\47\1\31\1\50\2\31\1\51\35\31\1\52\17\31"+
    "\4\53\1\54\3\53\1\55\1\56\1\57\1\56\1\60"+
    "\1\53\1\61\3\53\1\55\1\56\1\62\1\63\1\64"+
    "\3\53\1\65\33\53\1\66\4\53\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\2\53\25\100"+
    "\1\101\1\102\1\103\1\104\1\100\1\105\53\100\2\31"+
    "\1\37\2\31\2\37\1\31\4\106\1\31\1\107\2\31"+
    "\1\37\1\31\2\106\7\31\25\37\4\31\1\37\2\31"+
    "\3\37\1\110\7\31\1\37\3\31\4\111\1\112\4\111"+
    "\1\113\1\114\1\113\7\111\1\113\2\111\1\115\57\111"+
    "\4\53\1\54\3\53\3\116\1\117\2\53\1\120\1\121"+
    "\2\53\2\116\2\53\1\122\3\53\1\123\50\53\1\124"+
    "\1\53\1\125\11\126\2\127\1\130\7\126\1\127\5\126"+
    "\1\131\54\126\10\31\1\40\2\31\1\132\1\31\1\133"+
    "\4\31\1\40\5\31\1\134\65\31\4\135\6\31\2\135"+
    "\62\31\2\136\1\137\2\136\2\137\11\136\1\137\12\136"+
    "\25\137\4\136\1\137\2\136\3\137\10\136\1\137\3\136"+
    "\10\0\4\20\6\0\2\20\47\0\1\140\23\0\2\141"+
    "\1\142\7\0\1\141\62\0\11\22\2\23\1\24\7\22"+
    "\1\23\62\22\106\0\11\22\2\23\1\24\7\22\1\23"+
    "\5\22\1\143\54\22\24\26\1\144\1\145\104\26\1\146"+
    "\1\147\104\26\1\150\1\151\60\26\1\0\3\32\1\0"+
    "\3\32\10\0\4\32\7\0\32\32\2\0\3\32\10\0"+
    "\1\32\13\0\1\33\4\0\1\36\103\0\1\34\102\0"+
    "\1\36\76\0\3\37\1\0\3\37\10\0\4\37\7\0"+
    "\32\37\2\0\3\37\10\0\1\37\13\0\1\40\11\0"+
    "\1\40\74\0\3\41\7\0\1\41\106\0\1\152\1\153"+
    "\62\0\1\154\2\0\1\154\1\155\11\0\1\154\11\0"+
    "\1\156\1\157\1\160\1\161\4\154\1\162\1\163\1\164"+
    "\1\165\1\154\1\166\1\167\1\170\1\154\1\171\1\154"+
    "\1\172\1\173\1\154\1\174\1\175\1\176\1\0\1\154"+
    "\2\0\3\154\10\0\1\154\13\0\1\44\11\0\1\44"+
    "\73\0\1\45\11\0\1\45\6\0\1\177\56\0\1\154"+
    "\2\0\1\200\1\155\11\0\1\154\10\0\1\201\1\156"+
    "\1\157\1\160\1\161\4\154\1\162\1\163\1\164\1\165"+
    "\1\154\1\166\1\202\1\170\1\154\1\171\1\154\1\172"+
    "\1\173\1\154\1\174\1\175\1\176\1\0\1\154\2\0"+
    "\3\154\10\0\1\154\13\0\4\47\6\0\2\47\1\0"+
    "\1\203\2\0\1\51\35\0\1\52\43\0\1\204\1\205"+
    "\146\0\1\206\17\0\3\207\1\210\1\207\1\211\1\212"+
    "\1\213\3\207\1\0\20\207\1\214\1\215\1\207\1\216"+
    "\3\207\1\217\7\207\1\220\4\207\1\210\1\207\1\213"+
    "\1\210\22\207\10\0\1\55\3\221\1\60\1\0\1\61"+
    "\3\0\1\55\1\221\1\62\1\63\1\64\3\0\1\222"+
    "\40\0\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\12\0\4\221\1\60\1\0\1\61\3\0"+
    "\2\221\1\62\1\63\1\64\3\0\1\222\40\0\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\12\0\3\221\1\56\1\60\1\0\1\61\3\0\2\221"+
    "\1\62\1\63\1\64\3\0\1\222\40\0\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\106\0"+
    "\1\223\25\0\1\224\1\205\61\0\1\225\1\226\1\225"+
    "\1\0\2\226\1\225\1\227\7\0\1\226\1\0\1\227"+
    "\10\0\25\226\4\225\1\226\2\0\3\226\10\0\1\226"+
    "\71\0\1\230\27\0\1\231\1\232\1\233\1\232\6\0"+
    "\1\231\1\232\62\0\25\100\1\234\1\235\1\236\1\0"+
    "\1\100\1\0\77\100\1\237\1\240\60\100\4\235\1\241"+
    "\4\235\3\0\7\235\1\0\2\235\1\100\57\235\4\242"+
    "\1\243\4\242\3\0\7\242\1\0\3\242\1\0\56\242"+
    "\10\0\4\106\6\0\2\106\72\0\4\110\6\0\2\110"+
    "\62\0\4\111\1\0\4\111\3\0\7\111\1\0\2\111"+
    "\1\0\57\111\3\244\1\245\1\244\1\246\1\247\1\250"+
    "\3\244\1\0\12\244\1\251\5\244\1\252\1\253\1\244"+
    "\1\254\3\244\1\255\7\244\1\256\4\244\1\245\1\244"+
    "\1\250\1\245\22\244\13\0\1\113\102\0\4\257\2\0"+
    "\1\260\3\0\2\257\64\0\1\261\2\0\2\261\11\0"+
    "\1\261\12\0\25\261\4\0\1\261\2\0\3\261\10\0"+
    "\1\261\22\0\1\262\66\0\11\263\2\127\1\130\7\263"+
    "\1\127\73\263\2\127\1\130\7\263\1\127\4\263\1\264"+
    "\2\263\1\265\6\263\1\266\1\263\1\267\41\263\1\0"+
    "\1\270\1\0\1\270\3\0\1\270\1\271\11\0\1\271"+
    "\35\0\4\270\32\0\4\135\6\0\2\135\63\0\3\137"+
    "\1\0\3\137\1\272\7\0\4\137\7\0\32\137\2\0"+
    "\3\137\10\0\1\137\13\0\1\140\11\0\1\140\76\0"+
    "\1\141\72\0\13\143\1\273\72\143\24\26\1\144\1\0"+
    "\104\26\1\0\1\145\60\26\11\153\2\274\1\275\7\153"+
    "\1\274\62\153\1\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\32\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\1\154\1\276\30\154"+
    "\2\0\3\154\10\0\1\154\3\0\11\156\2\277\1\300"+
    "\7\156\1\277\62\156\1\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\154\1\301\15\154\1\302\4\154\1\303"+
    "\5\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\5\154\1\304\24\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\3\154\1\305\5\154\1\306\2\154\1\307"+
    "\15\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\1\310\2\154\10\0\4\154\7\0\5\154\1\311\24\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\1\154"+
    "\1\312\1\154\10\0\4\154\7\0\1\313\31\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\11\154\1\314\20\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\1\315\31\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\20\154\1\316\1\154"+
    "\1\317\7\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\2\154\1\320\3\154"+
    "\1\321\7\154\1\322\13\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\1\154\1\323\1\154\10\0\4\154"+
    "\7\0\2\154\1\324\1\325\1\154\1\326\4\154\1\327"+
    "\1\154\1\330\15\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\1\154\1\331\1\154\10\0\4\154\7\0"+
    "\11\154\1\332\20\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\1\154\1\333\1\154\10\0\4\154\7\0"+
    "\14\154\1\334\15\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\335"+
    "\22\154\2\0\3\154\10\0\1\154\56\0\1\336\105\0"+
    "\1\337\115\0\1\340\23\0\3\154\1\0\3\154\1\341"+
    "\7\0\2\154\1\342\1\154\7\0\15\154\1\343\14\154"+
    "\2\0\3\154\10\0\1\154\3\0\11\201\3\0\7\201"+
    "\1\0\62\201\1\0\3\154\1\0\3\154\1\344\7\0"+
    "\2\154\1\345\1\154\7\0\2\154\1\346\3\154\1\321"+
    "\7\154\1\322\13\154\2\0\3\154\10\0\1\154\3\0"+
    "\11\205\3\0\7\205\1\0\62\205\67\0\1\347\21\0"+
    "\1\350\3\0\1\350\50\0\1\350\1\0\2\350\23\0"+
    "\3\351\3\0\1\351\32\0\2\351\3\0\1\351\1\0"+
    "\1\351\1\0\1\351\2\0\1\351\1\0\4\351\3\0"+
    "\1\351\1\0\1\351\15\0\3\352\3\0\1\352\32\0"+
    "\2\352\3\0\1\352\1\0\1\352\1\0\1\352\2\0"+
    "\1\352\1\0\4\352\3\0\1\352\1\0\1\352\17\0"+
    "\1\210\3\0\1\210\50\0\1\210\1\0\2\210\30\0"+
    "\1\353\36\0\1\354\6\0\1\355\1\0\1\356\30\0"+
    "\1\225\1\0\1\225\3\0\1\225\50\0\4\225\23\0"+
    "\3\226\1\0\3\226\1\357\7\0\4\226\4\0\1\360"+
    "\2\0\32\226\2\0\3\226\10\0\1\226\72\0\1\361"+
    "\31\0\1\232\72\0\24\237\1\362\61\237\11\240\2\363"+
    "\1\100\7\240\1\363\62\240\11\235\3\0\7\235\1\0"+
    "\62\235\27\0\1\100\56\0\3\242\1\364\1\365\1\242"+
    "\1\366\1\367\1\242\3\0\7\242\1\0\34\242\1\364"+
    "\1\242\1\367\1\364\22\242\3\0\1\370\3\0\1\370"+
    "\50\0\1\370\1\0\2\370\23\0\3\371\3\0\1\371"+
    "\32\0\2\371\3\0\1\371\1\0\1\371\1\0\1\371"+
    "\2\0\1\371\1\0\4\371\3\0\1\371\1\0\1\371"+
    "\15\0\3\372\3\0\1\372\32\0\2\372\3\0\1\372"+
    "\1\0\1\372\1\0\1\372\2\0\1\372\1\0\4\372"+
    "\3\0\1\372\1\0\1\372\17\0\1\245\3\0\1\245"+
    "\50\0\1\245\1\0\2\245\23\0\3\261\1\0\3\261"+
    "\10\0\4\261\4\0\1\373\2\0\32\261\2\0\3\261"+
    "\10\0\1\261\3\0\11\264\2\374\1\375\7\264\1\374"+
    "\62\264\11\263\2\127\1\130\7\263\1\127\10\263\1\376"+
    "\62\263\2\127\1\130\7\263\1\127\14\263\1\377\56\263"+
    "\2\127\1\130\7\263\1\127\20\263\1\u0100\41\263\1\0"+
    "\1\270\1\0\1\270\3\0\1\270\50\0\4\270\32\0"+
    "\1\272\11\0\1\272\64\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\u0101\31\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\1\u0102"+
    "\1\154\1\u0103\13\154\1\u0104\13\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\22\154\1\u0105\7\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\1\154\1\u0106"+
    "\30\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\2\154\1\u0107\27\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\4\154\1\u0108\25\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\22\154\1\u0109\7\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\20\154\1\u010a"+
    "\11\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\2\154\1\u010b\27\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\10\154\1\u010c\21\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\1\154\1\u010d\10\154\1\u010e\17\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\1\154\1\u010f\30\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u0110"+
    "\2\154\1\u0111\17\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\1\154\1\u0112"+
    "\30\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\15\154\1\u0113\14\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\u0114\31\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\14\154"+
    "\1\u0115\15\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\1\u0116\31\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\14\154\1\u0117\15\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\22\154\1\u0118\7\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\5\154\1\u0119"+
    "\24\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\14\154\1\u011a\15\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\12\154\1\u011b\17\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\14\154\1\u011c\15\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\15\154\1\u011d"+
    "\14\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\10\154\1\u011e\21\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\14\154\1\u011f\15\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\20\154\1\u0120\11\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\16\154\1\u0121"+
    "\13\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\20\154\1\u0122\11\154\2\0"+
    "\3\154\10\0\1\154\36\0\1\u0123\105\0\1\u0124\125\0"+
    "\1\u0125\42\0\1\341\11\0\1\341\64\0\3\154\1\0"+
    "\3\154\1\341\7\0\2\154\1\342\1\154\7\0\32\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\2\154\1\u0126\27\154\2\0\3\154"+
    "\10\0\1\154\13\0\1\344\11\0\1\344\64\0\3\154"+
    "\1\0\3\154\1\344\7\0\2\154\1\345\1\154\7\0"+
    "\32\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\14\154\1\u0127\15\154\2\0"+
    "\3\154\10\0\1\154\73\0\1\u0128\16\0\3\u0129\3\0"+
    "\1\u0129\32\0\2\u0129\3\0\1\u0129\1\0\1\u0129\1\0"+
    "\1\u0129\2\0\1\u0129\1\0\4\u0129\3\0\1\u0129\1\0"+
    "\1\u0129\15\0\3\u012a\3\0\1\u012a\32\0\2\u012a\3\0"+
    "\1\u012a\1\0\1\u012a\1\0\1\u012a\2\0\1\u012a\1\0"+
    "\4\u012a\3\0\1\u012a\1\0\1\u012a\71\0\1\u012b\70\0"+
    "\1\u012c\1\0\1\u012d\110\0\1\u012e\73\0\1\u012f\62\0"+
    "\1\357\11\0\1\357\5\0\1\360\145\0\1\u0130\15\0"+
    "\24\237\1\362\1\100\60\237\13\363\1\100\11\363\1\u0131"+
    "\1\u0132\1\u0133\1\240\1\363\1\240\53\363\3\0\1\242"+
    "\3\0\1\242\17\0\1\100\30\0\1\242\1\0\2\242"+
    "\26\0\1\u0134\1\0\1\u0135\20\0\1\100\57\0\3\u0136"+
    "\3\0\1\u0136\17\0\1\100\12\0\2\u0136\3\0\1\u0136"+
    "\1\0\1\u0136\1\0\1\u0136\2\0\1\u0136\1\0\4\u0136"+
    "\3\0\1\u0136\1\0\1\u0136\17\0\1\364\3\0\1\364"+
    "\17\0\1\100\30\0\1\364\1\0\2\364\23\0\3\u0137"+
    "\3\0\1\u0137\32\0\2\u0137\3\0\1\u0137\1\0\1\u0137"+
    "\1\0\1\u0137\2\0\1\u0137\1\0\4\u0137\3\0\1\u0137"+
    "\1\0\1\u0137\15\0\3\u0138\3\0\1\u0138\32\0\2\u0138"+
    "\3\0\1\u0138\1\0\1\u0138\1\0\1\u0138\2\0\1\u0138"+
    "\1\0\4\u0138\3\0\1\u0138\1\0\1\u0138\14\0\11\263"+
    "\2\127\1\130\7\263\1\127\7\263\1\u0139\63\263\2\127"+
    "\1\130\7\263\1\127\17\263\1\u013a\53\263\2\127\1\130"+
    "\7\263\1\127\21\263\1\u013b\40\263\1\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\16\154\1\u013c\13\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\2\154\1\u013d\27\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\6\154\1\u013e\1\u013f\22\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\12\154"+
    "\1\u0140\17\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\12\154\1\u0141\17\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\5\154\1\u0142\24\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\1\154\1\u0143\1\154"+
    "\10\0\4\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\5\154"+
    "\1\u0144\24\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\7\154\1\u0145\22\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\12\154\1\u0146\17\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\7\154\1\u0147\22\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\6\0\1\156"+
    "\2\154\1\u0148\10\154\1\u0149\2\154\1\u014a\13\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\16\154\1\u014b\13\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\12\154\1\u014c\17\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\14\154\1\u014d"+
    "\15\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\5\154\1\u014e\24\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\7\154\1\u014f\22\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\7\154\1\u0150\22\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\2\154\1\u0151"+
    "\27\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\22\154\1\u0152\7\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\154\1\u0153\30\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\2\154\1\u0154\27\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\1\154\1\u0155"+
    "\30\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\15\154\1\u0156\5\154\1\u0157"+
    "\6\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\4\154\1\u0158\25\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\4\154\1\u0159\25\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\1\154\1\u015a\1\154\10\0"+
    "\4\154\7\0\32\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\15\154\1\u015b"+
    "\14\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\7\154\1\u015c\22\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\10\154\1\u015d\21\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\16\154\1\u015e\13\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\12\154\1\u015f"+
    "\17\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\31\154\1\u0160\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\1\154\1\u0161\1\154"+
    "\10\0\4\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\40\0\1\u0162\105\0\1\u0163\103\0\1\u0164\53\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\14\154\1\u0165\15\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\1\154\1\u0153\1\u0166\27\154\2\0"+
    "\3\154\10\0\1\154\74\0\1\u0167\15\0\3\u0168\3\0"+
    "\1\u0168\32\0\2\u0168\3\0\1\u0168\1\0\1\u0168\1\0"+
    "\1\u0168\2\0\1\u0168\1\0\4\u0168\3\0\1\u0168\1\0"+
    "\1\u0168\71\0\1\u0169\71\0\1\u016a\101\0\1\u016b\112\0"+
    "\1\u016c\122\0\1\u016d\117\0\1\u016e\14\0\13\363\1\100"+
    "\10\363\1\u016f\1\240\60\363\4\u0132\1\u0170\4\u0132\2\363"+
    "\1\100\7\u0132\1\363\2\u0132\1\363\57\u0132\4\u0171\1\u0172"+
    "\4\u0171\2\363\1\100\7\u0171\1\363\3\u0171\1\240\56\u0171"+
    "\4\0\1\u0134\1\0\1\u0135\100\0\3\u0136\3\0\1\u0136"+
    "\32\0\2\u0136\3\0\1\u0136\1\0\1\u0136\1\0\1\u0136"+
    "\2\0\1\u0136\1\0\4\u0136\3\0\1\u0136\1\0\1\u0136"+
    "\15\0\3\u0173\3\0\1\u0173\32\0\2\u0173\3\0\1\u0173"+
    "\1\0\1\u0173\1\0\1\u0173\2\0\1\u0173\1\0\4\u0173"+
    "\3\0\1\u0173\1\0\1\u0173\15\0\3\u0174\3\0\1\u0174"+
    "\32\0\2\u0174\3\0\1\u0174\1\0\1\u0174\1\0\1\u0174"+
    "\2\0\1\u0174\1\0\4\u0174\3\0\1\u0174\1\0\1\u0174"+
    "\14\0\11\263\2\127\1\130\7\263\1\127\11\263\1\u0175"+
    "\61\263\2\127\1\130\7\263\1\127\4\263\1\u0176\4\263"+
    "\1\u0177\10\263\1\u0178\50\263\2\127\1\130\7\263\1\127"+
    "\16\263\1\u0179\43\263\1\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\5\154\1\u017a\24\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\6\0"+
    "\1\156\2\154\1\u017b\27\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\4\154"+
    "\1\u017c\25\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\24\154\1\u017d\5\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\1\154"+
    "\1\u017e\1\154\10\0\4\154\7\0\32\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\7\154\1\u017f\22\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\4\154"+
    "\1\u0180\25\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\1\154\1\u0181\30\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\6\154\1\u0182\23\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\1\u0183\7\0"+
    "\2\154\1\u0184\1\154\7\0\32\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\7\154\1\u0185\22\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\1\154\1\u0186"+
    "\30\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\3\154\1\u0187\26\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\14\154\1\u0188\15\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\12\154\1\u0189\17\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\2\154\1\u018a"+
    "\27\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\12\154\1\u018b\17\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\10\154\1\u018c\21\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\1\u018d\2\154\10\0\4\154"+
    "\7\0\32\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\4\154\1\u018e\25\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\4\154\1\u018f\25\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\23\154\1\u0190\6\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\16\154"+
    "\1\u0191\13\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\7\154\1\u0192\22\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\11\154\1\u0193\20\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\7\154\1\u0194\22\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\14\154"+
    "\1\u0195\15\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\17\154\1\u0196\12\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\15\154\1\u0197\14\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\12\154\1\u0198\17\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\7\154"+
    "\1\u0199\22\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\16\154\1\u019a\13\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\1\u019b\31\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\24\154\1\u019c\5\154\2\0\3\154\10\0\1\154\40\0"+
    "\1\u019d\51\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\2\154\1\u019e\27\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u019f"+
    "\22\154\2\0\3\154\10\0\1\154\75\0\1\u01a0\55\0"+
    "\1\u01a1\105\0\1\u01a2\100\0\1\u01a3\105\0\1\u01a4\103\0"+
    "\1\u01a5\144\0\1\u01a6\13\0\11\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\61\u016f\11\u0132\2\363\1\100\7\u0132\1\363"+
    "\62\u0132\11\240\2\363\1\100\7\240\1\363\3\240\1\363"+
    "\56\240\3\u0171\1\u01aa\1\u01ab\1\u0171\1\u01ac\1\u01ad\1\u0171"+
    "\2\363\1\100\7\u0171\1\363\34\u0171\1\u01aa\1\u0171\1\u01ad"+
    "\1\u01aa\22\u0171\1\0\3\u01ae\3\0\1\u01ae\32\0\2\u01ae"+
    "\3\0\1\u01ae\1\0\1\u01ae\1\0\1\u01ae\2\0\1\u01ae"+
    "\1\0\4\u01ae\3\0\1\u01ae\1\0\1\u01ae\14\0\11\263"+
    "\2\127\1\130\7\263\1\127\4\263\1\u01af\4\263\1\u01b0"+
    "\50\263\11\u0176\2\u01b1\1\u01b2\7\u0176\1\u01b1\62\u0176\11\263"+
    "\2\127\1\130\7\263\1\127\12\263\1\u01b3\60\263\2\127"+
    "\1\130\7\263\1\127\23\263\1\u01b4\43\263\1\u01b5\3\263"+
    "\2\127\1\130\7\263\1\127\62\263\1\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\23\154\1\u01b6\6\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\3\154\1\u01b7\26\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\14\154\1\u01b8\15\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u01b9"+
    "\22\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\23\154\1\u01ba\6\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\17\154\1\u01bb\12\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\7\154\1\u01bc\22\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\1\u01bd\31\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\15\154\1\u01be\14\154\2\0\3\154"+
    "\10\0\1\154\5\0\1\u01bf\2\0\2\u01bf\1\0\1\u0183"+
    "\7\0\1\u01bf\1\0\1\u0183\10\0\25\u01bf\4\0\1\u01bf"+
    "\2\0\3\u01bf\10\0\1\u01bf\4\0\1\154\1\u01bf\1\154"+
    "\1\0\2\u01bf\1\154\1\u0183\7\0\1\u01bf\1\154\1\u0184"+
    "\1\154\7\0\25\u01bf\4\154\1\u01bf\2\0\3\u01bf\10\0"+
    "\1\u01bf\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\23\154\1\u01c0\6\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\4\154\1\u01c1"+
    "\25\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\12\154\1\u01c2\17\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\5\154\1\u01c3\24\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\1\u01c4\31\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\2\154\1\u01c5\27\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\14\154\1\u01c6\15\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\1\u01c7\31\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\14\154\1\u01c8"+
    "\15\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\3\154\1\u01c9\26\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\4\154\1\u01ca\25\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\17\154\1\u01cb\12\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\20\154\1\u01cc"+
    "\11\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\4\154\1\u01cd\25\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\154\1\u01ce\30\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u01cf\7\0\2\154"+
    "\1\u01d0\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\7\154"+
    "\1\u01d1\22\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\4\154\1\u01d2\25\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\21\154\1\u01d3\10\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\16\154\1\u01d4\13\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\7\154"+
    "\1\u01d5\22\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\1\344\7\0\2\154\1\345\1\154\7\0"+
    "\15\154\1\u01d6\14\154\2\0\3\154\10\0\1\154\75\0"+
    "\1\u01d7\52\0\1\u01d8\105\0\1\u01d9\110\0\1\u01da\100\0"+
    "\1\u01db\105\0\1\u01dc\142\0\1\u01dd\13\0\13\u01a7\1\u01a8"+
    "\10\u01a7\1\u01de\1\u01df\1\u01e0\1\u01e1\1\u016f\1\u01a7\1\u016f"+
    "\53\u01a7\24\u01a8\1\u01e2\1\u01e3\1\u01e4\1\u01e5\1\237\1\u01a8"+
    "\1\237\53\u01a8\11\u016f\2\u01a7\1\u01a8\7\u016f\1\u01a7\1\u01a9"+
    "\1\363\60\u016f\3\240\1\u0171\3\240\1\u0171\1\240\2\363"+
    "\1\100\7\240\1\363\3\240\1\363\30\240\1\u0171\1\240"+
    "\2\u0171\26\240\1\u01e6\1\240\1\u01e7\2\240\2\363\1\100"+
    "\7\240\1\363\3\240\1\363\57\240\3\u01e8\3\240\1\u01e8"+
    "\1\240\2\363\1\100\7\240\1\363\3\240\1\363\12\240"+
    "\2\u01e8\3\240\1\u01e8\1\240\1\u01e8\1\240\1\u01e8\2\240"+
    "\1\u01e8\1\240\4\u01e8\3\240\1\u01e8\1\240\1\u01e8\17\240"+
    "\1\u01aa\3\240\1\u01aa\1\240\2\363\1\100\7\240\1\363"+
    "\3\240\1\363\30\240\1\u01aa\1\240\2\u01aa\22\240\1\0"+
    "\3\242\3\0\1\242\32\0\2\242\3\0\1\242\1\0"+
    "\1\242\1\0\1\242\2\0\1\242\1\0\4\242\3\0"+
    "\1\242\1\0\1\242\14\0\11\u01af\2\u01e9\1\u01ea\7\u01af"+
    "\1\u01e9\62\u01af\11\263\2\127\1\130\7\263\1\127\12\263"+
    "\1\u01eb\60\263\2\127\1\130\7\263\1\127\13\263\1\u01ec"+
    "\57\263\2\127\1\130\7\263\1\127\21\263\1\u01ed\51\263"+
    "\2\127\1\130\7\263\1\127\11\263\1\u01ee\50\263\1\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u01ef"+
    "\22\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\4\154\1\u01f0\25\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\22\154\1\u01f1\7\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\4\154\1\u01f2\25\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u01f3"+
    "\22\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\7\154\1\u01f4\22\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\16\154\1\u01f5\13\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\1\u01f6\2\154\10\0\4\154"+
    "\7\0\32\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\1\u01f7\7\0\2\154\1\u01f8\1\154\7\0"+
    "\32\154\2\0\3\154\10\0\1\154\4\0\3\u01bf\1\0"+
    "\3\u01bf\1\u01f9\3\0\1\u0183\1\0\1\u01fa\1\0\4\u01bf"+
    "\7\0\32\u01bf\2\0\3\u01bf\10\0\1\u01bf\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\15\154\1\u01fb\14\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\5\154\1\u01fc\24\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\6\0\1\156\32\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\15\154\1\u01fd"+
    "\14\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\5\154\1\u01fe\24\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\3\154\1\u01ff\26\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\16\154\1\u0200\13\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\13\154\1\u0201"+
    "\16\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\12\154\1\u0202\17\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\4\154\1\u0203\25\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u0204\7\0\2\154"+
    "\1\u0205\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\1\154\1\u0206\1\154\10\0\4\154"+
    "\7\0\32\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\24\154\1\u0207\5\154"+
    "\2\0\3\154\10\0\1\154\5\0\1\u0208\2\0\2\u0208"+
    "\1\0\1\u01cf\7\0\1\u0208\1\0\1\u01cf\10\0\25\u0208"+
    "\4\0\1\u0208\2\0\3\u0208\10\0\1\u0208\4\0\1\154"+
    "\1\u0208\1\154\1\0\2\u0208\1\154\1\u01cf\7\0\1\u0208"+
    "\1\154\1\u01d0\1\154\7\0\25\u0208\4\154\1\u0208\2\0"+
    "\3\u0208\10\0\1\u0208\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\15\154\1\u0209\14\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u020a\7\0\2\154"+
    "\1\u020b\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\1\341\7\0\2\154\1\342"+
    "\1\154\7\0\15\154\1\u020c\14\154\2\0\3\154\10\0"+
    "\1\154\13\0\4\u01d7\6\0\2\u01d7\6\0\1\u020d\124\0"+
    "\1\u020e\105\0\1\u020f\73\0\1\u0210\110\0\1\u0211\147\0"+
    "\1\u0212\11\0\4\u0213\6\0\2\u0213\62\0\13\u01a7\1\u01a8"+
    "\10\u01a7\1\u01de\1\u0214\1\u01e0\1\u01e1\1\u016f\1\u01a7\1\u016f"+
    "\66\u01a7\1\u01a8\10\u01a7\1\u0215\1\u016f\60\u01a7\4\u01e0\1\u0216"+
    "\4\u01e0\2\u01a7\1\u01a8\7\u01e0\1\u01a7\1\u0217\1\u01e0\1\u01a7"+
    "\57\u01e0\4\u0218\1\u0219\4\u0218\2\u01a7\1\u01a8\7\u0218\1\u01a7"+
    "\1\u021a\2\u0218\1\u016f\56\u0218\24\u01a8\1\u01e2\1\u021b\1\u01e4"+
    "\1\u01e5\1\237\1\u01a8\1\237\77\u01a8\1\u021c\1\u016f\60\u01a8"+
    "\4\u01e4\1\u021d\4\u01e4\3\237\7\u01e4\1\237\1\u021e\1\u01e4"+
    "\1\u01a8\57\u01e4\4\u021f\1\u0220\4\u021f\3\237\7\u021f\1\237"+
    "\1\u0221\2\u021f\1\237\56\u021f\4\240\1\u01e6\1\240\1\u01e7"+
    "\2\240\2\363\1\100\7\240\1\363\63\240\3\u01e8\3\240"+
    "\1\u01e8\1\240\2\363\1\100\7\240\1\363\16\240\2\u01e8"+
    "\3\240\1\u01e8\1\240\1\u01e8\1\240\1\u01e8\2\240\1\u01e8"+
    "\1\240\4\u01e8\3\240\1\u01e8\1\240\1\u01e8\15\240\3\u0222"+
    "\3\240\1\u0222\1\240\2\363\1\100\7\240\1\363\16\240"+
    "\2\u0222\3\240\1\u0222\1\240\1\u0222\1\240\1\u0222\2\240"+
    "\1\u0222\1\240\4\u0222\3\240\1\u0222\1\240\1\u0222\14\240"+
    "\11\263\2\127\1\130\7\263\1\127\13\263\1\u0223\57\263"+
    "\2\127\1\130\7\263\1\127\14\263\1\u0224\56\263\2\127"+
    "\1\130\7\263\1\127\4\263\1\u0225\66\263\2\127\1\130"+
    "\7\263\1\127\12\263\1\u0226\47\263\1\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\5\154\1\u0227\24\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\1\u0228"+
    "\7\0\2\154\1\u0228\1\154\7\0\32\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\1\154\1\u0229\30\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\14\154"+
    "\1\u022a\15\154\2\0\3\154\10\0\1\154\3\0\2\u022b"+
    "\1\u022c\2\u022b\2\u022c\1\u022b\1\u01f7\3\0\4\u022b\1\u022c"+
    "\1\u022b\1\u01f7\1\0\7\u022b\25\u022c\4\u022b\1\u022c\2\u022b"+
    "\3\u022c\10\u022b\1\u022c\4\u022b\1\u022d\1\u022c\1\u022d\1\u022b"+
    "\2\u022c\1\u022d\1\u01f7\3\0\4\u022b\1\u022c\1\u022d\1\u01f8"+
    "\1\154\7\u022b\25\u022c\4\u022d\1\u022c\2\u022b\3\u022c\10\u022b"+
    "\1\u022c\3\u022b\10\0\1\u01f9\3\0\1\u0183\1\0\1\u01fa"+
    "\3\0\1\u01f9\73\0\1\u01fa\6\0\1\u022e\2\0\1\u01fa"+
    "\64\0\3\154\1\0\3\154\1\u022f\7\0\2\154\1\u0230"+
    "\1\154\7\0\32\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\6\154\1\u0231"+
    "\23\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\7\154\1\u0232\22\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\1\154\1\u0233\30\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\4\154\1\u0234\25\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\2\154\1\u0235"+
    "\27\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\14\154\1\u0236\15\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\5\154\1\u0237\24\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\10\0\4\154\7\0"+
    "\5\154\1\u0238\24\154\2\0\3\154\10\0\1\154\3\0"+
    "\2\u0239\1\u023a\2\u0239\2\u023a\1\u0239\1\u0204\3\0\4\u0239"+
    "\1\u023a\1\u0239\1\u0204\1\0\7\u0239\25\u023a\4\u0239\1\u023a"+
    "\2\u0239\3\u023a\10\u0239\1\u023a\4\u0239\1\u023b\1\u023a\1\u023b"+
    "\1\u0239\2\u023a\1\u023b\1\u0204\3\0\4\u0239\1\u023a\1\u023b"+
    "\1\u0205\1\154\7\u0239\25\u023a\4\u023b\1\u023a\2\u0239\3\u023a"+
    "\10\u0239\1\u023a\3\u0239\1\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\24\154\1\u023c\5\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u023d\7\0\2\154"+
    "\1\u023e\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\u0208\1\0\3\u0208\1\u023f\7\0\4\u0208\7\0"+
    "\32\u0208\2\0\3\u0208\10\0\1\u0208\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\15\154\1\u0240\14\154\2\0"+
    "\3\154\10\0\1\154\3\0\1\u0241\1\u0242\1\u0241\1\u0242"+
    "\3\u0241\1\u0242\1\u020a\3\0\6\u0241\1\u020a\1\0\34\u0241"+
    "\4\u0242\23\u0241\1\u0243\1\u0244\1\u0243\1\u0241\2\u0244\1\u0243"+
    "\1\u020a\3\0\4\u0241\2\u0244\1\u020b\1\154\7\u0241\25\u0244"+
    "\4\u0243\1\u0244\2\u0241\3\u0244\10\u0241\1\u0244\3\u0241\47\0"+
    "\1\u0245\105\0\1\u0246\142\0\1\u0247\40\0\1\u0248\65\0"+
    "\1\u0249\76\0\4\u0213\6\0\2\u0213\6\0\1\u024a\53\0"+
    "\13\363\1\100\10\363\1\u01a7\1\u0131\1\u024b\1\u024c\56\363"+
    "\11\u016f\2\u01a7\1\u01a8\7\u016f\1\u01a7\1\u01a9\1\u01a7\60\u016f"+
    "\11\u01e0\2\u01a7\1\u01a8\7\u01e0\1\u01a7\1\u0217\65\u01e0\1\u0216"+
    "\4\u01e0\2\u01a7\1\u01a8\7\u01e0\1\u01a7\1\u0217\1\u024b\1\u01a7"+
    "\57\u01e0\11\u016f\2\u01a7\1\u01a8\7\u016f\1\u01a7\1\u01a9\2\u016f"+
    "\1\u01a7\56\u016f\3\u0218\1\u024d\1\u024e\1\u0218\1\u024f\1\u0250"+
    "\1\u0218\2\u01a7\1\u01a8\7\u0218\1\u01a7\1\u021a\33\u0218\1\u024d"+
    "\1\u0218\1\u0250\1\u024d\22\u0218\11\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\1\363\1\u016f\1\u01a7\56\u016f\24\100\1\u01a8"+
    "\1\u0131\1\u0251\1\u0252\56\100\24\237\1\362\1\u01a8\60\237"+
    "\11\u01e4\3\237\7\u01e4\1\237\1\u021e\65\u01e4\1\u021d\4\u01e4"+
    "\3\237\7\u01e4\1\237\1\u021e\1\u0251\1\u01a8\57\u01e4\24\237"+
    "\1\362\2\237\1\u01a8\56\237\3\u021f\1\u0253\1\u0254\1\u021f"+
    "\1\u0255\1\u0256\1\u021f\3\237\7\u021f\1\237\1\u0221\33\u021f"+
    "\1\u0253\1\u021f\1\u0256\1\u0253\22\u021f\24\237\1\362\1\100"+
    "\1\237\1\u01a8\56\237\1\240\3\u0257\3\240\1\u0257\1\240"+
    "\2\363\1\100\7\240\1\363\16\240\2\u0257\3\240\1\u0257"+
    "\1\240\1\u0257\1\240\1\u0257\2\240\1\u0257\1\240\4\u0257"+
    "\3\240\1\u0257\1\240\1\u0257\14\240\11\263\2\127\1\130"+
    "\7\263\1\127\14\263\1\u0258\56\263\2\127\1\130\7\263"+
    "\1\127\15\263\1\u0259\44\263\11\u0225\2\u025a\1\u025b\7\u0225"+
    "\1\u025a\62\u0225\11\263\2\127\1\130\7\263\1\127\13\263"+
    "\1\u025c\46\263\1\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\6\154\1\u025d\23\154\2\0\3\154\10\0\1\154"+
    "\3\0\13\u0228\1\0\72\u0228\1\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\2\154\1\u025e\27\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\15\154\1\u025f\14\154\2\0\3\154\10\0\1\154"+
    "\3\0\11\u022b\3\0\7\u022b\1\0\63\u022b\3\u022c\1\u022b"+
    "\3\u022c\1\u0260\3\0\2\u01f7\2\u022b\3\u022c\1\u0261\7\u022b"+
    "\32\u022c\2\u022b\3\u022c\10\u022b\1\u022c\4\u022b\3\u022d\1\u022b"+
    "\3\u022d\1\u022b\3\0\4\u022b\3\u022d\1\154\7\u022b\32\u022d"+
    "\2\u022b\3\u022d\10\u022b\1\u022d\3\u022b\10\0\1\u022e\5\0"+
    "\1\u01fa\3\0\1\u022e\65\0\1\u0262\2\0\2\u0262\1\0"+
    "\1\u022f\7\0\1\u0262\1\0\1\u022f\10\0\25\u0262\4\0"+
    "\1\u0262\2\0\3\u0262\10\0\1\u0262\4\0\1\154\1\u0262"+
    "\1\154\1\0\2\u0262\1\154\1\u022f\7\0\1\u0262\1\154"+
    "\1\u0230\1\154\7\0\25\u0262\4\154\1\u0262\2\0\3\u0262"+
    "\10\0\1\u0262\4\0\3\154\1\0\3\154\1\u0263\7\0"+
    "\2\154\1\u0264\1\154\6\0\1\156\32\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\1\u0265\7\0"+
    "\2\154\1\u0266\1\154\7\0\32\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u0267\7\0\2\154"+
    "\1\u0268\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\4\0\3\154\1\0\3\154\10\0\4\154\7\0\5\154"+
    "\1\u0269\24\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\2\154\1\u026a\27\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\1\154\1\u026b\30\154\2\0\3\154"+
    "\10\0\1\154\4\0\3\154\1\0\3\154\10\0\4\154"+
    "\7\0\4\154\1\u026c\25\154\2\0\3\154\10\0\1\154"+
    "\3\0\11\u0239\3\0\7\u0239\1\0\63\u0239\3\u023a\1\u0239"+
    "\3\u023a\1\u026d\3\0\1\u0204\3\u0239\3\u023a\1\u026e\7\u0239"+
    "\32\u023a\2\u0239\3\u023a\10\u0239\1\u023a\4\u0239\3\u023b\1\u0239"+
    "\3\u023b\1\u0239\3\0\4\u0239\3\u023b\1\154\7\u0239\32\u023b"+
    "\2\u0239\3\u023b\10\u0239\1\u023b\3\u0239\2\0\1\u026f\2\0"+
    "\2\u026f\1\0\1\u023d\7\0\1\u026f\1\0\1\u023d\10\0"+
    "\25\u026f\4\0\1\u026f\2\0\3\u026f\10\0\1\u026f\4\0"+
    "\1\154\1\u0270\1\154\1\0\2\u0270\1\154\1\u023d\7\0"+
    "\1\u0270\1\154\1\u023e\1\154\7\0\25\u0270\4\154\1\u0270"+
    "\2\0\3\u0270\10\0\1\u0270\13\0\1\u023f\11\0\1\u023f"+
    "\63\0\11\u0241\3\0\7\u0241\1\0\63\u0241\1\u0242\1\u0241"+
    "\1\u0242\3\u0241\1\u0242\1\u0271\3\0\6\u0241\1\u0271\1\0"+
    "\34\u0241\4\u0242\23\u0241\1\u0243\1\u0244\1\u0243\1\u0241\2\u0244"+
    "\1\u0243\1\u0271\3\0\4\u0241\2\u0244\1\u0272\1\154\7\u0241"+
    "\25\u0244\4\u0243\1\u0244\2\u0241\3\u0244\10\u0241\1\u0244\4\u0241"+
    "\3\u0244\1\u0241\3\u0244\1\u0241\3\0\4\u0241\3\u0244\1\154"+
    "\7\u0241\32\u0244\2\u0241\3\u0244\10\u0241\1\u0244\3\u0241\50\0"+
    "\1\u0273\105\0\1\u0274\54\0\1\u0275\144\0\1\u0276\25\0"+
    "\1\u0277\1\0\4\u024b\1\u0278\4\u024b\2\363\1\100\7\u024b"+
    "\1\363\1\u024b\1\u0279\1\u024b\1\u027a\1\u0132\1\u024b\1\u0132"+
    "\53\u024b\4\u027b\1\u027c\4\u027b\2\363\1\100\7\u027b\1\363"+
    "\1\u027b\1\u0131\1\u027d\1\u0133\1\u0171\1\u027b\1\u0171\53\u027b"+
    "\3\u016f\1\u0218\3\u016f\1\u0218\1\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\2\u016f\1\u01a7\30\u016f\1\u0218\1\u016f\2\u0218"+
    "\26\u016f\1\u027e\1\u016f\1\u027f\2\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\2\u016f\1\u01a7\57\u016f\3\u0280\3\u016f\1\u0280"+
    "\1\u016f\2\u01a7\1\u01a8\7\u016f\1\u01a7\1\u01a9\2\u016f\1\u01a7"+
    "\12\u016f\2\u0280\3\u016f\1\u0280\1\u016f\1\u0280\1\u016f\1\u0280"+
    "\2\u016f\1\u0280\1\u016f\4\u0280\3\u016f\1\u0280\1\u016f\1\u0280"+
    "\17\u016f\1\u024d\3\u016f\1\u024d\1\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\2\u016f\1\u01a7\30\u016f\1\u024d\1\u016f\2\u024d"+
    "\22\u016f\4\u0251\1\u0281\4\u0251\3\100\7\u0251\1\100\1\u0251"+
    "\1\u0282\1\u0251\1\u0283\1\235\1\u0251\1\235\53\u0251\4\u0284"+
    "\1\u0285\4\u0284\3\100\7\u0284\1\100\1\u0284\1\234\1\u0286"+
    "\1\236\1\242\1\u0284\1\242\53\u0284\3\237\1\u021f\3\237"+
    "\1\u021f\14\237\1\362\2\237\1\u01a8\30\237\1\u021f\1\237"+
    "\2\u021f\26\237\1\u0287\1\237\1\u0288\15\237\1\362\2\237"+
    "\1\u01a8\57\237\3\u0289\3\237\1\u0289\14\237\1\362\2\237"+
    "\1\u01a8\12\237\2\u0289\3\237\1\u0289\1\237\1\u0289\1\237"+
    "\1\u0289\2\237\1\u0289\1\237\4\u0289\3\237\1\u0289\1\237"+
    "\1\u0289\17\237\1\u0253\3\237\1\u0253\14\237\1\362\2\237"+
    "\1\u01a8\30\237\1\u0253\1\237\2\u0253\22\237\1\240\3\u0171"+
    "\3\240\1\u0171\1\240\2\363\1\100\7\240\1\363\16\240"+
    "\2\u0171\3\240\1\u0171\1\240\1\u0171\1\240\1\u0171\2\240"+
    "\1\u0171\1\240\4\u0171\3\240\1\u0171\1\240\1\u0171\14\240"+
    "\11\263\2\127\1\130\7\263\1\127\15\263\1\u028a\55\263"+
    "\2\127\1\130\7\263\1\127\4\263\1\u028b\66\263\2\127"+
    "\1\130\7\263\1\127\14\263\1\u028c\45\263\1\0\3\154"+
    "\1\0\3\154\1\u028d\7\0\2\154\1\u028e\1\154\6\0"+
    "\1\156\32\154\2\0\3\154\10\0\1\154\4\0\3\154"+
    "\1\0\3\154\10\0\4\154\7\0\15\154\1\u028f\14\154"+
    "\2\0\3\154\10\0\1\154\4\0\3\154\1\0\3\154"+
    "\10\0\4\154\7\0\7\154\1\u0240\22\154\2\0\3\154"+
    "\10\0\1\154\3\0\10\u022b\1\u0260\3\0\2\u01f7\4\u022b"+
    "\1\u0260\1\0\62\u022b\1\0\3\u0261\1\0\3\u0261\1\u0290"+
    "\3\0\2\u0291\2\0\4\u0261\7\0\32\u0261\2\0\3\u0261"+
    "\10\0\1\u0261\4\0\3\u0262\1\0\3\u0262\1\u0292\3\0"+
    "\1\u022f\3\0\4\u0262\7\0\32\u0262\2\0\3\u0262\10\0"+
    "\1\u0262\3\0\2\u0293\1\u0294\2\u0293\2\u0294\1\u0293\1\u0263"+
    "\3\0\4\u0293\1\u0294\1\u0293\1\u0263\1\0\7\u0293\25\u0294"+
    "\4\u0293\1\u0294\2\u0293\3\u0294\10\u0293\1\u0294\4\u0293\1\u0295"+
    "\1\u0294\1\u0295\1\u0293\2\u0294\1\u0295\1\u0263\3\0\4\u0293"+
    "\1\u0294\1\u0295\1\u0264\1\154\7\u0293\25\u0294\4\u0295\1\u0294"+
    "\2\u0293\3\u0294\10\u0293\1\u0294\3\u0293\10\0\1\u0265\11\0"+
    "\1\u0265\12\0\1\u0296\5\0\1\u0297\43\0\3\154\1\0"+
    "\3\154\1\u0265\7\0\2\154\1\u0266\1\154\7\0\2\154"+
    "\1\u0298\5\154\1\u0299\21\154\2\0\3\154\10\0\1\154"+
    "\5\0\1\u029a\2\0\2\u029a\1\0\1\u0267\7\0\1\u029a"+
    "\1\0\1\u0267\10\0\25\u029a\4\0\1\u029a\2\0\3\u029a"+
    "\10\0\1\u029a\4\0\1\154\1\u029a\1\154\1\0\2\u029a"+
    "\1\154\1\u0267\7\0\1\u029a\1\154\1\u0268\1\154\7\0"+
    "\25\u029a\4\154\1\u029a\2\0\3\u029a\10\0\1\u029a\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\6\154\1\u029b"+
    "\23\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\7\154\1\u029c\22\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\154\1\0\3\154\10\0"+
    "\4\154\7\0\7\154\1\u029d\22\154\2\0\3\154\10\0"+
    "\1\154\4\0\3\154\1\0\3\154\1\u029e\7\0\2\154"+
    "\1\u029f\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\3\0\10\u0239\1\u026d\3\0\1\u0204\5\u0239\1\u026d\1\0"+
    "\62\u0239\1\0\3\u026e\1\0\3\u026e\1\u02a0\3\0\1\u02a1"+
    "\3\0\4\u026e\7\0\32\u026e\2\0\3\u026e\10\0\1\u026e"+
    "\4\0\3\u026f\1\0\3\u026f\1\u02a2\3\0\1\u023d\1\0"+
    "\1\u02a3\1\0\2\u026f\1\u02a4\1\u026f\7\0\32\u026f\2\0"+
    "\3\u026f\10\0\1\u026f\4\0\3\u0270\1\0\3\u0270\1\u02a2"+
    "\3\0\1\u023d\1\0\1\u02a3\1\0\2\u0270\1\u02a5\1\u0270"+
    "\7\0\32\u0270\2\0\3\u0270\10\0\1\u0270\3\0\10\u0241"+
    "\1\u0271\3\0\6\u0241\1\u0271\1\0\63\u0241\3\u0244\1\u0241"+
    "\3\u0244\1\u0271\3\0\4\u0241\2\u0244\1\u0272\1\154\7\u0241"+
    "\32\u0244\2\u0241\3\u0244\10\u0241\1\u0244\3\u0241\42\0\1\u02a6"+
    "\105\0\1\u02a7\76\0\1\u02a8\71\0\1\u02a9\66\0\11\u024b"+
    "\2\363\1\100\7\u024b\1\363\1\u024b\1\u0279\1\u0132\1\u027a"+
    "\1\u0132\1\u024b\1\u0132\57\u024b\1\u0278\4\u024b\2\363\1\100"+
    "\7\u024b\1\363\1\u01e0\1\u0132\1\363\57\u024b\4\u027d\1\u02aa"+
    "\4\u027d\2\363\1\100\7\u027d\1\363\2\u027d\1\u027b\1\u0132"+
    "\56\u027d\13\363\1\100\11\363\1\u0131\1\u0132\1\u024c\1\240"+
    "\1\363\1\240\53\363\3\u027b\1\u02ab\1\u02ac\1\u027b\1\u02ad"+
    "\1\u02ae\1\u027b\2\363\1\100\7\u027b\1\363\1\u027b\1\u0131"+
    "\1\u027d\1\u02af\1\u0171\1\u027b\1\u0171\25\u027b\1\u02ab\1\u027b"+
    "\1\u02ae\1\u02ab\22\u027b\4\u0132\1\u0170\4\u0132\2\363\1\100"+
    "\7\u0132\1\363\2\u0132\1\363\1\u024b\56\u0132\4\u016f\1\u027e"+
    "\1\u016f\1\u027f\2\u016f\2\u01a7\1\u01a8\7\u016f\1\u01a7\1\u01a9"+
    "\62\u016f\3\u0280\3\u016f\1\u0280\1\u016f\2\u01a7\1\u01a8\7\u016f"+
    "\1\u01a7\1\u01a9\15\u016f\2\u0280\3\u016f\1\u0280\1\u016f\1\u0280"+
    "\1\u016f\1\u0280\2\u016f\1\u0280\1\u016f\4\u0280\3\u016f\1\u0280"+
    "\1\u016f\1\u0280\15\u016f\3\u02b0\3\u016f\1\u02b0\1\u016f\2\u01a7"+
    "\1\u01a8\7\u016f\1\u01a7\1\u01a9\15\u016f\2\u02b0\3\u016f\1\u02b0"+
    "\1\u016f\1\u02b0\1\u016f\1\u02b0\2\u016f\1\u02b0\1\u016f\4\u02b0"+
    "\3\u016f\1\u02b0\1\u016f\1\u02b0\14\u016f\11\u0251\3\100\7\u0251"+
    "\1\100\1\u0251\1\u0282\1\235\1\u0283\1\235\1\u0251\1\235"+
    "\57\u0251\1\u0281\4\u0251\3\100\7\u0251\1\100\1\u01e4\1\u0132"+
    "\1\100\57\u0251\4\u0286\1\u02b1\4\u0286\3\0\7\u0286\1\0"+
    "\2\u0286\1\u0284\1\235\56\u0286\25\100\1\234\1\235\1\u0252"+
    "\1\0\1\100\1\0\53\100\3\u0284\1\u02b2\1\u02b3\1\u0284"+
    "\1\u02b4\1\u02b5\1\u0284\3\100\7\u0284\1\100\1\u0284\1\234"+
    "\1\u0286\1\u02b6\1\242\1\u0284\1\242\25\u0284\1\u02b2\1\u0284"+
    "\1\u02b5\1\u02b2\22\u0284\4\235\1\241\4\235\3\0\7\235"+
    "\1\0\2\235\1\100\1\u0251\56\235\4\237\1\u0287\1\237"+
    "\1\u0288\15\237\1\362\62\237\3\u0289\3\237\1\u0289\14\237"+
    "\1\362\15\237\2\u0289\3\237\1\u0289\1\237\1\u0289\1\237"+
    "\1\u0289\2\237\1\u0289\1\237\4\u0289\3\237\1\u0289\1\237"+
    "\1\u0289\15\237\3\u02b7\3\237\1\u02b7\14\237\1\362\15\237"+
    "\2\u02b7\3\237\1\u02b7\1\237\1\u02b7\1\237\1\u02b7\2\237"+
    "\1\u02b7\1\237\4\u02b7\3\237\1\u02b7\1\237\1\u02b7\14\237"+
    "\11\263\2\127\1\130\7\263\1\127\4\263\1\u02b8\55\263"+
    "\11\u028b\2\u02b9\1\u02ba\7\u028b\1\u02b9\62\u028b\11\263\2\127"+
    "\1\130\7\263\1\127\15\263\1\u02bb\44\263\2\u02bc\1\u02bd"+
    "\2\u02bc\2\u02bd\1\u02bc\1\u028d\3\0\4\u02bc\1\u02bd\1\u02bc"+
    "\1\u028d\1\0\7\u02bc\25\u02bd\4\u02bc\1\u02bd\2\u02bc\3\u02bd"+
    "\10\u02bc\1\u02bd\4\u02bc\1\u02be\1\u02bd\1\u02be\1\u02bc\2\u02bd"+
    "\1\u02be\1\u028d\3\0\4\u02bc\1\u02bd\1\u02be\1\u028e\1\154"+
    "\7\u02bc\25\u02bd\4\u02be\1\u02bd\2\u02bc\3\u02bd\10\u02bc\1\u02bd"+
    "\3\u02bc\1\0\3\154\1\0\3\154\1\u02bf\7\0\2\154"+
    "\1\u02bf\1\154\7\0\32\154\2\0\3\154\10\0\1\154"+
    "\13\0\1\u0290\3\0\2\u0291\4\0\1\u0290\65\0\1\u0261"+
    "\2\0\2\u0261\1\0\1\u0291\7\0\1\u0261\1\0\1\u0291"+
    "\10\0\25\u0261\4\0\1\u0261\2\0\3\u0261\10\0\1\u0261"+
    "\13\0\1\u0292\3\0\1\u022f\5\0\1\u0292\63\0\11\u0293"+
    "\3\0\7\u0293\1\0\63\u0293\3\u0294\1\u0293\3\u0294\1\u02c0"+
    "\3\0\2\u0263\2\u0293\3\u0294\1\u02c1\7\u0293\32\u0294\2\u0293"+
    "\3\u0294\10\u0293\1\u0294\4\u0293\3\u0295\1\u0293\3\u0295\1\u0293"+
    "\3\0\4\u0293\3\u0295\1\154\7\u0293\32\u0295\2\u0293\3\u0295"+
    "\10\u0293\1\u0295\3\u0293\37\0\1\u02c2\115\0\1\u02c3\37\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\4\154\1\u02c4"+
    "\25\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\14\154\1\u02c5\15\154\2\0"+
    "\3\154\10\0\1\154\4\0\3\u029a\1\0\3\u029a\1\u02c6"+
    "\7\0\4\u029a\7\0\32\u029a\2\0\3\u029a\10\0\1\u029a"+
    "\4\0\3\154\1\0\3\154\1\u02c7\7\0\2\154\1\u02c8"+
    "\1\154\6\0\1\156\32\154\2\0\3\154\10\0\1\154"+
    "\3\0\2\u02c9\1\u02ca\2\u02c9\2\u02ca\1\u02c9\1\u029e\3\0"+
    "\4\u02c9\1\u02ca\1\u02c9\1\u029e\1\0\7\u02c9\25\u02ca\4\u02c9"+
    "\1\u02ca\2\u02c9\3\u02ca\10\u02c9\1\u02ca\4\u02c9\1\u02cb\1\u02ca"+
    "\1\u02cb\1\u02c9\2\u02ca\1\u02cb\1\u029e\3\0\4\u02c9\1\u02ca"+
    "\1\u02cb\1\u029f\1\154\7\u02c9\25\u02ca\4\u02cb\1\u02ca\2\u02c9"+
    "\3\u02ca\10\u02c9\1\u02ca\3\u02c9\10\0\1\u02a0\3\0\1\u02a1"+
    "\5\0\1\u02a0\65\0\1\u026e\2\0\2\u026e\1\0\1\u02a1"+
    "\7\0\1\u026e\1\0\1\u02a1\10\0\25\u026e\4\0\1\u026e"+
    "\2\0\3\u026e\10\0\1\u026e\13\0\1\u02a2\3\0\1\u023d"+
    "\1\0\1\u02a3\3\0\1\u02a2\73\0\1\u02a3\6\0\1\u02cc"+
    "\2\0\1\u02a3\167\0\1\u02cd\105\0\1\u02ce\60\0\1\u02cf"+
    "\26\0\3\u027d\1\u02d0\1\u02d1\1\u027d\1\u02d2\1\u02d3\1\u027d"+
    "\2\363\1\100\7\u027d\1\363\34\u027d\1\u02d0\1\u027d\1\u02d3"+
    "\1\u02d0\22\u027d\3\363\1\u027b\3\363\1\u027b\3\363\1\100"+
    "\11\363\1\u0131\1\u0132\1\u024c\1\240\1\363\1\240\25\363"+
    "\1\u027b\1\363\2\u027b\26\363\1\u02d4\1\363\1\u02d5\4\363"+
    "\1\100\11\363\1\u0131\1\u0132\1\u024c\1\240\1\363\1\240"+
    "\54\363\3\u02d6\3\363\1\u02d6\3\363\1\100\11\363\1\u0131"+
    "\1\u0132\1\u024c\1\240\1\363\1\240\7\363\2\u02d6\3\363"+
    "\1\u02d6\1\363\1\u02d6\1\363\1\u02d6\2\363\1\u02d6\1\363"+
    "\4\u02d6\3\363\1\u02d6\1\363\1\u02d6\17\363\1\u02ab\3\363"+
    "\1\u02ab\3\363\1\100\11\363\1\u0131\1\u0132\1\u024c\1\240"+
    "\1\363\1\240\25\363\1\u02ab\1\363\2\u02ab\22\363\4\u0171"+
    "\1\u0172\4\u0171\2\363\1\100\7\u0171\1\363\3\u0171\1\363"+
    "\56\u0171\1\u016f\3\u02d7\3\u016f\1\u02d7\1\u016f\2\u01a7\1\u01a8"+
    "\7\u016f\1\u01a7\1\u01a9\15\u016f\2\u02d7\3\u016f\1\u02d7\1\u016f"+
    "\1\u02d7\1\u016f\1\u02d7\2\u016f\1\u02d7\1\u016f\4\u02d7\3\u016f"+
    "\1\u02d7\1\u016f\1\u02d7\14\u016f\3\u0286\1\u02d8\1\u02d9\1\u0286"+
    "\1\u02da\1\u02db\1\u0286\3\0\7\u0286\1\0\34\u0286\1\u02d8"+
    "\1\u0286\1\u02db\1\u02d8\22\u0286\3\100\1\u0284\3\100\1\u0284"+
    "\15\100\1\234\1\235\1\u0252\1\0\1\100\1\0\25\100"+
    "\1\u0284\1\100\2\u0284\26\100\1\u02dc\1\100\1\u02dd\16\100"+
    "\1\234\1\235\1\u0252\1\0\1\100\1\0\54\100\3\u02de"+
    "\3\100\1\u02de\15\100\1\234\1\235\1\u0252\1\0\1\100"+
    "\1\0\7\100\2\u02de\3\100\1\u02de\1\100\1\u02de\1\100"+
    "\1\u02de\2\100\1\u02de\1\100\4\u02de\3\100\1\u02de\1\100"+
    "\1\u02de\17\100\1\u02b2\3\100\1\u02b2\15\100\1\234\1\235"+
    "\1\u0252\1\0\1\100\1\0\25\100\1\u02b2\1\100\2\u02b2"+
    "\22\100\4\242\1\243\4\242\3\0\7\242\1\0\3\242"+
    "\1\100\56\242\1\237\3\u02df\3\237\1\u02df\14\237\1\362"+
    "\15\237\2\u02df\3\237\1\u02df\1\237\1\u02df\1\237\1\u02df"+
    "\2\237\1\u02df\1\237\4\u02df\3\237\1\u02df\1\237\1\u02df"+
    "\14\237\11\u02b8\2\u02e0\1\u02e1\7\u02b8\1\u02e0\62\u02b8\11\263"+
    "\2\127\1\130\7\263\1\127\4\263\1\u02e2\55\263\11\u02bc"+
    "\3\0\7\u02bc\1\0\63\u02bc\3\u02bd\1\u02bc\3\u02bd\1\u02e3"+
    "\3\0\2\u028d\2\u02bc\3\u02bd\1\u02e4\7\u02bc\32\u02bd\2\u02bc"+
    "\3\u02bd\10\u02bc\1\u02bd\4\u02bc\3\u02be\1\u02bc\3\u02be\1\u02bc"+
    "\3\0\4\u02bc\3\u02be\1\154\7\u02bc\32\u02be\2\u02bc\3\u02be"+
    "\10\u02bc\1\u02be\3\u02bc\13\u02bf\1\0\72\u02bf\10\u0293\1\u02c0"+
    "\3\0\2\u0263\4\u0293\1\u02c0\1\0\62\u0293\1\0\3\u02c1"+
    "\1\0\3\u02c1\1\u02e5\3\0\2\u02e6\2\0\4\u02c1\7\0"+
    "\32\u02c1\2\0\3\u02c1\10\0\1\u02c1\11\0\1\u02e7\144\0"+
    "\1\u02e8\41\0\3\154\1\0\1\154\1\u02e9\1\154\10\0"+
    "\4\154\7\0\32\154\2\0\3\154\10\0\1\154\4\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\12\154\1\u02ea"+
    "\17\154\2\0\3\154\10\0\1\154\13\0\1\u02c6\11\0"+
    "\1\u02c6\63\0\2\u02eb\1\u02ec\2\u02eb\2\u02ec\1\u02eb\1\u02c7"+
    "\3\0\4\u02eb\1\u02ec\1\u02eb\1\u02c7\1\0\7\u02eb\25\u02ec"+
    "\4\u02eb\1\u02ec\2\u02eb\3\u02ec\10\u02eb\1\u02ec\4\u02eb\1\u02ed"+
    "\1\u02ec\1\u02ed\1\u02eb\2\u02ec\1\u02ed\1\u02c7\3\0\4\u02eb"+
    "\1\u02ec\1\u02ed\1\u02c8\1\154\7\u02eb\25\u02ec\4\u02ed\1\u02ec"+
    "\2\u02eb\3\u02ec\10\u02eb\1\u02ec\3\u02eb\11\u02c9\3\0\7\u02c9"+
    "\1\0\63\u02c9\3\u02ca\1\u02c9\3\u02ca\1\u02ee\3\0\1\u029e"+
    "\3\u02c9\3\u02ca\1\u02ef\7\u02c9\32\u02ca\2\u02c9\3\u02ca\10\u02c9"+
    "\1\u02ca\4\u02c9\3\u02cb\1\u02c9\3\u02cb\1\u02c9\3\0\4\u02c9"+
    "\3\u02cb\1\154\7\u02c9\32\u02cb\2\u02c9\3\u02cb\10\u02c9\1\u02cb"+
    "\3\u02c9\10\0\1\u02f0\5\0\1\u02a3\3\0\1\u02f0\102\0"+
    "\1\u02f1\105\0\1\u02f2\121\0\1\u02f3\52\0\3\u0132\1\u027d"+
    "\1\u0170\2\u0132\1\u027d\1\u0132\2\363\1\100\7\u0132\1\363"+
    "\2\u0132\1\363\1\u024b\30\u0132\1\u027d\1\u0132\2\u027d\26\u0132"+
    "\1\u02f4\1\u0132\1\u02f5\2\u0132\2\363\1\100\7\u0132\1\363"+
    "\2\u0132\1\363\1\u024b\57\u0132\3\u02f6\1\u0170\2\u0132\1\u02f6"+
    "\1\u0132\2\363\1\100\7\u0132\1\363\2\u0132\1\363\1\u024b"+
    "\12\u0132\2\u02f6\3\u0132\1\u02f6\1\u0132\1\u02f6\1\u0132\1\u02f6"+
    "\2\u0132\1\u02f6\1\u0132\4\u02f6\3\u0132\1\u02f6\1\u0132\1\u02f6"+
    "\17\u0132\1\u02d0\1\u0170\2\u0132\1\u02d0\1\u0132\2\363\1\100"+
    "\7\u0132\1\363\2\u0132\1\363\1\u024b\30\u0132\1\u02d0\1\u0132"+
    "\2\u02d0\22\u0132\4\363\1\u02d4\1\363\1\u02d5\4\363\1\100"+
    "\11\363\1\u0131\1\u0132\1\u0133\1\240\1\363\1\240\54\363"+
    "\3\u02d6\3\363\1\u02d6\3\363\1\100\11\363\1\u0131\1\u0132"+
    "\1\u0133\1\240\1\363\1\240\7\363\2\u02d6\3\363\1\u02d6"+
    "\1\363\1\u02d6\1\363\1\u02d6\2\363\1\u02d6\1\363\4\u02d6"+
    "\3\363\1\u02d6\1\363\1\u02d6\15\363\3\u02f7\3\363\1\u02f7"+
    "\3\363\1\100\11\363\1\u0131\1\u0132\1\u0133\1\240\1\363"+
    "\1\240\7\363\2\u02f7\3\363\1\u02f7\1\363\1\u02f7\1\363"+
    "\1\u02f7\2\363\1\u02f7\1\363\4\u02f7\3\363\1\u02f7\1\363"+
    "\1\u02f7\14\363\1\u016f\3\u0218\3\u016f\1\u0218\1\u016f\2\u01a7"+
    "\1\u01a8\7\u016f\1\u01a7\1\u01a9\15\u016f\2\u0218\3\u016f\1\u0218"+
    "\1\u016f\1\u0218\1\u016f\1\u0218\2\u016f\1\u0218\1\u016f\4\u0218"+
    "\3\u016f\1\u0218\1\u016f\1\u0218\14\u016f\3\235\1\u0286\1\241"+
    "\2\235\1\u0286\1\235\3\0\7\235\1\0\2\235\1\100"+
    "\1\u0251\30\235\1\u0286\1\235\2\u0286\26\235\1\u02f8\1\235"+
    "\1\u02f9\2\235\3\0\7\235\1\0\2\235\1\100\1\u0251"+
    "\57\235\3\u02fa\1\241\2\235\1\u02fa\1\235\3\0\7\235"+
    "\1\0\2\235\1\100\1\u0251\12\235\2\u02fa\3\235\1\u02fa"+
    "\1\235\1\u02fa\1\235\1\u02fa\2\235\1\u02fa\1\235\4\u02fa"+
    "\3\235\1\u02fa\1\235\1\u02fa\17\235\1\u02d8\1\241\2\235"+
    "\1\u02d8\1\235\3\0\7\235\1\0\2\235\1\100\1\u0251"+
    "\30\235\1\u02d8\1\235\2\u02d8\22\235\4\100\1\u02dc\1\100"+
    "\1\u02dd\16\100\1\234\1\235\1\236\1\0\1\100\1\0"+
    "\54\100\3\u02de\3\100\1\u02de\15\100\1\234\1\235\1\236"+
    "\1\0\1\100\1\0\7\100\2\u02de\3\100\1\u02de\1\100"+
    "\1\u02de\1\100\1\u02de\2\100\1\u02de\1\100\4\u02de\3\100"+
    "\1\u02de\1\100\1\u02de\15\100\3\u02fb\3\100\1\u02fb\15\100"+
    "\1\234\1\235\1\236\1\0\1\100\1\0\7\100\2\u02fb"+
    "\3\100\1\u02fb\1\100\1\u02fb\1\100\1\u02fb\2\100\1\u02fb"+
    "\1\100\4\u02fb\3\100\1\u02fb\1\100\1\u02fb\14\100\1\237"+
    "\3\u021f\3\237\1\u021f\14\237\1\362\15\237\2\u021f\3\237"+
    "\1\u021f\1\237\1\u021f\1\237\1\u021f\2\237\1\u021f\1\237"+
    "\4\u021f\3\237\1\u021f\1\237\1\u021f\14\237\11\u02e2\2\u02fc"+
    "\1\u02fd\7\u02e2\1\u02fc\62\u02e2\10\u02bc\1\u02e3\3\0\2\u028d"+
    "\4\u02bc\1\u02e3\1\0\62\u02bc\1\0\3\u02e4\1\0\3\u02e4"+
    "\1\u02fe\3\0\2\u02ff\2\0\4\u02e4\7\0\32\u02e4\2\0"+
    "\3\u02e4\10\0\1\u02e4\13\0\1\u02e5\3\0\2\u02e6\4\0"+
    "\1\u02e5\65\0\1\u02c1\2\0\2\u02c1\1\0\1\u02e6\7\0"+
    "\1\u02c1\1\0\1\u02e6\10\0\25\u02c1\4\0\1\u02c1\2\0"+
    "\3\u02c1\10\0\1\u02c1\45\0\1\u0300\113\0\1\u0301\36\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u0302"+
    "\22\154\2\0\3\154\10\0\1\154\4\0\3\154\1\0"+
    "\3\154\10\0\4\154\7\0\15\154\1\u0303\14\154\2\0"+
    "\3\154\10\0\1\154\3\0\11\u02eb\3\0\7\u02eb\1\0"+
    "\63\u02eb\3\u02ec\1\u02eb\3\u02ec\1\u0304\3\0\2\u02c7\2\u02eb"+
    "\3\u02ec\1\u0305\7\u02eb\32\u02ec\2\u02eb\3\u02ec\10\u02eb\1\u02ec"+
    "\4\u02eb\3\u02ed\1\u02eb\3\u02ed\1\u02eb\3\0\4\u02eb\3\u02ed"+
    "\1\154\7\u02eb\32\u02ed\2\u02eb\3\u02ed\10\u02eb\1\u02ed\3\u02eb"+
    "\10\u02c9\1\u02ee\3\0\1\u029e\5\u02c9\1\u02ee\1\0\62\u02c9"+
    "\1\0\3\u02ef\1\0\3\u02ef\1\u0306\3\0\1\u0307\3\0"+
    "\4\u02ef\7\0\32\u02ef\2\0\3\u02ef\10\0\1\u02ef\40\0"+
    "\1\u0308\50\0\4\u0132\1\u0309\1\u0132\1\u02f5\2\u0132\2\363"+
    "\1\100\7\u0132\1\363\63\u0132\3\u02f6\1\u0170\2\u0132\1\u02f6"+
    "\1\u0132\2\363\1\100\7\u0132\1\363\2\u0132\1\363\13\u0132"+
    "\2\u02f6\3\u0132\1\u02f6\1\u0132\1\u02f6\1\u0132\1\u02f6\2\u0132"+
    "\1\u02f6\1\u0132\4\u02f6\3\u0132\1\u02f6\1\u0132\1\u02f6\15\u0132"+
    "\3\u030a\1\u0170\2\u0132\1\u030a\1\u0132\2\363\1\100\7\u0132"+
    "\1\363\2\u0132\1\363\13\u0132\2\u030a\3\u0132\1\u030a\1\u0132"+
    "\1\u030a\1\u0132\1\u030a\2\u0132\1\u030a\1\u0132\4\u030a\3\u0132"+
    "\1\u030a\1\u0132\1\u030a\14\u0132\1\363\3\u030b\3\363\1\u030b"+
    "\3\363\1\100\11\363\1\u0131\1\u0132\1\u0133\1\240\1\363"+
    "\1\240\7\363\2\u030b\3\363\1\u030b\1\363\1\u030b\1\363"+
    "\1\u030b\2\363\1\u030b\1\363\4\u030b\3\363\1\u030b\1\363"+
    "\1\u030b\14\363\4\235\1\u030c\1\235\1\u02f9\2\235\3\0"+
    "\7\235\1\0\63\235\3\u02fa\1\241\2\235\1\u02fa\1\235"+
    "\3\0\7\235\1\0\2\235\1\100\13\235\2\u02fa\3\235"+
    "\1\u02fa\1\235\1\u02fa\1\235\1\u02fa\2\235\1\u02fa\1\235"+
    "\4\u02fa\3\235\1\u02fa\1\235\1\u02fa\15\235\3\u030d\1\241"+
    "\2\235\1\u030d\1\235\3\0\7\235\1\0\2\235\1\100"+
    "\13\235\2\u030d\3\235\1\u030d\1\235\1\u030d\1\235\1\u030d"+
    "\2\235\1\u030d\1\235\4\u030d\3\235\1\u030d\1\235\1\u030d"+
    "\14\235\1\100\3\u030e\3\100\1\u030e\15\100\1\234\1\235"+
    "\1\236\1\0\1\100\1\0\7\100\2\u030e\3\100\1\u030e"+
    "\1\100\1\u030e\1\100\1\u030e\2\100\1\u030e\1\100\4\u030e"+
    "\3\100\1\u030e\1\100\1\u030e\14\100\10\0\1\u02fe\3\0"+
    "\2\u02ff\4\0\1\u02fe\65\0\1\u02e4\2\0\2\u02e4\1\0"+
    "\1\u02ff\7\0\1\u02e4\1\0\1\u02ff\10\0\25\u02e4\4\0"+
    "\1\u02e4\2\0\3\u02e4\10\0\1\u02e4\45\0\1\u030f\44\0"+
    "\3\154\1\0\3\154\10\0\4\154\7\0\7\154\1\u0310"+
    "\22\154\2\0\3\154\10\0\1\154\3\0\10\u02eb\1\u0304"+
    "\3\0\2\u02c7\4\u02eb\1\u0304\1\0\62\u02eb\1\0\3\u0305"+
    "\1\0\3\u0305\1\u0311\3\0\2\u0312\2\0\4\u0305\7\0"+
    "\32\u0305\2\0\3\u0305\10\0\1\u0305\13\0\1\u0306\3\0"+
    "\1\u0307\5\0\1\u0306\65\0\1\u02ef\2\0\2\u02ef\1\0"+
    "\1\u0307\7\0\1\u02ef\1\0\1\u0307\10\0\25\u02ef\4\0"+
    "\1\u02ef\2\0\3\u02ef\10\0\1\u02ef\107\0\1\u0313\1\0"+
    "\4\u0132\1\u02f4\1\u0132\1\u02f5\2\u0132\2\363\1\100\7\u0132"+
    "\1\363\2\u0132\1\363\60\u0132\3\u0314\1\u0170\2\u0132\1\u0314"+
    "\1\u0132\2\363\1\100\7\u0132\1\363\2\u0132\1\363\13\u0132"+
    "\2\u0314\3\u0132\1\u0314\1\u0132\1\u0314\1\u0132\1\u0314\2\u0132"+
    "\1\u0314\1\u0132\4\u0314\3\u0132\1\u0314\1\u0132\1\u0314\14\u0132"+
    "\1\363\3\u027b\3\363\1\u027b\3\363\1\100\11\363\1\u0131"+
    "\1\u0132\1\u0133\1\240\1\363\1\240\7\363\2\u027b\3\363"+
    "\1\u027b\1\363\1\u027b\1\363\1\u027b\2\363\1\u027b\1\363"+
    "\4\u027b\3\363\1\u027b\1\363\1\u027b\14\363\4\235\1\u02f8"+
    "\1\235\1\u02f9\2\235\3\0\7\235\1\0\2\235\1\100"+
    "\60\235\3\u0315\1\241\2\235\1\u0315\1\235\3\0\7\235"+
    "\1\0\2\235\1\100\13\235\2\u0315\3\235\1\u0315\1\235"+
    "\1\u0315\1\235\1\u0315\2\235\1\u0315\1\235\4\u0315\3\235"+
    "\1\u0315\1\235\1\u0315\14\235\1\100\3\u0284\3\100\1\u0284"+
    "\15\100\1\234\1\235\1\236\1\0\1\100\1\0\7\100"+
    "\2\u0284\3\100\1\u0284\1\100\1\u0284\1\100\1\u0284\2\100"+
    "\1\u0284\1\100\4\u0284\3\100\1\u0284\1\100\1\u0284\14\100"+
    "\10\0\1\u0311\3\0\2\u0312\4\0\1\u0311\65\0\1\u0305"+
    "\2\0\2\u0305\1\0\1\u0312\7\0\1\u0305\1\0\1\u0312"+
    "\10\0\25\u0305\4\0\1\u0305\2\0\3\u0305\10\0\1\u0305"+
    "\22\0\1\u0316\66\0\1\u0132\3\u027d\1\u0170\2\u0132\1\u027d"+
    "\1\u0132\2\363\1\100\7\u0132\1\363\2\u0132\1\363\13\u0132"+
    "\2\u027d\3\u0132\1\u027d\1\u0132\1\u027d\1\u0132\1\u027d\2\u0132"+
    "\1\u027d\1\u0132\4\u027d\3\u0132\1\u027d\1\u0132\1\u027d\14\u0132"+
    "\1\235\3\u0286\1\241\2\235\1\u0286\1\235\3\0\7\235"+
    "\1\0\2\235\1\100\13\235\2\u0286\3\235\1\u0286\1\235"+
    "\1\u0286\1\235\1\u0286\2\235\1\u0286\1\235\4\u0286\3\235"+
    "\1\u0286\1\235\1\u0286\14\235";

  private static int [] zzUnpackTrans() {
    int [] result = new int[45850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\1\17\0\2\1\1\11\4\1\1\11\2\1\1\11"+
    "\14\1\1\11\1\1\1\11\4\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\10\11\4\1\2\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\3\1\2\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\2\1\3\0\2\11\1\0\1\11\1\0"+
    "\2\1\1\0\15\1\3\0\1\11\3\1\1\0\1\11"+
    "\1\1\1\0\1\11\4\1\5\11\1\0\1\1\1\0"+
    "\1\11\1\1\4\0\1\11\1\1\10\0\1\11\4\1"+
    "\6\11\3\0\1\11\5\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\11\2\1\1\11\35\1\3\0\6\1\1\0"+
    "\1\11\1\0\1\1\5\0\1\11\2\0\1\1\4\0"+
    "\1\11\1\0\1\1\1\11\1\1\1\11\3\0\42\1"+
    "\3\0\2\1\1\0\1\11\1\1\14\0\1\11\1\1"+
    "\3\0\46\1\2\11\1\0\2\1\1\0\1\1\13\0"+
    "\1\1\5\0\11\1\1\0\31\1\1\11\2\1\7\0"+
    "\2\1\10\0\1\1\1\11\3\0\31\1\1\0\7\1"+
    "\6\0\2\1\3\0\1\1\6\0\1\1\1\11\4\0"+
    "\13\1\1\0\22\1\1\11\6\0\1\1\6\0\1\1"+
    "\13\0\10\1\1\0\15\1\1\0\7\1\4\0\2\11"+
    "\2\1\4\0\2\1\7\0\1\1\1\11\1\0\10\1"+
    "\1\0\1\1\1\0\7\1\1\0\3\1\2\0\1\11"+
    "\2\0\1\1\2\0\2\1\4\0\1\1\2\0\2\1"+
    "\7\0\4\1\1\0\4\1\2\0\11\1\1\0\1\1"+
    "\1\0\2\1\3\0\1\11\1\0\4\1\3\0\4\1"+
    "\3\0\1\1\1\11\1\0\6\1\2\0\10\1\10\0"+
    "\3\1\5\0\3\1\1\0\1\1\1\11\1\0\3\1"+
    "\3\0\10\1\2\11\4\0\1\1\3\0\2\1\1\11"+
    "\1\1\1\0\1\11\1\0\5\1\4\0\1\1\2\0"+
    "\1\1\1\11\2\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[790];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int balance = 0;
  int commentbalance = 0;
  int action_line = 0;
  int bufferSize = 16384;

  File file;
  Stack files = new Stack();

  StringBuffer userCode   = new StringBuffer();
  
  String classCode;
  String initCode;   
  String initThrow;
  String eofCode;
  String eofThrow;
  String lexThrow;
  String eofVal;
  String scanErrorException;
  String cupSymbol = "sym";

  StringBuffer actionText = new StringBuffer();
  StringBuffer string     = new StringBuffer();
  
  boolean charCount;
  boolean lineCount;
  boolean columnCount;
  boolean cupCompatible;  
  boolean cupDebug;
  boolean isInteger;
  boolean isIntWrap;
  boolean isYYEOF;
  boolean notUnix;
  boolean isPublic;
  boolean isFinal;
  boolean isAbstract;
  boolean bolUsed;
  boolean standalone;
  boolean debugOption;
  boolean useRowMap = Options.gen_method == Options.PACK || Options.gen_method == Options.TABLE;
  boolean packed = Options.gen_method == Options.PACK;
  boolean caseless;
  boolean inclusive_states;
  boolean eofclose;
    
  String isImplementing;
  String isExtending;
  String className = "Yylex";
  String functionName;
  String tokenType;
  String visibility = "public";
    
  Vector /* String */ ctorArgs = new Vector();
  Vector /* String */ ctorTypes = new Vector();
    
  LexicalStates states = new LexicalStates();

  Vector actions = new Vector();
  
  private int nextState;

  boolean macroDefinition;

  Timer t = new Timer();

  public int currentLine() {
    return yyline;
  }    

  public void setFile(File file) {
    this.file = file;
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
   
  // updates line and column count to the beginning of the first
  // non whitespace character in yytext, but leaves yyline+yycolumn 
  // untouched
  private Symbol symbol_countUpdate(int type, Object value) {
     int lc = yyline;
     int cc = yycolumn;
     String text = yytext();

     for (int i=0; i < text.length(); i++) {
      char c = text.charAt(i);

      if (c != '\n' && c != '\r' && c != ' ' && c != '\t' ) 
        return new Symbol(type, lc, cc, value);

      if (c == '\n') {
        lc++;
        cc = 0;
      }
      else
        cc++;
    }
   
    return new Symbol(type, yyline, yycolumn, value);
  }

  private String makeMacroIdent() {
    String matched = yytext().trim();
    return matched.substring(1, matched.length()-1).trim();
  }

  public static String conc(Object a, Object b) {
    if (a == null && b == null) return null;
    if (a == null) return b.toString();
    if (b == null) return a.toString();
    
    return a.toString()+b.toString();
  }

  public static String concExc(Object a, Object b) {
    if (a == null && b == null) return null;
    if (a == null) return b.toString();
    if (b == null) return a.toString();
    
    return a.toString()+", "+b.toString();
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexScan(java.io.Reader in) {
    states.insert("YYINITIAL", true);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexScan(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1788) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 117: 
          { cupDebug = true;
          }
        case 146: break;
        case 121: 
          { actionText.setLength(0); yybegin(JAVA_CODE); action_line = yyline+1; return symbol(EOFRULE);
          }
        case 147: break;
        case 112: 
          { File f = new File(yytext().substring(9).trim());
                                if ( !f.canRead() )
                                  throw new ScannerException(file,ErrorMessages.NOT_READABLE, yyline); 
                                // check for cycle
                                if (files.search(f) > 0)
                                  throw new ScannerException(file,ErrorMessages.FILE_CYCLE, yyline);
                                try {
                                  yypushStream( new FileReader(f) );
                                  files.push(file);
                                  file = f;
                                  Out.println("Including \""+file+"\"");
                                }
                                catch (FileNotFoundException e) {
                                  throw new ScannerException(file,ErrorMessages.NOT_READABLE, yyline); 
                                }
          }
        case 148: break;
        case 87: 
          { return symbol(FULL);
          }
        case 149: break;
        case 91: 
          { return symbol(ASCII);
          }
        case 150: break;
        case 20: 
          { string.setLength(0); nextState = REGEXP; yybegin(STRING_CONTENT);
          }
        case 151: break;
        case 141: 
          { return symbol(UPPERCLASS);
          }
        case 152: break;
        case 34: 
          { return symbol(COMMA);
          }
        case 153: break;
        case 61: 
          { return symbol(CHAR,new Character('\f'));
          }
        case 154: break;
        case 110: 
          { throw new ScannerException(file,ErrorMessages.NO_BUFFER_SIZE, yyline);
          }
        case 155: break;
        case 103: 
          { throw new ScannerException(file,ErrorMessages.EOF_WO_ACTION);
          }
        case 156: break;
        case 142: 
          { return symbol(LOWERCLASS);
          }
        case 157: break;
        case 72: 
          { string.append('\r');
          }
        case 158: break;
        case 43: 
          { return symbol(HAT);
          }
        case 159: break;
        case 48: 
          { yybegin(MACROS); ctorArgs.add(yytext().trim());
          }
        case 160: break;
        case 1: 
          { return symbol(EOF);
          }
        case 161: break;
        case 59: 
          { return symbol(CHAR,new Character('\t'));
          }
        case 162: break;
        case 144: 
          { eofclose = false;
          }
        case 163: break;
        case 102: 
          { isPublic = true;
          }
        case 164: break;
        case 111: 
          { actionText.setLength(0); yybegin(JAVA_CODE); 
                                Symbol s = symbol_countUpdate(EOFRULE, null);
                                action_line = s.left+1; 
                                return s;
          }
        case 165: break;
        case 40: 
          { balance++; return symbol(OPENCLASS);
          }
        case 166: break;
        case 11: 
          { yybegin(REGEXP);
          }
        case 167: break;
        case 13: 
          { yybegin(STATES); return symbol_countUpdate(LESSTHAN, null);
          }
        case 168: break;
        case 68: 
          { string.append( (char) Integer.parseInt(yytext().substring(1,yytext().length()), 8));
          }
        case 169: break;
        case 62: 
          { return symbol(CHAR,new Character('\b'));
          }
        case 170: break;
        case 39: 
          { throw new ScannerException(file,ErrorMessages.EOL_IN_CHARCLASS,yyline,yycolumn);
          }
        case 171: break;
        case 5: 
          { states.insert(yytext(),inclusive_states);
          }
        case 172: break;
        case 70: 
          { string.append('\n');
          }
        case 173: break;
        case 10: 
          { yybegin(REGEXP); return symbol(EQUALS);
          }
        case 174: break;
        case 145: 
          { return symbol(JLETTERDIGITCLASS);
          }
        case 175: break;
        case 18: 
          { return symbol(STAR);
          }
        case 176: break;
        case 42: 
          { string.setLength(0); nextState = CHARCLASS; yybegin(STRING_CONTENT);
          }
        case 177: break;
        case 115: 
          { isAbstract = true;
          }
        case 178: break;
        case 75: 
          { yypushback(1); yycolumn--; return symbol(CHAR, new Character(yytext().charAt(0)));
          }
        case 179: break;
        case 113: 
          { lexThrow = concExc(lexThrow,yytext().substring(8).trim());
          }
        case 180: break;
        case 108: 
          { throw new ScannerException(file,ErrorMessages.QUIL_CUPSYM, yyline);
          }
        case 181: break;
        case 92: 
          { packed = false; useRowMap = true;
          }
        case 182: break;
        case 86: 
          { cupCompatible = true;  
                                isImplementing = concExc(isImplementing, "java_cup.runtime.Scanner");
                                if (functionName == null)
                                  functionName = "next_token";
                                if (tokenType == null)
                                  tokenType = "java_cup.runtime.Symbol";
                                if (eofVal == null)
                                  eofVal = "return new java_cup.runtime.Symbol("+cupSymbol+".EOF);";
                                if (!Options.jlex) eofclose = true;
          }
        case 183: break;
        case 30: 
          { bolUsed = true; return symbol(HAT);
          }
        case 184: break;
        case 4: 
          { throw new ScannerException(file,ErrorMessages.UNEXPECTED_CHAR, yyline, yycolumn);
          }
        case 185: break;
        case 35: 
          { yybegin(REGEXP); return symbol(MORETHAN);
          }
        case 186: break;
        case 99: 
          { packed = false; useRowMap = false;
          }
        case 187: break;
        case 118: 
          { caseless = true;
          }
        case 188: break;
        case 38: 
          { yybegin(nextState); return symbol(STRING, string.toString());
          }
        case 189: break;
        case 76: 
          { return symbol(REPEAT, new Integer(yytext().substring(1).trim()));
          }
        case 190: break;
        case 12: 
          { return symbol_countUpdate(RBRACE, null);
          }
        case 191: break;
        case 138: 
          { scanErrorException = yytext().substring(11).trim();
          }
        case 192: break;
        case 140: 
          { lexThrow = concExc(lexThrow,yytext().substring(12).trim());
          }
        case 193: break;
        case 83: 
          { return symbol(MACROUSE, yytext().substring(1,yytext().length()-1));
          }
        case 194: break;
        case 2: 
          { /* ignore */
          }
        case 195: break;
        case 126: 
          { throw new ScannerException(file,ErrorMessages.QUIL_INITTHROW, yyline);
          }
        case 196: break;
        case 47: 
          { throw new ScannerException(file,ErrorMessages.CTOR_ARG,yyline,yycolumn);
          }
        case 197: break;
        case 107: 
          { throw new ScannerException(file,ErrorMessages.QUIL_THROW, yyline);
          }
        case 198: break;
        case 31: 
          { actionText.append(yytext());
          }
        case 199: break;
        case 82: 
          { string.append( (char) Integer.parseInt(yytext().substring(2,yytext().length()), 16));
          }
        case 200: break;
        case 106: 
          { notUnix = true;
          }
        case 201: break;
        case 88: 
          { lineCount = true;
          }
        case 202: break;
        case 135: 
          { initThrow = concExc(initThrow,yytext().substring(11).trim());
          }
        case 203: break;
        case 130: 
          { standalone = true; isInteger = true;
          }
        case 204: break;
        case 52: 
          { nextState = MACROS; yybegin(COMMENT);
          }
        case 205: break;
        case 24: 
          { return symbol(TILDE);
          }
        case 206: break;
        case 37: 
          { throw new ScannerException(file,ErrorMessages.UNTERMINATED_STR, yyline, yycolumn);
          }
        case 207: break;
        case 109: 
          { className = yytext().substring(7).trim();
          }
        case 208: break;
        case 9: 
          { throw new ScannerException(file,ErrorMessages.UNKNOWN_OPTION, yyline, yycolumn);
          }
        case 209: break;
        case 55: 
          { nextState = REGEXPSTART; yybegin(COMMENT);
          }
        case 210: break;
        case 16: 
          { return symbol(POINT);
          }
        case 211: break;
        case 73: 
          { string.append('\f');
          }
        case 212: break;
        case 65: 
          { yybegin(REPEATEXP); return symbol(REPEAT, new Integer(yytext().trim().substring(1).trim()));
          }
        case 213: break;
        case 80: 
          { return symbol(CHAR, new Character( (char) Integer.parseInt(yytext().substring(2,yytext().length()), 16)));
          }
        case 214: break;
        case 139: 
          { initThrow = concExc(initThrow,string);  yybegin(MACROS);
          }
        case 215: break;
        case 134: 
          { eofThrow = concExc(eofThrow,string); yybegin(MACROS);
          }
        case 216: break;
        case 71: 
          { string.append('\t');
          }
        case 217: break;
        case 67: 
          { string.append(yytext().charAt(1));
          }
        case 218: break;
        case 7: 
          { yybegin(MACROS);
          }
        case 219: break;
        case 97: 
          { eofCode = conc(eofCode,string); yybegin(MACROS);
          }
        case 220: break;
        case 56: 
          { return symbol(CHAR, new Character(yytext().charAt(1)));
          }
        case 221: break;
        case 27: 
          { return symbol(PLUS);
          }
        case 222: break;
        case 100: 
          { columnCount = true;
          }
        case 223: break;
        case 123: 
          { isExtending = yytext().substring(9).trim();
          }
        case 224: break;
        case 122: 
          { eofVal = string.toString(); yybegin(MACROS);
          }
        case 225: break;
        case 36: 
          { string.append(yytext());
          }
        case 226: break;
        case 96: 
          { return symbol(UNICODE);
          }
        case 227: break;
        case 74: 
          { string.append('\b');
          }
        case 228: break;
        case 23: 
          { return symbol(BANG);
          }
        case 229: break;
        case 131: 
          { throw new ScannerException(file,ErrorMessages.QUIL_SCANERROR, yyline);
          }
        case 230: break;
        case 90: 
          { packed = true; useRowMap = true;
          }
        case 231: break;
        case 25: 
          { return symbol(OPENBRACKET);
          }
        case 232: break;
        case 60: 
          { return symbol(CHAR,new Character('\r'));
          }
        case 233: break;
        case 93: 
          { isFinal = true;
          }
        case 234: break;
        case 26: 
          { return symbol(CLOSEBRACKET);
          }
        case 235: break;
        case 85: 
          { isInteger = true;
          }
        case 236: break;
        case 19: 
          { return symbol(LOOKAHEAD);
          }
        case 237: break;
        case 51: 
          { commentbalance++;
          }
        case 238: break;
        case 49: 
          { t.start(); 
                             yybegin(MACROS); 
                             macroDefinition = true; 
                             return symbol(USERCODE,userCode);
          }
        case 239: break;
        case 44: 
          { return symbol(DASH);
          }
        case 240: break;
        case 137: 
          { throw new ScannerException(file,ErrorMessages.QUIL_YYLEXTHROW, yyline);
          }
        case 241: break;
        case 95: 
          { debugOption = true;
          }
        case 242: break;
        case 64: 
          { nextState = REGEXP; yybegin(COMMENT);
          }
        case 243: break;
        case 32: 
          { if (balance > 0) {
                 balance--;     
                 actionText.append('}'); 
               }
               else {
                 yybegin(REGEXPSTART); 
                 Action a = new Action(actionText.toString(), action_line);
                 actions.addElement(a);
                 return symbol(ACTION, a);
               }
          }
        case 244: break;
        case 29: 
          { return symbol(DOLLAR);
          }
        case 245: break;
        case 17: 
          { yybegin(CHARCLASS); return symbol(OPENCLASS);
          }
        case 246: break;
        case 104: 
          { initCode = conc(initCode,string);    yybegin(MACROS);
          }
        case 247: break;
        case 69: 
          { string.append('\"');
          }
        case 248: break;
        case 136: 
          { isImplementing = concExc(isImplementing, yytext().substring(12).trim());
          }
        case 249: break;
        case 125: 
          { return symbol(LETTERCLASS);
          }
        case 250: break;
        case 101: 
          { isInteger = true;
                                if (eofVal == null)
                                  eofVal = "return 0;";
                                eofclose = true;
          }
        case 251: break;
        case 41: 
          { if (balance > 0) balance--; else yybegin(REGEXP); return symbol(CLOSECLASS);
          }
        case 252: break;
        case 77: 
          { string.setLength(0); yybegin(COPY);
          }
        case 253: break;
        case 8: 
          { return symbol(IDENT, yytext());
          }
        case 254: break;
        case 120: 
          { return symbol(DIGITCLASS);
          }
        case 255: break;
        case 143: 
          { lexThrow = concExc(lexThrow,string); yybegin(MACROS);
          }
        case 256: break;
        case 53: 
          { Out.warning(ErrorMessages.NOT_AT_BOL, yyline); yypushback(1);
          }
        case 257: break;
        case 22: 
          { return symbol(BAR);
          }
        case 258: break;
        case 45: 
          { throw new ScannerException(file,ErrorMessages.UNEXPECTED_NL, yyline, yycolumn);
          }
        case 259: break;
        case 116: 
          { cupSymbol = yytext().substring(8).trim(); 
                                if (cupCompatible) Out.warning(ErrorMessages.CUPSYM_AFTER_CUP, yyline);
          }
        case 260: break;
        case 58: 
          { return symbol(CHAR,new Character('\n'));
          }
        case 261: break;
        case 94: 
          { isYYEOF = true;
          }
        case 262: break;
        case 14: 
          { return symbol(CHAR, new Character(yytext().charAt(0)));
          }
        case 263: break;
        case 98: 
          { tokenType = yytext().substring(6).trim();
          }
        case 264: break;
        case 33: 
          { balance++; actionText.append('{');
          }
        case 265: break;
        case 127: 
          { eofThrow = concExc(eofThrow,yytext().substring(10).trim());
          }
        case 266: break;
        case 63: 
          { actionText.setLength(0); yybegin(JAVA_CODE); action_line = yyline+1; return symbol(REGEXPEND);
          }
        case 267: break;
        case 81: 
          { return symbol_countUpdate(MACROUSE, makeMacroIdent());
          }
        case 268: break;
        case 15: 
          { if (macroDefinition) { yybegin(MACROS); } return symbol(REGEXPEND);
          }
        case 269: break;
        case 124: 
          { throw new ScannerException(file,ErrorMessages.QUIL_EOFTHROW, yyline);
          }
        case 270: break;
        case 89: 
          { charCount = true;
          }
        case 271: break;
        case 129: 
          { visibility = "private"; Skeleton.makePrivate();
          }
        case 272: break;
        case 133: 
          { return symbol(JLETTERCLASS);
          }
        case 273: break;
        case 21: 
          { yybegin(REGEXPSTART); return symbol(LBRACE);
          }
        case 274: break;
        case 114: 
          { eofclose = true;
          }
        case 275: break;
        case 66: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 15;
            int zzFPos = zzStartRead;
            if (zzFin.length <= zzBufferL.length) { zzFin = new boolean[zzBufferL.length+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = zzBufferL[zzFPos++];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 16;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = zzBufferL[--zzFPos];
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (macroDefinition) {
                              yybegin(EATWSPNL);
                              return symbol(BAR); 
                            }
                            else { 
                              yybegin(REGEXPSTART); 
                              return symbol(NOACTION); 
                            }
          }
        case 276: break;
        case 46: 
          { yybegin(REGEXP); return symbol(RBRACE);
          }
        case 277: break;
        case 78: 
          { inclusive_states = false; yybegin(STATELIST);
          }
        case 278: break;
        case 119: 
          { bufferSize = Integer.parseInt(yytext().substring(8).trim());
          }
        case 279: break;
        case 105: 
          { isIntWrap = true;
          }
        case 280: break;
        case 132: 
          { yybegin(CTOR_ARG); ctorTypes.add(yytext().substring(8).trim());
          }
        case 281: break;
        case 3: 
          { userCode.append(yytext());
          }
        case 282: break;
        case 54: 
          { macroDefinition = false; yybegin(REGEXPSTART); return symbol(DELIMITER);
          }
        case 283: break;
        case 128: 
          { functionName = yytext().substring(10).trim();
          }
        case 284: break;
        case 84: 
          { classCode = conc(classCode,string);  yybegin(MACROS);
          }
        case 285: break;
        case 28: 
          { return symbol(QUESTION);
          }
        case 286: break;
        case 50: 
          { if (commentbalance > 0) 
                commentbalance--; 
              else
                yybegin(nextState);
          }
        case 287: break;
        case 79: 
          { inclusive_states = true; yybegin(STATELIST);
          }
        case 288: break;
        case 57: 
          { return symbol(CHAR, new Character( (char) Integer.parseInt(yytext().substring(1,yytext().length()), 8)));
          }
        case 289: break;
        case 6: 
          { 
          }
        case 290: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING_CONTENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STRING);
            }
            case 791: break;
            case MACROS: {
              if ( yymoreStreams() ) {
                                  file = (File) files.pop();
                                  yypopStream();
                                }
                                else
                                  throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 792: break;
            case STATELIST: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 793: break;
            case CHARCLASS: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }
            case 794: break;
            case JAVA_CODE: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_ACTION, action_line-1);
            }
            case 795: break;
            case REPEATEXP: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_REGEXP);
            }
            case 796: break;
            case COMMENT: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_COMMENT);
            }
            case 797: break;
            case STATES: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_STATES);
            }
            case 798: break;
            case COPY: {
              throw new ScannerException(file,ErrorMessages.EOF_IN_MACROS);
            }
            case 799: break;
            default:
              {
                if ( yymoreStreams() ) {
             file = (File) files.pop();
             yypopStream();
           }
           else 
             return symbol(EOF);
              }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexScan <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        LexScan scanner = null;
        try {
          scanner = new LexScan( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
