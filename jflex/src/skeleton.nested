
  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
--- private static final int YY_BUFFERSIZE = ...;

  /** lexical states */
---  lexical states, charmap

  /* error codes */
  private static final int YY_UNKNOWN_ERROR = 0;
  private static final int YY_NO_MATCH = 1;
  private static final int YY_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

--- isFinal list
  /** the input device */
  private java.io.Reader yyFlexReader;

  /** the current state of the DFA */
  private int yyFlexState;

  /** the current lexical state */
  private int yyFlexLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yyFlexBuffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yyFlexMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int yyFlexPushbackPos;

  /** the current text position in the buffer */
  private int yyFlexCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yyFlexStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yyFlexEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * yyFlexAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yyFlexAtBOL = true;

  /** yyFlexAtEOF == true <=> the scanner is at the EOF */
  private boolean yyFlexAtEOF;


  /** the stack of open (nested) input streams to read from */
  private java.util.Stack yyFlexStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class YyFlexStreamInfo {
    java.io.Reader yyFlexReader;
    int yyFlexEndRead;
    int yyFlexStartRead;
    int yyFlexCurrentPos;
    int yyFlexMarkedPos;
    int yyFlexPushbackPos;
    int yyline;
    int yycolumn;
    char [] yyFlexBuffer;
    boolean yyFlexAtEOF;

    /** sets all values stored in this class */
    YyFlexStreamInfo(java.io.Reader yyFlexReader, int yyFlexEndRead, int yyFlexStartRead,
                  int yyFlexCurrentPos, int yyFlexMarkedPos, int yyFlexPushbackPos,
                  char [] yyFlexBuffer, boolean yyFlexAtEOF, int yyline, int yycolumn) {
      this.yyFlexReader      = yyFlexReader;
      this.yyFlexEndRead     = yyFlexEndRead;
      this.yyFlexStartRead   = yyFlexStartRead;
      this.yyFlexCurrentPos  = yyFlexCurrentPos;
      this.yyFlexMarkedPos   = yyFlexMarkedPos;
      this.yyFlexPushbackPos = yyFlexPushbackPos;
      this.yyFlexBuffer      = yyFlexBuffer;
      this.yyFlexAtEOF       = yyFlexAtEOF;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

--- user class code

  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
--- constructor declaration


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean yyFlexRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yyFlexStartRead > 0) {
      System.arraycopy(yyFlexBuffer, yyFlexStartRead,
                       yyFlexBuffer, 0,
                       yyFlexEndRead-yyFlexStartRead);

      /* translate stored positions */
      yyFlexEndRead-= yyFlexStartRead;
      yyFlexCurrentPos-= yyFlexStartRead;
      yyFlexMarkedPos-= yyFlexStartRead;
      yyFlexPushbackPos-= yyFlexStartRead;
      yyFlexStartRead = 0;
    }

    /* is the buffer big enough? */
    if (yyFlexCurrentPos >= yyFlexBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yyFlexCurrentPos*2];
      System.arraycopy(yyFlexBuffer, 0, newBuffer, 0, yyFlexBuffer.length);
      yyFlexBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yyFlexReader.read(yyFlexBuffer, yyFlexEndRead,
                                            yyFlexBuffer.length-yyFlexEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yyFlexEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    yyFlexAtEOF = true;            /* indicate end of file */
    yyFlexEndRead = yyFlexStartRead;  /* invalidate buffer    */

    if (yyFlexReader != null)
      yyFlexReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    yyFlexStreams.push(
      new YyFlexStreamInfo(yyFlexReader, yyFlexEndRead, yyFlexStartRead, yyFlexCurrentPos,
                        yyFlexMarkedPos, yyFlexPushbackPos, yyFlexBuffer, yyFlexAtEOF,
                        yyline, yycolumn)
    );
    yyFlexAtEOF  = false;
    yyFlexBuffer = new char[YY_BUFFERSIZE];
    yyFlexReader = reader;
    yyFlexEndRead = yyFlexStartRead = 0;
    yyFlexCurrentPos = yyFlexMarkedPos = yyFlexPushbackPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    yyFlexReader.close();
    YyFlexStreamInfo s = (YyFlexStreamInfo) yyFlexStreams.pop();
    yyFlexBuffer      = s.yyFlexBuffer;
    yyFlexReader      = s.yyFlexReader;
    yyFlexEndRead     = s.yyFlexEndRead;
    yyFlexStartRead   = s.yyFlexStartRead;
    yyFlexCurrentPos  = s.yyFlexCurrentPos;
    yyFlexMarkedPos   = s.yyFlexMarkedPos ;
    yyFlexPushbackPos = s.yyFlexPushbackPos;
    yyFlexAtEOF       = s.yyFlexAtEOF;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !yyFlexStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    yyFlexReader = reader;
    yyFlexAtBOL  = true;
    yyFlexAtEOF  = false;
    yyFlexEndRead = yyFlexStartRead = 0;
    yyFlexCurrentPos = yyFlexMarkedPos = yyFlexPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yyFlexLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return yyFlexLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    yyFlexLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( yyFlexBuffer, yyFlexStartRead, yyFlexMarkedPos-yyFlexStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return yyFlexBuffer[yyFlexStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return yyFlexMarkedPos-yyFlexStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
--- yyFlexScanError declaration
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

--- throws clause
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
--- yypushback decl (contains yyFlexScanError exception)
    if ( number > yylength() )
      yyFlexScanError(YY_PUSHBACK_2BIG);

    yyFlexMarkedPos -= number;
  }


--- yyFlexDoEOF
  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
--- yylex declaration
    int yyFlexInput;
    int yyFlexAction;

--- local declarations

    while (true) {
      // cached fields:
      int yyFlexCurrentPosL;
      int yyFlexMarkedPosL = yyFlexMarkedPos;
      int yyFlexEndReadL = yyFlexEndRead;
      char [] yyFlexBufferL = yyFlexBuffer;
      char [] yyCMapL = YY_CMAP;

--- start admin (line, char, col count)
      yyFlexAction = -1;

      yyFlexCurrentPosL = yyFlexCurrentPos = yyFlexStartRead = yyFlexMarkedPosL;
  
--- start admin (lexstate etc)

      yy_forAction: {
        while (true) {
    
--- next input, line, col, char count, next transition, isFinal action
            yyFlexAction = yyFlexState;
            yyFlexMarkedPosL = yyFlexCurrentPosL;
--- line count update
          }

        }
      }

      // store back cached position
      yyFlexMarkedPos = yyFlexMarkedPosL;
--- char count update

--- actions
        default: 
          if (yyFlexInput == YYEOF && yyFlexStartRead == yyFlexCurrentPos) {
            yyFlexAtEOF = true;
--- eofvalue
          } 
          else {
--- no match
          }
      }
    }
  }

--- main

}
